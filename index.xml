<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>BUF1024</title>
    <link>https://buf1024.github.io/</link>
    <description>Recent content on BUF1024</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 30 Apr 2024 16:00:10 +0800</lastBuildDate><atom:link href="https://buf1024.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>网络收音机增加同步功能</title>
      <link>https://buf1024.github.io/post/2024-04-30-hiqradio-sync/</link>
      <pubDate>Tue, 30 Apr 2024 16:00:10 +0800</pubDate>
      
      <guid>https://buf1024.github.io/post/2024-04-30-hiqradio-sync/</guid>
      <description>
        
          
            之前写了个跨n端的网络收音机，不过一直缺少的一个功能，就是跨多端播放记录和收藏夹的同步。虽然可以通过导入导出的方式勉强可以实现某种程度的同步
          
          
        
      </description>
    </item>
    
    <item>
      <title>Rust sqlx SQLBuilder</title>
      <link>https://buf1024.github.io/post/2024-01-13-rust-sqlx-sqlbuilder/</link>
      <pubDate>Sat, 13 Jan 2024 16:00:10 +0800</pubDate>
      
      <guid>https://buf1024.github.io/post/2024-01-13-rust-sqlx-sqlbuilder/</guid>
      <description>
        
          
            对于个人来说，一直不喜欢ORM​框架。明明就是熟悉sql​的，为何还要封装一层？抛开针对各个数据库厂商难以作sql​ 优化之外，封装之后的写法
          
          
        
      </description>
    </item>
    
    <item>
      <title>前端工程化配置保姆级教程</title>
      <link>https://buf1024.github.io/post/2024-01-08-vite-engineering-config/</link>
      <pubDate>Mon, 08 Jan 2024 16:00:10 +0800</pubDate>
      
      <guid>https://buf1024.github.io/post/2024-01-08-vite-engineering-config/</guid>
      <description>
        
          
            感觉自己有点不务正业，明明是一个大后端，却要去折腾前端，又折腾的不够专业。都来鄙视我吧。 目前一般使用vite​作为前端构建工具，下面所记录的
          
          
        
      </description>
    </item>
    
    <item>
      <title>rust 过程宏</title>
      <link>https://buf1024.github.io/post/2023-12-26-rust-proc-macro/</link>
      <pubDate>Tue, 26 Dec 2023 16:00:10 +0800</pubDate>
      
      <guid>https://buf1024.github.io/post/2023-12-26-rust-proc-macro/</guid>
      <description>
        
          
            简介 Rust 编程语言里面有两种宏系统，一种是声明宏（Declarative Macros），另一种为过程宏（Procedural Macros）。声明
          
          
        
      </description>
    </item>
    
    <item>
      <title>一行代码让 rustc panic</title>
      <link>https://buf1024.github.io/post/2023-09-21-rust-panic/</link>
      <pubDate>Thu, 21 Sep 2023 18:00:10 +0800</pubDate>
      
      <guid>https://buf1024.github.io/post/2023-09-21-rust-panic/</guid>
      <description>
        
          
            今天遇到一个非常特殊的问题，源自于以下一段代码： 1 2 3 4 // 敏感信息去掉 fORMat!(&amp;#34;https://xxxget?\ a=(ab%3D%22code%22)&amp;amp;X_=xadf0&amp;#34;, code = &amp;amp;code[2..]); 这是一段拼接url的代码，以上代码是错误的写法，%3D%22
          
          
        
      </description>
    </item>
    
    <item>
      <title>Flutter 桌面端多窗口支持</title>
      <link>https://buf1024.github.io/post/2023-07-19-flutter-muti-window/</link>
      <pubDate>Wed, 19 Jul 2023 18:00:10 +0800</pubDate>
      
      <guid>https://buf1024.github.io/post/2023-07-19-flutter-muti-window/</guid>
      <description>
        
          
            多窗口 Flutter的已经支持桌面端开发已经一段时间了，不过关注桌面端开发的应该也知道，flutter的桌面端并不支持多窗口。虽然官方表示以
          
          
        
      </description>
    </item>
    
    <item>
      <title>hiqradio 一个简单的收音机软件</title>
      <link>https://buf1024.github.io/post/2023-07-04-hiqradio/</link>
      <pubDate>Tue, 04 Jul 2023 18:00:10 +0800</pubDate>
      
      <guid>https://buf1024.github.io/post/2023-07-04-hiqradio/</guid>
      <description>
        
          
            网页版体验: https://luoguochun.cn/hiqradio/ 有一段时间，在B站那里刷视频的时候，无意刷到一个德生的收音机视频。突然让我想起了我的中学时代，我的中学时代是在收音机的陪伴之下
          
          
        
      </description>
    </item>
    
    <item>
      <title>android https 抓包</title>
      <link>https://buf1024.github.io/post/2023-03-21-android-https/</link>
      <pubDate>Tue, 21 Mar 2023 08:10:12 +0800</pubDate>
      
      <guid>https://buf1024.github.io/post/2023-03-21-android-https/</guid>
      <description>
        
          
            前几天有个需求，要破解一下某个app的部分通讯协议，需要了解一下某部分功能如何实现，甚至通过其协议抓取一些数据。而这个app只有androi
          
          
        
      </description>
    </item>
    
    <item>
      <title>为爱发电终是不能长久的……</title>
      <link>https://buf1024.github.io/post/2023-03-16-love-for-insterest/</link>
      <pubDate>Thu, 16 Mar 2023 08:10:12 +0800</pubDate>
      
      <guid>https://buf1024.github.io/post/2023-03-16-love-for-insterest/</guid>
      <description>
        
          
            最初个人量化就是为了防止自己手贱，用计算机了执行自己的策略。这个所谓的个人量化并没有非常清晰的目标，大概只有两点非常粗略的要求：第一个，就是
          
          
        
      </description>
    </item>
    
    <item>
      <title>TCP未建立之前，丢失的SYN报文会不会重传？</title>
      <link>https://buf1024.github.io/post/2023-03-02-tcp-setup/</link>
      <pubDate>Thu, 02 Mar 2023 14:10:12 +0800</pubDate>
      
      <guid>https://buf1024.github.io/post/2023-03-02-tcp-setup/</guid>
      <description>
        
          
            记得以前，有人问TCP问题的时候，也出现过一次像这样的争论。争论的问题是，TCP四次挥手为什么要四次，三次为什么不可以。我的答案是可以的，只
          
          
        
      </description>
    </item>
    
    <item>
      <title>TCP温故而知新</title>
      <link>https://buf1024.github.io/post/2023-02-14-tcp-renew/</link>
      <pubDate>Thu, 02 Feb 2023 14:15:12 +0800</pubDate>
      
      <guid>https://buf1024.github.io/post/2023-02-14-tcp-renew/</guid>
      <description>
        
          
            TCP是什么 TCP是面向连接的，可靠的，基于字节流的传输协议。 面向连接，指的是一对一的，不是一对多。 可靠性，指的是不管网络环境多么的复杂多变
          
          
        
      </description>
    </item>
    
    <item>
      <title>lazy_static -- 静态变量延迟初始化</title>
      <link>https://buf1024.github.io/post/2021-09-13-rust-lib-lazy-static-intro/</link>
      <pubDate>Mon, 13 Sep 2021 01:12:02 +0800</pubDate>
      
      <guid>https://buf1024.github.io/post/2021-09-13-rust-lib-lazy-static-intro/</guid>
      <description>
        
          
            全局静态变量初化，在他编程语言里面，是一个很简单又自然的事，然而在rust里面并非容易。如果像下面定义全局静态变量，那么会报错： 1 static ref VEC_VAL: Vec&amp;lt;String&amp;gt; =
          
          
        
      </description>
    </item>
    
    <item>
      <title>nom -- 乐高式富有语义的parser</title>
      <link>https://buf1024.github.io/post/2021-09-12-rust-lib-nom-intro/</link>
      <pubDate>Sun, 12 Sep 2021 21:12:02 +0800</pubDate>
      
      <guid>https://buf1024.github.io/post/2021-09-12-rust-lib-nom-intro/</guid>
      <description>
        
          
            简介 写过parser的人，不管是简单的自定义协议，或者复杂的协议，一般都是采用自上往下的解释方式，从第1个字节，一路开黑，到最后字节。遇到;
          
          
        
      </description>
    </item>
    
    <item>
      <title>config-rs -- 多种数据配置格式</title>
      <link>https://buf1024.github.io/post/2022-08-02-rust-lib-config-rs-intro/</link>
      <pubDate>Mon, 02 Aug 2021 10:12:02 +0800</pubDate>
      
      <guid>https://buf1024.github.io/post/2022-08-02-rust-lib-config-rs-intro/</guid>
      <description>
        
          
            简介 读取配置文件是一个比较常见的需求，不过不同的人可能会选择不同的配置文件格式，有的人选择toml，有的人选择ini，又或者是从环境变量钟获
          
          
        
      </description>
    </item>
    
    <item>
      <title>rust 异步编程粗略理解 async/.await</title>
      <link>https://buf1024.github.io/post/2021-07-26-rust-async/</link>
      <pubDate>Mon, 26 Jul 2021 22:12:02 +0800</pubDate>
      
      <guid>https://buf1024.github.io/post/2021-07-26-rust-async/</guid>
      <description>
        
          
            简介 协程已经是非常成熟的概念了，很多编程语言(比如JS, Python, DART等等)已提供原生的支持了，并且几乎提供相同的关键字async/await。
          
          
        
      </description>
    </item>
    
    <item>
      <title>flask极简简介</title>
      <link>https://buf1024.github.io/post/2021-02-03-flask-intro/</link>
      <pubDate>Wed, 03 Feb 2021 19:10:00 +0800</pubDate>
      
      <guid>https://buf1024.github.io/post/2021-02-03-flask-intro/</guid>
      <description>
        
          
            todo: flask环境变量 &amp;ndash; FLASK_ENV, FLASK_DEBUG flask可以支持热更新式的开发，PyCharm的设置方式是在Run Configuration上面勾上DEBUG选
          
          
        
      </description>
    </item>
    
    <item>
      <title>fabric极简简介</title>
      <link>https://buf1024.github.io/post/2021-01-15-fabric-intro/</link>
      <pubDate>Fri, 15 Jan 2021 19:12:00 +0800</pubDate>
      
      <guid>https://buf1024.github.io/post/2021-01-15-fabric-intro/</guid>
      <description>
        
          
            fabric主要用于自动化运维，可以使用类似于make命令一样执行Python的函数。 fabric主要依赖于pyinvoke和paramik
          
          
        
      </description>
    </item>
    
    <item>
      <title>Python 使用到的一丢丢代码片段</title>
      <link>https://buf1024.github.io/post/2021-01-01-py-gist/</link>
      <pubDate>Fri, 01 Jan 2021 11:12:08 +0800</pubDate>
      
      <guid>https://buf1024.github.io/post/2021-01-01-py-gist/</guid>
      <description>
        
          
            Python 装饰器终极写法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 # 假如需要用到装饰的功能（建议经常使用），那么建议使用下面写法 # 目的
          
          
        
      </description>
    </item>
    
    <item>
      <title>微服务架构一些事</title>
      <link>https://buf1024.github.io/post/2019-07-30-micro-service/</link>
      <pubDate>Mon, 29 Jul 2019 20:17:52 +0800</pubDate>
      
      <guid>https://buf1024.github.io/post/2019-07-30-micro-service/</guid>
      <description>
        
          
            简介 微服务是最近几年比较热的一个话题，并且随着容器技术(docker, k8s等)的不断发展只会越来越热，同时也有各种各样的大中小公司尝试着拥
          
          
        
      </description>
    </item>
    
    <item>
      <title>Flutter 一丢丢代码片段</title>
      <link>https://buf1024.github.io/post/2019-07-05-flutter-gist/</link>
      <pubDate>Fri, 05 Jul 2019 16:12:10 +0800</pubDate>
      
      <guid>https://buf1024.github.io/post/2019-07-05-flutter-gist/</guid>
      <description>
        
          
            Flutter路由 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 # 方式一，手动调用Navigator方法: # 或 Navigator.of(context).push ...
          
          
        
      </description>
    </item>
    
    <item>
      <title>android国内源</title>
      <link>https://buf1024.github.io/post/2019-07-01-android-source/</link>
      <pubDate>Mon, 01 Jul 2019 15:12:00 +0800</pubDate>
      
      <guid>https://buf1024.github.io/post/2019-07-01-android-source/</guid>
      <description>
        
          
            如果是Flutter框架，同时要flutter框架修改文件 flutter\packages\flutter_tools\gradle\flutter.gradle grep找出build.gradle文件 凡是和google相关的，全部替换为 1 2
          
          
        
      </description>
    </item>
    
    <item>
      <title>Flutter -- 写app的另一种姿态</title>
      <link>https://buf1024.github.io/post/2019-06-21-flutter-try/</link>
      <pubDate>Fri, 21 Jun 2019 17:09:02 +0800</pubDate>
      
      <guid>https://buf1024.github.io/post/2019-06-21-flutter-try/</guid>
      <description>
        
          
            简介 Flutter，如果不是专门去搜索，很少开发者会留意这个ui框架。即使搜索到，一了解到使用的是一种听都没听过的全新编程语言&amp;ndash;
          
          
        
      </description>
    </item>
    
    <item>
      <title>Flutter desktop mac 隐藏标题栏</title>
      <link>https://buf1024.github.io/post/2019-06-02-flutter-desktop-hide-title/</link>
      <pubDate>Sun, 02 Jun 2019 15:13:02 +0800</pubDate>
      
      <guid>https://buf1024.github.io/post/2019-06-02-flutter-desktop-hide-title/</guid>
      <description>
        
          
          
        
      </description>
    </item>
    
    <item>
      <title>Flutter Trouble shoot</title>
      <link>https://buf1024.github.io/post/2019-06-01-flutter-trouble-shoot/</link>
      <pubDate>Sat, 01 Jun 2019 19:13:02 +0800</pubDate>
      
      <guid>https://buf1024.github.io/post/2019-06-01-flutter-trouble-shoot/</guid>
      <description>
        
          
            Flutter升级无法翻墙 1 2 3 4 5 6 7 升级没法fq的，运行报错的，可以做以下操作将sdk中 flutter/packages/flutter_tools/gradle/resolve_dependencies.gradle flutter/packages/flutter_tools/gradle/aar_init_script.gradle flutter/packages/flutter_tools/gradle/flutter.gradle 3个文件中的 https://storage.googleapis.com/download.flutter.io 替换为： http://download.flutter.io Flutter upgrade 经常失败或超时
          
          
        
      </description>
    </item>
    
    <item>
      <title>物理机新建xubuntu一些问题</title>
      <link>https://buf1024.github.io/post/2019-05-05-new-xubuntu-problem/</link>
      <pubDate>Sun, 05 May 2019 11:12:02 +0800</pubDate>
      
      <guid>https://buf1024.github.io/post/2019-05-05-new-xubuntu-problem/</guid>
      <description>
        
          
            无线网卡驱动问题 &amp;ndash; 无法显示wifi 解决方法: https://jingyan.baidu.com/article/ca2d939dd4f1b4eb6c31ce09.html PS： 下载需要联网，可以使用手机usb共享网络。 新建用户密码过于简单 1 2 # 去掉Cracklib
          
          
        
      </description>
    </item>
    
    <item>
      <title>vim一些小技巧</title>
      <link>https://buf1024.github.io/post/2019-03-01-vim-tricks/</link>
      <pubDate>Fri, 01 Mar 2019 18:02:12 +0800</pubDate>
      
      <guid>https://buf1024.github.io/post/2019-03-01-vim-tricks/</guid>
      <description>
        
          
            命令行编辑 1 2 3 q:打开命令窗口 CTL+R 加上寄存器名称，复制寄存器内容 关于函数跳转： 注意VIM，编辑源代码时，先生成tag文件，和设置好inclu
          
          
        
      </description>
    </item>
    
    <item>
      <title>防火墙放开端口</title>
      <link>https://buf1024.github.io/post/2018-10-01-firewall-cmd/</link>
      <pubDate>Mon, 01 Oct 2018 10:54:00 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2018-10-01-firewall-cmd/</guid>
      <description>
        
          
            firewall-cmd &amp;ndash;permanent &amp;ndash;zone=public &amp;ndash;add-port=8484/tcp &amp;ndash;zone #作用域 &amp;ndash;add-port=8484/tcp #添加端口，格式为：端口/通讯协议 &amp;ndash;permanent #永久生效，没有此参数重启后失效 firewall-cmd &amp;ndash;reload 1、firewalld的基本使用 启动： systemctl start firewalld 查看
          
          
        
      </description>
    </item>
    
    <item>
      <title>高可用系统</title>
      <link>https://buf1024.github.io/post/2018-09-01-high-available-loadbalance/</link>
      <pubDate>Sat, 01 Sep 2018 19:54:09 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2018-09-01-high-available-loadbalance/</guid>
      <description>
        
          
            很久之前，在公司鼎盛的时期，还存在运维人员的时候，我们开发应用的时候，就会和运维人员讨论一下部署的方案，听的比较多的是，运维人员说的比较多的
          
          
        
      </description>
    </item>
    
    <item>
      <title>Macos一丢丢小技巧</title>
      <link>https://buf1024.github.io/post/2018-07-06-mac-newbie/</link>
      <pubDate>Fri, 06 Jul 2018 11:02:16 +0800</pubDate>
      
      <guid>https://buf1024.github.io/post/2018-07-06-mac-newbie/</guid>
      <description>
        
          
            有的人认为用mac是纯粹了了装X，不过用过的人自然才知道什么是无知。 摘录一些常见的问题和使用用的技巧。 Mac cpu占用高 Mac系统中 mdwork
          
          
        
      </description>
    </item>
    
    <item>
      <title>Docker -- 简介</title>
      <link>https://buf1024.github.io/post/2018-06-02-docker-intro/</link>
      <pubDate>Sat, 02 Jun 2018 11:40:39 +0800</pubDate>
      
      <guid>https://buf1024.github.io/post/2018-06-02-docker-intro/</guid>
      <description>
        
          
            背景 docker从几年前开始就是开源社区一颗耀眼的明星，自己也在那个时候接触docker，也是因为docker学习了golang（golan
          
          
        
      </description>
    </item>
    
    <item>
      <title>react-native 实践部分</title>
      <link>https://buf1024.github.io/post/2018-05-25-react-native-practice/</link>
      <pubDate>Fri, 25 May 2018 17:04:10 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2018-05-25-react-native-practice/</guid>
      <description>
        
          
            这两月，零零散散的折腾react-native, 使用react-native将公司的h5微盘前端转化为原生的app。从零开始搭框架到app主
          
          
        
      </description>
    </item>
    
    <item>
      <title>react-native 开发环境配置 -- 调试部分</title>
      <link>https://buf1024.github.io/post/2018-04-14-react-native-dev-env/</link>
      <pubDate>Sat, 14 Apr 2018 13:44:08 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2018-04-14-react-native-dev-env/</guid>
      <description>
        
          
            在学习一们新的语言或编程技术的时候，我总偏向于弄清楚它的调试工具和技巧。因为我总觉得我写的程序有大大的bug，而打印日志这种最原始的调试方式
          
          
        
      </description>
    </item>
    
    <item>
      <title>ReactJS  --  试水篇</title>
      <link>https://buf1024.github.io/post/2018-01-25-reactjs-try/</link>
      <pubDate>Thu, 25 Jan 2018 09:32:32 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2018-01-25-reactjs-try/</guid>
      <description>
        
          
            简介 在大前端里，有三个特别流行的MVVM（参考：MVC，MVP 和 MVVM 的图示）框架，AngularJS，ReactJS和Vue。在MVVM之前，
          
          
        
      </description>
    </item>
    
    <item>
      <title>软件构架  --  无技术简篇</title>
      <link>https://buf1024.github.io/post/2017-12-26-soft-architecture/</link>
      <pubDate>Wed, 06 Dec 2017 11:08:13 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2017-12-26-soft-architecture/</guid>
      <description>
        
          
            软件构架 所谓的软件构架，是有关软件整体结构与各组件的抽象描述，用于指导大型软件系统各个方面的设计。一个好的软件构架，会随着业务的不断深入发展
          
          
        
      </description>
    </item>
    
    <item>
      <title>git 合并commit</title>
      <link>https://buf1024.github.io/post/2017-07-15-git-merge-commit/</link>
      <pubDate>Sat, 15 Jul 2017 19:56:18 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2017-07-15-git-merge-commit/</guid>
      <description>
        
          
            git合并commit，主要是fork别人的仓库，想合并到别人的仓库的时候，合并commit。如此一来，cmmit的历史笔记清晰，没有乱七八
          
          
        
      </description>
    </item>
    
    <item>
      <title>git推送多个远程分支</title>
      <link>https://buf1024.github.io/post/2017-07-05-git-push_multi/</link>
      <pubDate>Wed, 05 Jul 2017 20:56:18 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2017-07-05-git-push_multi/</guid>
      <description>
        
          
            查看.git/config 1 2 3 4 5 6 7 8 9 10 11 12 13 [core] repositoryfORMatversion = 0 filemode = true bare = false logallrefupdates = true ignorecase = true precomposeunicode = true [remote &amp;#34;origin&amp;#34;] url = git@gitee.com:heidonglgc/k-map.git fetch = +refs/heads/*:refs/remotes/origin/* [branch &amp;#34;master&amp;#34;] remote = origin merge = refs/heads/master 增加一个名为mir
          
          
        
      </description>
    </item>
    
    <item>
      <title>golang 私钥&#34;加密&#34;公钥&#34;解密&#34;</title>
      <link>https://buf1024.github.io/post/2017-06-23-golang-private-public-crypt/</link>
      <pubDate>Fri, 23 Jun 2017 20:57:11 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2017-06-23-golang-private-public-crypt/</guid>
      <description>
        
          
            之前工作主要使用C/C++与银行/第三方支付对接，但C/C++无法满足客户”当天给协议明天实盘上载“的开发速度以及现公司一些特殊情况，所以决
          
          
        
      </description>
    </item>
    
    <item>
      <title>线程同步与原子变量</title>
      <link>https://buf1024.github.io/post/2017-06-03-synchronize-atomic-variable/</link>
      <pubDate>Sat, 03 Jun 2017 11:19:25 +0800</pubDate>
      
      <guid>https://buf1024.github.io/post/2017-06-03-synchronize-atomic-variable/</guid>
      <description>
        
          
            无论是基于多线程还是多进程并发的程序，同步控制总是不可避免的。按照自己的思维和使用习惯，自然会想到的是互斥量(mutext)和自旋锁(spi
          
          
        
      </description>
    </item>
    
    <item>
      <title>GCC不常见，但有用特别选项</title>
      <link>https://buf1024.github.io/post/2017-05-01-gcc-missing/</link>
      <pubDate>Mon, 01 May 2017 22:10:31 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2017-05-01-gcc-missing/</guid>
      <description>
        
          
            -isystem dir Search dir for header files, after all directories specified by -I but before the standard system directories. Mark it as a system directory, so that it gets the same special treatment as is applied to the standard system directories. If dir begins with &amp;quot;=&amp;quot;, then the &amp;quot;=&amp;quot; will be replaced by the sysroot prefix; see --sysroot and -isysroot. 标记 DIR 为系统DIR，
          
          
        
      </description>
    </item>
    
    <item>
      <title>lwan http 服务器</title>
      <link>https://buf1024.github.io/post/2017-04-28-lwan-http-server/</link>
      <pubDate>Fri, 28 Apr 2017 22:10:32 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2017-04-28-lwan-http-server/</guid>
      <description>
        
          
            简介 服务器端程序的设计模式一般比较固定，目前主要有两种主要的解决方式，一种多进程方式(进程池)，另外一种多线程的方式(线程池)(P.S:请忘
          
          
        
      </description>
    </item>
    
    <item>
      <title>微信web通信协议</title>
      <link>https://buf1024.github.io/post/2017-04-20-weixin-web-proto/</link>
      <pubDate>Thu, 20 Apr 2017 21:12:03 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2017-04-20-weixin-web-proto/</guid>
      <description>
        
          
            微信有网页版，网页版的微信具备手机微信大部分功能。理论上，放在web页面上的所有东西，都是可以被破解的。对于web微信协议的破解，一些没有接
          
          
        
      </description>
    </item>
    
    <item>
      <title>js快速参考</title>
      <link>https://buf1024.github.io/post/2016-12-29-head-first-js/</link>
      <pubDate>Thu, 29 Dec 2016 17:08:46 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2016-12-29-head-first-js/</guid>
      <description>
        
          
            P.S.: 因为极少用，所以js一直都忘记，所以，现在记录一下, 适合于曾以为入门js却又少使用的参考…… JS 运行于宿主环境，常见宿主环境有web浏览器和
          
          
        
      </description>
    </item>
    
    <item>
      <title>ssl/tls 握手</title>
      <link>https://buf1024.github.io/post/2016-11-16-https-handshake/</link>
      <pubDate>Wed, 16 Nov 2016 11:17:11 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2016-11-16-https-handshake/</guid>
      <description>
        
          
            http协议是互联网的基石，然而http却是基于文本的协议，在网络传输中容易被窃听，冒充和篡改。如果对安全性要求相对高，那么一般使用http
          
          
        
      </description>
    </item>
    
    <item>
      <title>git 版本控制</title>
      <link>https://buf1024.github.io/post/2016-10-10-git-toilet-book/</link>
      <pubDate>Mon, 10 Oct 2016 14:46:23 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2016-10-10-git-toilet-book/</guid>
      <description>
        
          
            简介 git，是目前最流行的版本控制系统，没有之一。git作为分布式版本控制系统，与其他集中式版本控制系统(如svn)的一个重要区别是，git
          
          
        
      </description>
    </item>
    
    <item>
      <title>tcp 协议小结</title>
      <link>https://buf1024.github.io/post/2016-09-23-tcp-fuck/</link>
      <pubDate>Fri, 23 Sep 2016 21:20:10 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2016-09-23-tcp-fuck/</guid>
      <description>
        
          
            tcp协议是一个比较复杂的协议，对tcp协议深入理解的，真的非常少非常少；对tcp协议误理解或理解片面的，真的非常多非常多。当然这也包括自己
          
          
        
      </description>
    </item>
    
    <item>
      <title>内联ASM</title>
      <link>https://buf1024.github.io/post/2016-03-01-inline-asm/</link>
      <pubDate>Tue, 01 Mar 2016 14:13:05 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2016-03-01-inline-asm/</guid>
      <description>
        
          
            一、最基本格式: `asm(&amp;quot;assembly code&amp;quot;)` 注意： 1. 汇编代码必须用双引号括起来 2. 如果汇编代码有多行，下一行必须有制表符开始 例子： 1 2 3 4 5 asm ( “movl $1, %eax\
          
          
        
      </description>
    </item>
    
    <item>
      <title>AT&amp;T Stype GAS Assembly</title>
      <link>https://buf1024.github.io/post/2016-02-02-at-t-stype-gas-assembly/</link>
      <pubDate>Tue, 02 Feb 2016 14:13:05 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2016-02-02-at-t-stype-gas-assembly/</guid>
      <description>
        
          
            简单回顾了下IA-32汇编语言，大学教科书学的8086是基于Intel语法的，使用的是nasm，这次整理了一下AT&amp;amp;T格式的，使用的
          
          
        
      </description>
    </item>
    
    <item>
      <title>ld常用特别选项</title>
      <link>https://buf1024.github.io/post/2016-01-19-ld-special/</link>
      <pubDate>Tue, 19 Jan 2016 11:12:36 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2016-01-19-ld-special/</guid>
      <description>
        
          
            链接器ld的一些特别选项，编译OS时有用到。 -N --omagic Set the text and data sections to be readable and writable. Also, do not page-align the data segment, and disable linking against shared libraries. If the output fORMat supports Unix style magic numbers, mark the output as &amp;quot;OMAGIC&amp;quot;. Note: Although a writable text section is allowed
          
          
        
      </description>
    </item>
    
    <item>
      <title>minix 3</title>
      <link>https://buf1024.github.io/post/2016-01-18-minix-3/</link>
      <pubDate>Mon, 18 Jan 2016 11:12:36 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2016-01-18-minix-3/</guid>
      <description>
        
          
            Linux非常庞大，虽然有很多参考的资料，但是啃这样庞大的东西还是很费力，如果是业余啃，那难度或许更大。然而，我们可以绕道看下另外一个小巧，
          
          
        
      </description>
    </item>
    
    <item>
      <title>ycm 选项</title>
      <link>https://buf1024.github.io/post/2015-10-17-ycm-opt/</link>
      <pubDate>Sat, 17 Oct 2015 22:11:41 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2015-10-17-ycm-opt/</guid>
      <description>
        
          
            YouCompleteMe, vim/neovim 语义补全利器，按照参见YouCompleteMe github网页。下面看看简单选项和命令，不保证解释准确，只做粗略参考。 命令 &amp;quot;
          
          
        
      </description>
    </item>
    
    <item>
      <title>tcpdump usage</title>
      <link>https://buf1024.github.io/post/2015-07-25-tcpdump-usage/</link>
      <pubDate>Sat, 25 Jul 2015 14:26:04 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2015-07-25-tcpdump-usage/</guid>
      <description>
        
          
            Tcpdump使用方法 （1）第一种是关于类型的关键字主要包括host，net，port 例如： host 210.27.48.2，指明 210.27.48
          
          
        
      </description>
    </item>
    
    <item>
      <title>VIM XX THINGS</title>
      <link>https://buf1024.github.io/post/2015-07-22-vim-xx-things/</link>
      <pubDate>Wed, 22 Jul 2015 15:25:00 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2015-07-22-vim-xx-things/</guid>
      <description>
        
          
            关于中文乱码 跟字符编码方式有关的选项: encoding, fileencoding, fileencodings, termencoding。更详细的信息可看vim 帮助文档: :help encoding-names。简略含
          
          
        
      </description>
    </item>
    
    <item>
      <title>gdb一丢丢常见问题</title>
      <link>https://buf1024.github.io/post/2015-04-01-gdb-common-issue/</link>
      <pubDate>Wed, 01 Apr 2015 17:12:10 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2015-04-01-gdb-common-issue/</guid>
      <description>
        
          
            一、gdb 无法自动加载当前文件 .gdbinit文件 提示： warning: File &amp;ldquo;/home/heidong/privt/proj/osv6/.gdbinit&amp;rdquo; auto-loading has been declined by your `auto-load safe-path&amp;rsquo; set to &amp;ldquo;$debugdir:$datadir/auto-load&amp;rdquo;. To enable execution of this file add add-auto-load-safe-path /home/heidong/privt/proj/osv6/.gdbinit line to your configuration file &amp;ldquo;/home/heidong/.gdbinit&amp;rdquo;. To completely disable this security protection add set auto-load safe-path / line to
          
          
        
      </description>
    </item>
    
    <item>
      <title>ssh 隧道访问局域网机器</title>
      <link>https://buf1024.github.io/post/2015-03-01-ssh-tunnel/</link>
      <pubDate>Sun, 01 Mar 2015 18:12:15 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2015-03-01-ssh-tunnel/</guid>
      <description>
        
          
            1 SSH 免登陆密码 1.1 生产 RSA密钥对 `$ssh-keygen -t rsa` ~/.ssh目录将生成id_rsa（私钥）和id_rsa.pub（公钥） 1.2 将公钥复制到需要自动登陆的机
          
          
        
      </description>
    </item>
    
    <item>
      <title>sqlalchemy orm 概览</title>
      <link>https://buf1024.github.io/post/2014-12-28-sqlalchemy-orm-overview/</link>
      <pubDate>Sun, 28 Dec 2014 21:08:34 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2014-12-28-sqlalchemy-orm-overview/</guid>
      <description>
        
          
            SQLAlchemy 概述 在Python的orm世界里，SQLAlchemy,无疑是数据库工具链里面的一个重量级的工具。SQLAlchemy简略构架图如下: 如图
          
          
        
      </description>
    </item>
    
    <item>
      <title>tcp_nodelay选项</title>
      <link>https://buf1024.github.io/post/2014-10-22-tcp_nodelay/</link>
      <pubDate>Wed, 22 Oct 2014 17:01:08 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2014-10-22-tcp_nodelay/</guid>
      <description>
        
          
            今天遇到了TCP_NODELAY的问题，简单记录一下。具体的表现是，客户端进行清算查询时，老是超时。这个问题出现很久了，运维一直都有反映查询
          
          
        
      </description>
    </item>
    
    <item>
      <title>jquery selector小结</title>
      <link>https://buf1024.github.io/post/2014-10-07-jquery-summary/</link>
      <pubDate>Tue, 07 Oct 2014 21:36:56 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2014-10-07-jquery-summary/</guid>
      <description>
        
          
            jQuery 概述 现代网站基本上都离不开jQuery。它是轻量级的js库，兼容css3，还有各种浏览器。文档齐全而详细，还有众多而成熟的插件可用。jQu
          
          
        
      </description>
    </item>
    
    <item>
      <title>bt种子文件文件结构</title>
      <link>https://buf1024.github.io/post/2014-09-17-bt-file-structure/</link>
      <pubDate>Wed, 17 Sep 2014 19:12:17 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2014-09-17-bt-file-structure/</guid>
      <description>
        
          
            估计80%以上接触互联网的人都知道bt是什么东西，任何一个用bt下载的人都知道这样一个概念，种子。bt种子就是记录了p2p对等网络中trac
          
          
        
      </description>
    </item>
    
    <item>
      <title>验证码识别</title>
      <link>https://buf1024.github.io/post/2014-08-29-verification-code-identified/</link>
      <pubDate>Fri, 29 Aug 2014 22:31:35 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2014-08-29-verification-code-identified/</guid>
      <description>
        
          
            本文所使用的验证码识别的方法非常暴力，高手可忽略。对于在客户端实现的“伪验证码”或使用静态图片的验证码，本文不作讨论。对于验证码的识别，一直
          
          
        
      </description>
    </item>
    
    <item>
      <title>coroutine协程</title>
      <link>https://buf1024.github.io/post/2014-08-21-coroutine/</link>
      <pubDate>Thu, 21 Aug 2014 16:46:46 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2014-08-21-coroutine/</guid>
      <description>
        
          
            如果你接触过lua这种小巧的脚本语言，你就会经常接触到一个叫做协程的神奇概念。大多数脚本语言都有对协程不同程度的支持。但是大多编译语言，如C
          
          
        
      </description>
    </item>
    
    <item>
      <title>Linux /proc 伪文件系统</title>
      <link>https://buf1024.github.io/post/2014-07-28-process-information-pseduo-file-system/</link>
      <pubDate>Mon, 28 Jul 2014 14:57:18 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2014-07-28-process-information-pseduo-file-system/</guid>
      <description>
        
          
            Linux /proc伪文件系统是内核数据结构的接口，是异常强大的，大部分的文件都是只读的。本文主要是根据man proc来补充说明(未完待续)。 /proc/[pid] 每一
          
          
        
      </description>
    </item>
    
    <item>
      <title>wireshark tcp 协议分析</title>
      <link>https://buf1024.github.io/post/2014-07-23-wireshark-tcp/</link>
      <pubDate>Wed, 23 Jul 2014 15:28:16 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2014-07-23-wireshark-tcp/</guid>
      <description>
        
          
            注：本文比较简略，且存在错漏。更详细的总结参考tcp协议小结，后续如若发现有错漏，则同时在tcp协议小结中进行修正，本文不再做维护。 &amp;ndash;2016-09-23 虽然知
          
          
        
      </description>
    </item>
    
    <item>
      <title>杂乱记忆</title>
      <link>https://buf1024.github.io/post/2014-07-15-misc-memory/</link>
      <pubDate>Tue, 15 Jul 2014 11:10:13 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2014-07-15-misc-memory/</guid>
      <description>
        
          
            这里记录的是一些常见的错误或技巧或一些注意事项等，不定时更新: hexo 安装（含插件） hexo 是相对比较好的一个静态BLOG生成器，虽然我在树莓派上面编译
          
          
        
      </description>
    </item>
    
    <item>
      <title>隐藏make编译的编译输出</title>
      <link>https://buf1024.github.io/post/2014-07-04-hide-compile-output/</link>
      <pubDate>Fri, 04 Jul 2014 16:45:00 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2014-07-04-hide-compile-output/</guid>
      <description>
        
          
            编译程序make时，会看到很多编译输出。对于开发来说，这是非常直观的，但是如果分发到客户（需要编译）或者只需要关注错误时，这种输出就感觉烦人
          
          
        
      </description>
    </item>
    
    <item>
      <title>设置进程的名称</title>
      <link>https://buf1024.github.io/post/2014-07-04-set-proccess-title/</link>
      <pubDate>Fri, 04 Jul 2014 10:27:47 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2014-07-04-set-proccess-title/</guid>
      <description>
        
          
            如何开搞 我们平时ps进程时，显示的进程标题是我们输入的程序名以及一些参数。这种显示方式并非非常直观，我们需要一种方式可以设置程序的标题，一眼
          
          
        
      </description>
    </item>
    
    <item>
      <title>端的起源</title>
      <link>https://buf1024.github.io/post/2014-06-30-endian/</link>
      <pubDate>Mon, 30 Jun 2014 17:08:14 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2014-06-30-endian/</guid>
      <description>
        
          
            一下摘自《深入理解计算机系统》第二版： “端”(endian)的起源： 以下是Jonathan Swift 在1726 年关于大小端之争历史的描述： ……我下面
          
          
        
      </description>
    </item>
    
    <item>
      <title>浮动数与0比较</title>
      <link>https://buf1024.github.io/post/2014-06-28-infinite/</link>
      <pubDate>Sat, 28 Jun 2014 21:40:50 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2014-06-28-infinite/</guid>
      <description>
        
          
            ###无限大小 C语言如何表示无限大小，NAN？redis里面这么搞的： static double R_Zero, R_PosInf, R_NegInf, R_Nan; /* Double constants initialization */ R_Zero = 0.0; R_PosInf = 1.0/R_Zero; R_NegInf = -1.0/R_Zero; R_Nan = R_Zero/R_Zero; 简单测试： #include &amp;lt;stdio.h&amp;gt; int main() { static double
          
          
        
      </description>
    </item>
    
    <item>
      <title>服务器模式</title>
      <link>https://buf1024.github.io/post/2014-06-25-server-mode/</link>
      <pubDate>Wed, 25 Jun 2014 20:49:24 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2014-06-25-server-mode/</guid>
      <description>
        
          
            服务器开发貌似有固定的模式，性能和复杂度各异，现总结下常见的模式。当然服务器的开发并没有固定的模式，除了以下总结的外，实际根据业务的不同，生
          
          
        
      </description>
    </item>
    
    <item>
      <title>c构造函数</title>
      <link>https://buf1024.github.io/post/2014-06-25-c-constructor/</link>
      <pubDate>Wed, 25 Jun 2014 13:00:43 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2014-06-25-c-constructor/</guid>
      <description>
        
          
            构造函数 任何一们面向对象语言里都会涉及构造函数这一概念，只是实现的方式各有差异。需要这main函数之前执行一段代码是非常容易的事情，只需要声
          
          
        
      </description>
    </item>
    
    <item>
      <title>mschedule 简单Linux进程管理（树莓派）</title>
      <link>https://buf1024.github.io/post/2014-05-30-myschd/</link>
      <pubDate>Fri, 30 May 2014 23:28:16 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2014-05-30-myschd/</guid>
      <description>
        
          
            树莓派是神奇的机器，CPU和内存都少的可怜，但体积小功耗低，在上面搞些动搞些西其实也挺有意思，挺好玩的。装的是pidara，基本服务没有精简
          
          
        
      </description>
    </item>
    
    <item>
      <title>django &#43; nginx &#43; raspberypi &#43; pidaro</title>
      <link>https://buf1024.github.io/post/2014-05-12-django-nginx-raspberypi-pidora/</link>
      <pubDate>Mon, 12 May 2014 22:12:47 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2014-05-12-django-nginx-raspberypi-pidora/</guid>
      <description>
        
          
            对于一个从事后台开发的人来说，搞了个网站，我自己都觉得有点意外。不是很懂html，不是很懂css，不是很懂js，不是很懂web开发模式/框架
          
          
        
      </description>
    </item>
    
    <item>
      <title>memcpy造成其他变量值改变</title>
      <link>https://buf1024.github.io/post/2014-04-09-memcpy-error/</link>
      <pubDate>Wed, 09 Apr 2014 19:12:17 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2014-04-09-memcpy-error/</guid>
      <description>
        
          
            以前C/C++遇到过很多很多的问题，有时候费了很久很久时间，很大很大的努力才解决。但是都没有记录下来，现在想想以前的遇到的问题，只知道这样的
          
          
        
      </description>
    </item>
    
    <item>
      <title>C 简单单元测试框架</title>
      <link>https://buf1024.github.io/post/2014-01-11-ctest/</link>
      <pubDate>Sat, 11 Jan 2014 23:48:14 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2014-01-11-ctest/</guid>
      <description>
        
          
            大约2年前，仿照GTEST写了个简单的C++单元测试框架。 https://luoguochun.cn/2012/02/09/simple-c++-test-framework/ 后来用C写后台程序比较多了，C++那个框架却不怎么好用了，于是又写了个C的。 功能
          
          
        
      </description>
    </item>
    
    <item>
      <title>gcov 简述</title>
      <link>https://buf1024.github.io/post/2013-05-31-linux-gcov/</link>
      <pubDate>Fri, 31 May 2013 17:08:14 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2013-05-31-linux-gcov/</guid>
      <description>
        
          
            代码覆盖率是单元测试的一个指标，通常覆盖率越高，单元测试就做得更完备。（然而，覆盖率是不是和软件质量成正比关系呢？）gcov是GNU工具链中
          
          
        
      </description>
    </item>
    
    <item>
      <title>Linux pkg-config</title>
      <link>https://buf1024.github.io/post/2013-05-29-linux-pkg-config/</link>
      <pubDate>Wed, 29 May 2013 22:37:14 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2013-05-29-linux-pkg-config/</guid>
      <description>
        
          
            pkg-config主要的作用是提供编译和连接到软件库的信息的。 如，典型的用法： [heidong@HEIDONGVM bin]$ pkg-config --cflags --libs libevent -I/usr/local/include -L/usr/local/lib -levent 将显示包含头文件和连接的信息。 那么pkg-
          
          
        
      </description>
    </item>
    
    <item>
      <title>Linux -- rpm</title>
      <link>https://buf1024.github.io/post/2012-09-18-linux-rpm/</link>
      <pubDate>Tue, 18 Sep 2012 23:48:14 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2012-09-18-linux-rpm/</guid>
      <description>
        
          
            rpm是redhat（系列）系统软件安装，管理的工具。相对于针对仓库而言的yum，rpm是针对单个软件包的。通常情况下Linux发布软件是通
          
          
        
      </description>
    </item>
    
    <item>
      <title>Linux -- yum</title>
      <link>https://buf1024.github.io/post/2012-09-13-linux-yum/</link>
      <pubDate>Thu, 13 Sep 2012 20:10:10 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2012-09-13-linux-yum/</guid>
      <description>
        
          
            Red Hat/CentOS/SuSE等都是采用RPM或者基于RPM的软件包来安装的。而yum则可以认为是rpm的软件仓库。大致的命令如下（前面加
          
          
        
      </description>
    </item>
    
    <item>
      <title>Windows Shell Extension</title>
      <link>https://buf1024.github.io/post/2012-06-24-windows-shell-extension/</link>
      <pubDate>Sun, 24 Jun 2012 00:00:43 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2012-06-24-windows-shell-extension/</guid>
      <description>
        
          
            分享1，2年前自己还在搞WINDOWS开发时写的一个小工具（当时在公司无聊的时候写了很多小工具啊，只不过拿不出源代码，杯具），个人觉得挺实用
          
          
        
      </description>
    </item>
    
    <item>
      <title>基于libevent进程池服务器</title>
      <link>https://buf1024.github.io/post/2012-06-23-proccess-pool-server/</link>
      <pubDate>Sat, 23 Jun 2012 11:08:14 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2012-06-23-proccess-pool-server/</guid>
      <description>
        
          
            本程序仅是为了学习libevent而写的，但可以当作是简单的程序框架扩展为实际的应用。程序本身没有经过广泛的功能测试和压力测试，仅作简单的功
          
          
        
      </description>
    </item>
    
    <item>
      <title>sys/queue.h</title>
      <link>https://buf1024.github.io/post/2012-05-02-sys-queue-h/</link>
      <pubDate>Wed, 02 May 2012 21:08:14 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2012-05-02-sys-queue-h/</guid>
      <description>
        
          
            概述 sys/queue.h是Linux/UNIX系统下面的一个标准头文件，用一系列的数据结构定义了一队列。包括singly-lined list, list, simple
          
          
        
      </description>
    </item>
    
    <item>
      <title>libevent 概述</title>
      <link>https://buf1024.github.io/post/2012-03-21-libevent-intro/</link>
      <pubDate>Wed, 21 Mar 2012 21:05:10 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2012-03-21-libevent-intro/</guid>
      <description>
        
          
            声明，本文章东搬西扯抄来过的，并非原创，写给自己参考的。 关于libevent的描述，有两个百科的连接可以参考： libevent百度百科 lib
          
          
        
      </description>
    </item>
    
    <item>
      <title>迷你日志类Minilog</title>
      <link>https://buf1024.github.io/post/2012-02-18-minlog/</link>
      <pubDate>Sat, 18 Feb 2012 10:15:09 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2012-02-18-minlog/</guid>
      <description>
        
          
            简介 日志，在一般系统里是非常非常重要的，它不仅跟踪到程序的执行，同时也是对系统进行各方面分析的基础。其重要性在这里不再一一说明，有兴趣可自行
          
          
        
      </description>
    </item>
    
    <item>
      <title>MyJson, JSON C&#43;&#43; 的另一种实现</title>
      <link>https://buf1024.github.io/post/2012-02-10-myjson-intro/</link>
      <pubDate>Fri, 10 Feb 2012 21:05:10 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2012-02-10-myjson-intro/</guid>
      <description>
        
          
            JSON，JavaScript Object Notation, 是一种轻量级的数据交换格式。本质上来说，它和XML, YAML等格式化的数据格式没有什么区别。都是为了方便（
          
          
        
      </description>
    </item>
    
    <item>
      <title>Very Very Simple C&#43;&#43; Testing Framework</title>
      <link>https://buf1024.github.io/post/2012-02-09-simple-c&#43;&#43;-test-framework/</link>
      <pubDate>Thu, 09 Feb 2012 20:50:00 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2012-02-09-simple-c&#43;&#43;-test-framework/</guid>
      <description>
        
          
            简介 测试驱动开发(TDD)是敏捷开发的一种方法，TDD的一个重要的工具就是单元测试(Unit Test)。如果想详细了解什么是TDD和单元测试
          
          
        
      </description>
    </item>
    
    <item>
      <title>gtest 小结</title>
      <link>https://buf1024.github.io/post/2011-12-05-gtest-summary/</link>
      <pubDate>Mon, 05 Dec 2011 12:00:00 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2011-12-05-gtest-summary/</guid>
      <description>
        
          
            GTEST 是简单而且又非常实用的测试框架。下面关于GTEST的一些简单总结。 编译 在GNU系统下： g++ -I${GTEST_DIR}/include -I${GTEST_DIR} -c ${GTEST_DIR}/src/gtest-all.cc ar -rv libgtest.a gtest-all.o 在WINDOWS下： GTEST在M
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
