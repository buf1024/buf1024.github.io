<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C on BUF1024</title>
    <link>https://buf1024.github.io/categories/c/</link>
    <description>Recent content in C on BUF1024</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 03 Jun 2017 11:19:25 +0800</lastBuildDate><atom:link href="https://buf1024.github.io/categories/c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>线程同步与原子变量</title>
      <link>https://buf1024.github.io/post/2017-06-03-synchronize-atomic-variable/</link>
      <pubDate>Sat, 03 Jun 2017 11:19:25 +0800</pubDate>
      
      <guid>https://buf1024.github.io/post/2017-06-03-synchronize-atomic-variable/</guid>
      <description>
        
          
            无论是基于多线程还是多进程并发的程序，同步控制总是不可避免的。按照自己的思维和使用习惯，自然会想到的是互斥量(mutext)和自旋锁(spi
          
          
        
      </description>
    </item>
    
    <item>
      <title>lwan http 服务器</title>
      <link>https://buf1024.github.io/post/2017-04-28-lwan-http-server/</link>
      <pubDate>Fri, 28 Apr 2017 22:10:32 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2017-04-28-lwan-http-server/</guid>
      <description>
        
          
            简介 服务器端程序的设计模式一般比较固定，目前主要有两种主要的解决方式，一种多进程方式(进程池)，另外一种多线程的方式(线程池)(P.S:请忘
          
          
        
      </description>
    </item>
    
    <item>
      <title>coroutine协程</title>
      <link>https://buf1024.github.io/post/2014-08-21-coroutine/</link>
      <pubDate>Thu, 21 Aug 2014 16:46:46 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2014-08-21-coroutine/</guid>
      <description>
        
          
            如果你接触过lua这种小巧的脚本语言，你就会经常接触到一个叫做协程的神奇概念。大多数脚本语言都有对协程不同程度的支持。但是大多编译语言，如C
          
          
        
      </description>
    </item>
    
    <item>
      <title>设置进程的名称</title>
      <link>https://buf1024.github.io/post/2014-07-04-set-proccess-title/</link>
      <pubDate>Fri, 04 Jul 2014 10:27:47 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2014-07-04-set-proccess-title/</guid>
      <description>
        
          
            如何开搞 我们平时ps进程时，显示的进程标题是我们输入的程序名以及一些参数。这种显示方式并非非常直观，我们需要一种方式可以设置程序的标题，一眼
          
          
        
      </description>
    </item>
    
    <item>
      <title>浮动数与0比较</title>
      <link>https://buf1024.github.io/post/2014-06-28-infinite/</link>
      <pubDate>Sat, 28 Jun 2014 21:40:50 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2014-06-28-infinite/</guid>
      <description>
        
          
            ###无限大小 C语言如何表示无限大小，NAN？redis里面这么搞的： static double R_Zero, R_PosInf, R_NegInf, R_Nan; /* Double constants initialization */ R_Zero = 0.0; R_PosInf = 1.0/R_Zero; R_NegInf = -1.0/R_Zero; R_Nan = R_Zero/R_Zero; 简单测试： #include &amp;lt;stdio.h&amp;gt; int main() { static double
          
          
        
      </description>
    </item>
    
    <item>
      <title>c构造函数</title>
      <link>https://buf1024.github.io/post/2014-06-25-c-constructor/</link>
      <pubDate>Wed, 25 Jun 2014 13:00:43 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2014-06-25-c-constructor/</guid>
      <description>
        
          
            构造函数 任何一们面向对象语言里都会涉及构造函数这一概念，只是实现的方式各有差异。需要这main函数之前执行一段代码是非常容易的事情，只需要声
          
          
        
      </description>
    </item>
    
    <item>
      <title>mschedule 简单Linux进程管理（树莓派）</title>
      <link>https://buf1024.github.io/post/2014-05-30-myschd/</link>
      <pubDate>Fri, 30 May 2014 23:28:16 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2014-05-30-myschd/</guid>
      <description>
        
          
            树莓派是神奇的机器，CPU和内存都少的可怜，但体积小功耗低，在上面搞些动搞些西其实也挺有意思，挺好玩的。装的是pidara，基本服务没有精简
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
