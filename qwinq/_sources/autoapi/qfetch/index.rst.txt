qfetch
======

.. py:module:: qfetch


Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/qfetch/fetch/index
   /autoapi/qfetch/qfetch/index


Classes
-------

.. autoapisummary::

   qfetch.BarFreq
   qfetch.Market
   qfetch.MarketType


Functions
---------

.. autoapisummary::

   qfetch.to_std_code
   qfetch.calc_chip_dist
   qfetch.calc_winner
   qfetch.calc_cost
   qfetch.fetch_trade_date
   qfetch.block_fetch_trade_date
   qfetch.fetch_next_trade_date
   qfetch.block_fetch_next_trade_date
   qfetch.fetch_prev_trade_date
   qfetch.block_fetch_prev_trade_date
   qfetch.fetch_is_trade_date
   qfetch.block_fetch_is_trade_date
   qfetch.fetch_rt_quot
   qfetch.block_fetch_rt_quot
   qfetch.fetch_stock_rt_quot
   qfetch.block_fetch_stock_rt_quot
   qfetch.fetch_bond_info
   qfetch.fetch_bond_bar
   qfetch.block_fetch_bond_bar
   qfetch.fetch_fund_info
   qfetch.block_fetch_fund_info
   qfetch.fetch_fund_net
   qfetch.block_fetch_fund_net
   qfetch.fetch_fund_bar
   qfetch.block_fetch_fund_bar
   qfetch.fetch_index_info
   qfetch.block_fetch_index_info
   qfetch.fetch_index_bar
   qfetch.block_fetch_index_bar
   qfetch.fetch_stock_info
   qfetch.block_fetch_stock_info
   qfetch.fetch_stock_is_margin
   qfetch.block_fetch_stock_is_margin
   qfetch.fetch_stock_bar
   qfetch.block_fetch_stock_bar
   qfetch.fetch_stock_index
   qfetch.block_fetch_stock_index
   qfetch.fetch_stock_industry
   qfetch.block_fetch_stock_industry
   qfetch.fetch_stock_industry_detail
   qfetch.block_fetch_stock_industry_detail
   qfetch.fetch_stock_industry_daily
   qfetch.block_fetch_stock_industry_daily
   qfetch.fetch_stock_concept
   qfetch.block_fetch_stock_concept
   qfetch.fetch_stock_concept_detail
   qfetch.block_fetch_stock_concept_detail
   qfetch.fetch_stock_concept_daily
   qfetch.block_fetch_stock_concept_daily
   qfetch.fetch_stock_yjbb
   qfetch.block_fetch_stock_yjbb
   qfetch.fetch_stock_margin
   qfetch.block_fetch_stock_margin
   qfetch.fetch_stock_hot_rank
   qfetch.block_fetch_stock_hot_rank
   qfetch.fetch_stock_comment
   qfetch.block_fetch_stock_comment
   qfetch.fetch_stock_comment_his
   qfetch.block_fetch_stock_comment_his


Package Contents
----------------

.. py:function:: to_std_code(typ: int, code: str) -> str

.. py:function:: calc_chip_dist(*, data: pandas.DataFrame, ac: int = 1, chip_dist: Dict = None) -> Dict

.. py:function:: calc_winner(*, chip_dist: Dict, data: pandas.DataFrame = None, price: float = None) -> Dict

.. py:function:: calc_cost(*, chip_dist: Dict, ratio: int) -> Dict

.. py:function:: fetch_trade_date(to_frame=True) -> Union[Set[int], pandas.DataFrame]
   :async:


.. py:function:: block_fetch_trade_date(to_frame=True) -> Union[Set[int], pandas.DataFrame]

.. py:function:: fetch_next_trade_date(d: Union[datetime.date, datetime.datetime, str]) -> datetime.date
   :async:


.. py:function:: block_fetch_next_trade_date(d: Union[datetime.date, datetime.datetime, str]) -> datetime.date

.. py:function:: fetch_prev_trade_date(d: Union[datetime.date, datetime.datetime, str]) -> datetime.date
   :async:


.. py:function:: block_fetch_prev_trade_date(d: Union[datetime.date, datetime.datetime, str]) -> datetime.date

.. py:function:: fetch_is_trade_date(d: Union[datetime.date, datetime.datetime, str]) -> bool
   :async:


.. py:function:: block_fetch_is_trade_date(d: Union[datetime.date, datetime.datetime, str]) -> bool

.. py:function:: fetch_rt_quot(*, code: Union[str, List[str]], to_frame=True) -> Union[Dict[str, Dict], pandas.DataFrame]
   :async:


.. py:function:: block_fetch_rt_quot(*, code: Union[str, List[str]], to_frame=True) -> Union[Dict[str, Dict], pandas.DataFrame]

.. py:function:: fetch_stock_rt_quot(*, codes: Optional[Union[str, List[str]]], to_frame=True) -> Union[List[Dict], pandas.DataFrame]
   :async:


.. py:function:: block_fetch_stock_rt_quot(*, codes: Optional[Union[str, List[str]]], to_frame=True) -> Union[List[Dict], pandas.DataFrame]

.. py:function:: fetch_bond_info(*, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
   :async:


.. py:function:: fetch_bond_bar(*, code: str, name: str, stock_code: str, stock_name: str, freq: Optional[int] = None, start: Optional[Union[datetime.date, str]] = None, end: Optional[Union[datetime.date, str]] = None, skip_rt: bool = True, to_frame=True) -> Dict
   :async:


.. py:function:: block_fetch_bond_bar(*, code: str, name: str, stock_code: str, stock_name: str, freq: Optional[int] = None, start: Optional[Union[datetime.date, str]] = None, end: Optional[Union[datetime.date, str]] = None, skip_rt: bool = True, to_frame=True) -> Dict

.. py:function:: fetch_fund_info(*, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
   :async:


.. py:function:: block_fetch_fund_info(*, to_frame=True) -> Union[List[Dict], pandas.DataFrame]

.. py:function:: fetch_fund_net(*, code: str, name: Optional[str] = None, start: Optional[Union[datetime.date, str]] = None, end: Optional[Union[datetime.date, str]] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
   :async:


.. py:function:: block_fetch_fund_net(*, code: str, name: Optional[str] = None, start: Optional[Union[datetime.date, str]] = None, end: Optional[Union[datetime.date, str]] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]

.. py:function:: fetch_fund_bar(*, code: str, name: Optional[str] = None, freq: Optional[int] = None, start: Optional[Union[datetime.date, str]] = None, end: Optional[Union[datetime.date, str]] = None, skip_rt: bool = True, to_frame=True) -> Dict
   :async:


.. py:function:: block_fetch_fund_bar(*, code: str, name: Optional[str] = None, freq: Optional[int] = None, start: Optional[Union[datetime.date, str]] = None, end: Optional[Union[datetime.date, str]] = None, skip_rt: bool = True, to_frame=True) -> Dict

.. py:function:: fetch_index_info(*, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
   :async:


.. py:function:: block_fetch_index_info(*, to_frame=True) -> Union[List[Dict], pandas.DataFrame]

.. py:function:: fetch_index_bar(*, code: str, name: Optional[str] = None, freq: Optional[int] = None, start: Optional[Union[datetime.date, str]] = None, end: Optional[Union[datetime.date, str]] = None, skip_rt: bool = True, to_frame=True) -> Dict
   :async:


.. py:function:: block_fetch_index_bar(*, code: str, name: Optional[str] = None, freq: Optional[int] = None, start: Optional[Union[datetime.date, str]] = None, end: Optional[Union[datetime.date, str]] = None, skip_rt: bool = True, to_frame=True) -> Dict

.. py:function:: fetch_stock_info(*, market: int = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
   :async:


.. py:function:: block_fetch_stock_info(*, market: int = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]

.. py:function:: fetch_stock_is_margin(*, to_frame=True) -> Union[Set[str], pandas.DataFrame]
   :async:


.. py:function:: block_fetch_stock_is_margin(*, to_frame=True) -> Union[Set[str], pandas.DataFrame]

.. py:function:: fetch_stock_bar(*, code: str, name: Optional[str] = None, freq: Optional[int] = None, start: Optional[Union[datetime.date, str]] = None, end: Optional[Union[datetime.date, str]] = None, skip_rt: bool = True, to_frame=True) -> Union[Dict, pandas.DataFrame]
   :async:


.. py:function:: block_fetch_stock_bar(*, code: str, name: Optional[str] = None, freq: Optional[int] = None, start: Optional[Union[datetime.date, str]] = None, end: Optional[Union[datetime.date, str]] = None, skip_rt: bool = True, to_frame=True) -> Union[Dict, pandas.DataFrame]

.. py:function:: fetch_stock_index(*, index_date: Optional[Union[datetime.date, str]] = None, to_frame=True) -> Union[Dict[str, Dict], pandas.DataFrame]
   :async:


.. py:function:: block_fetch_stock_index(*, index_date: Optional[datetime.date] = None, to_frame=True) -> Union[Dict[str, Dict], pandas.DataFrame]

.. py:function:: fetch_stock_industry(*, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
   :async:


.. py:function:: block_fetch_stock_industry(*, to_frame=True) -> Union[List[Dict], pandas.DataFrame]

.. py:function:: fetch_stock_industry_detail(*, code: Optional[str] = None, name: Optional[str] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
   :async:


.. py:function:: block_fetch_stock_industry_detail(*, code: Optional[str] = None, name: Optional[str] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]

.. py:function:: fetch_stock_industry_daily(*, code: str, name: Optional[str] = None, start: Optional[Union[datetime.date, str]] = None, end: Optional[Union[datetime.date, str]] = None, skip_rt: bool = True, to_frame=True) -> Union[Dict, pandas.DataFrame]
   :async:


.. py:function:: block_fetch_stock_industry_daily(*, code: str, name: Optional[str] = None, start: Optional[Union[datetime.date, str]] = None, end: Optional[Union[datetime.date, str]] = None, skip_rt: bool = True, to_frame=True) -> Union[Dict, pandas.DataFrame]

.. py:function:: fetch_stock_concept(*, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
   :async:


.. py:function:: block_fetch_stock_concept(*, to_frame=True) -> Union[List[Dict], pandas.DataFrame]

.. py:function:: fetch_stock_concept_detail(*, code: Optional[str] = None, name: Optional[str] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
   :async:


.. py:function:: block_fetch_stock_concept_detail(*, code: Optional[str] = None, name: Optional[str] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]

.. py:function:: fetch_stock_concept_daily(*, code: str, name: Optional[str] = None, start: Optional[Union[datetime.date, str]] = None, end: Optional[Union[datetime.date, str]] = None, skip_rt: bool = True, to_frame=True) -> Union[Dict, pandas.DataFrame]
   :async:


.. py:function:: block_fetch_stock_concept_daily(*, code: str, name: Optional[str] = None, start: Optional[Union[datetime.date, str]] = None, end: Optional[Union[datetime.date, str]] = None, skip_rt: bool = True, to_frame=True) -> Union[Dict, pandas.DataFrame]

.. py:function:: fetch_stock_yjbb(*, year: int, season: int, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
   :async:


.. py:function:: block_fetch_stock_yjbb(*, year: int, season: int, to_frame=True) -> Union[List[Dict], pandas.DataFrame]

.. py:function:: fetch_stock_margin(*, code: str, start: Optional[Union[datetime.date, str]] = None, end: Optional[Union[datetime.date, str]] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
   :async:


.. py:function:: block_fetch_stock_margin(*, code: str, start: Optional[Union[datetime.date, str]] = None, end: Optional[Union[datetime.date, str]] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]

.. py:function:: fetch_stock_hot_rank(*, code: Union[str, list], to_frame=True) -> Union[Dict, pandas.DataFrame]
   :async:


.. py:function:: block_fetch_stock_hot_rank(*, code: Union[str, list], to_frame=True) -> Union[Dict, pandas.DataFrame]

.. py:function:: fetch_stock_comment(*, code: Optional[Union[List[str], str]] = None, to_frame=True) -> Union[Dict, pandas.DataFrame]
   :async:


.. py:function:: block_fetch_stock_comment(*, code: Optional[Union[List[str], str]] = None, to_frame=True) -> Union[Dict, pandas.DataFrame]

.. py:function:: fetch_stock_comment_his(code: str, to_frame=True) -> Dict
   :async:


.. py:function:: block_fetch_stock_comment_his(code: str, to_frame=True) -> Dict

.. py:class:: BarFreq

   .. py:attribute:: Min1
      :value: 1



   .. py:attribute:: Min5
      :value: 5



   .. py:attribute:: Min15
      :value: 15



   .. py:attribute:: Min30
      :value: 30



   .. py:attribute:: Min60
      :value: 60



   .. py:attribute:: Daily
      :value: 101



   .. py:attribute:: Weekly
      :value: 102



   .. py:attribute:: Monthly
      :value: 103



   .. py:attribute:: LooseDaily
      :value: 1010



.. py:class:: Market

   .. py:attribute:: SZ
      :value: 0



   .. py:attribute:: SH
      :value: 1



   .. py:attribute:: BJ
      :value: 2



.. py:class:: MarketType

   .. py:attribute:: Bond
      :value: 0



   .. py:attribute:: Fund
      :value: 1



   .. py:attribute:: Stock
      :value: 2



