qstrategy
=========

.. py:module:: qstrategy


Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/qstrategy/base_strategy/index
   /autoapi/qstrategy/broker/index
   /autoapi/qstrategy/dictclass/index
   /autoapi/qstrategy/do_select/index
   /autoapi/qstrategy/event/index
   /autoapi/qstrategy/monitor/index
   /autoapi/qstrategy/qstrategy/index
   /autoapi/qstrategy/risk/index
   /autoapi/qstrategy/select/index
   /autoapi/qstrategy/trade/index
   /autoapi/qstrategy/tradecomm/index


Classes
-------

.. autoapisummary::

   qstrategy.Broker
   qstrategy.Monitor
   qstrategy.Risk
   qstrategy.Select
   qstrategy.Strategy
   qstrategy.ShareState


Functions
---------

.. autoapisummary::

   qstrategy.do_select


Package Contents
----------------

.. py:class:: Broker

   Bases: :py:obj:`qstrategy.base_strategy.BaseStrategy`

   .. autoapi-inheritance-diagram:: qstrategy.Broker
      :parts: 1


   交易券商基类，实现交易券商，要继承于该类


   .. py:method:: on_broker(state: qstrategy.qstrategy.ShareState, quots: qstrategy.event.RtQuot)

      有行情时回调，一般券商不关心行情，所以不用管，为了接口完整性而已

      :param state: 共享状态
      :type state: ShareState
      :param quots: 行情
      :type quots: RtQuot



   .. py:method:: on_entrust(state: qstrategy.qstrategy.ShareState, entrust: qstrategy.tradecomm.Entrust)

      委托请求，一般券商接口收到后，发送委托单给真实的券商

      :param state: 共享状态
      :type state: ShareState
      :param entrust: 委托单
      :type entrust: Entrust



   .. py:method:: on_poll(state: qstrategy.qstrategy.ShareState)

      沦陷交易单据状态，真实的券商结果缓存后，由这个接口返回的交易系统

      :param state: 共享状态
      :type state: ShareState



.. py:class:: Monitor

   Bases: :py:obj:`qstrategy.base_strategy.BaseStrategy`

   .. autoapi-inheritance-diagram:: qstrategy.Monitor
      :parts: 1


   监控策略基类，实现监控策略，要继承于该类


   .. py:method:: on_monitor(state: qstrategy.qstrategy.ShareState, quots: qstrategy.event.RtQuot)

      有行情时回调，实现监控逻辑

      :param state: 共享状态
      :type state: ShareState
      :param quots: 行情
      :type quots: RtQuot



.. py:class:: Risk

   Bases: :py:obj:`qstrategy.base_strategy.BaseStrategy`

   .. autoapi-inheritance-diagram:: qstrategy.Risk
      :parts: 1


   风控策略基类，实现风控策略，要继承于该类


   .. py:method:: on_risk(state: qstrategy.qstrategy.ShareState, quots: qstrategy.event.RtQuot)

      有行情时回调，实现风控逻辑

      :param state: 共享状态
      :type state: ShareState
      :param quots: 行情
      :type quots: RtQuot



.. py:class:: Select

   Bases: :py:obj:`qstrategy.base_strategy.BaseStrategy`

   .. autoapi-inheritance-diagram:: qstrategy.Select
      :parts: 1


   选股策略基类，实现选股策略，要继承于该类


   .. py:method:: select(state: qstrategy.qstrategy.ShareState, code: str, name: str)

      选股时回调，计算选择逻辑

      :param state: 共享状态
      :type state: ShareState
      :param code: 代码
      :type code: str
      :param name: 名称
      :type name: str



.. py:class:: Strategy

   Bases: :py:obj:`qstrategy.base_strategy.BaseStrategy`

   .. autoapi-inheritance-diagram:: qstrategy.Strategy
      :parts: 1


   交易策略基类，实现交易策略，要继承于该类


   .. py:method:: on_trade(state: qstrategy.qstrategy.ShareState, quots: qstrategy.event.RtQuot)

      有行情时回调，实现交易逻辑

      :param state: 共享状态
      :type state: ShareState
      :param quots: 行情
      :type quots: RtQuot



.. py:class:: ShareState(loader: qdatac.loader.BlockLoader, is_trading: bool, is_started: bool, account: Optional[qstrategy.tradecomm.Account] = None)

   .. py:property:: loader
      :type: qdatac.loader.BlockLoader

      Loader


   .. py:property:: account
      :type: Optional[qstrategy.tradecomm.Account]

      Account


   .. py:property:: events
      :type: List[ast.Dict]

      Events


   .. py:property:: is_trading
      :type: bool

      is_trading


   .. py:property:: is_started
      :type: bool

      is_started


   .. py:method:: can_buy(price: float, volume: int) -> bool

      测试是否可以买

      :param price: 价格
      :type price: float
      :param volume: 量
      :type volume: int

      :rtype: bool



   .. py:method:: can_sell(code: str) -> int

      测试是否可以卖

      :param code: 代码
      :type code: str

      :returns: 可卖量
      :rtype: int



   .. py:method:: can_cancel(code: str) -> Optional[List[qstrategy.tradecomm.Entrust]]

      是否可以取消委托

      :param code: 代码
      :type code: str

      :returns: 可取消的委托单
      :rtype: Optional[List[Entrust]]



   .. py:method:: get_position_volume(code: str) -> Tuple[int, int]

      返回头寸的量和可用量

      :param code: 代码
      :type code: str

      :returns: (量，可用量)
      :rtype: Tuple[int, int]



   .. py:method:: get_position(code: Optional[str] = None) -> Optional[List[qstrategy.tradecomm.Position]]

      返回头寸列表

      :param code: 代码，如果没有，则返回全部
      :type code: Optional[str], optional

      :returns: 头寸列表
      :rtype: Optional[List[Position]]



   .. py:method:: buy(signal: qstrategy.tradecomm.Signal)

      发出买信号

      :param signal: 信号
      :type signal: Signal



   .. py:method:: sell(signal: qstrategy.tradecomm.Signal)

      发出卖信号

      :param signal: 信号
      :type signal: Signal



   .. py:method:: cancel(signal: qstrategy.tradecomm.Signal)

      发出取消信号

      :param signal: 信号
      :type signal: Signal



   .. py:method:: subscribe(codes: List[str])

      订阅行情

      :param codes: 代码列表
      :type codes: List[str]



   .. py:method:: emit(event: qstrategy.event.Event)

      发出事件

      :param event: 事件
      :type event: Event



.. py:function:: do_select(strategy: qstrategy.select.Select, loader: qdatac.loader.BlockLoader, typ: str, params: Optional[qstrategy.tradecomm.Params] = None, with_progress: bool = False, to_frame: bool = True) -> Union[List[Dict], pandas.DataFrame]

   执行选股

   :param strategy: 策略实例
   :type strategy: Select
   :param loader: Loader
   :type loader: BlockLoader
   :param typ: 类型：stock, bond, fund
   :type typ: str
   :param params: 策略参数
   :type params: Optional[Params], optional
   :param with_progress: 是否显示进度条，默认是不显示的。
   :type with_progress: bool, optional
   :param to_frame: 是否转换为DataFrame格式，默认 True.
   :type to_frame: bool, optional

   :rtype: Union[List[Dict], pd.DataFrame]


