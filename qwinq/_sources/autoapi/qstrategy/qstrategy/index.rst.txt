qstrategy.qstrategy
===================

.. py:module:: qstrategy.qstrategy


Classes
-------

.. autoapisummary::

   qstrategy.qstrategy.ShareState


Functions
---------

.. autoapisummary::

   qstrategy.qstrategy.calc_chip_dist
   qstrategy.qstrategy.calc_winner
   qstrategy.qstrategy.calc_cost
   qstrategy.qstrategy.ma
   qstrategy.qstrategy.shadow
   qstrategy.qstrategy.uuid
   qstrategy.qstrategy.new_signal
   qstrategy.qstrategy.stat_select_hit


Module Contents
---------------

.. py:function:: calc_chip_dist(data: List[ast.Dict], ac: int = 1, chip_dist: ast.Dict = None) -> ast.Dict

   筹码分布计算，计算winner或cost时，先调用该函数

   :param data: k线数据
   :type data: List[Dict]
   :param ac: 衰减系数，如不清楚怎么设置，直接用默认值， 默认值为 1。
   :type ac: int, optional
   :param chip_dist: 筹码分布，如果之前计算过，则传过来，减少计算量
   :type chip_dist: Dict, optional

   :returns: 筹码分布情况
   :rtype: Dict


.. py:function:: calc_winner(chip_dist: ast.Dict, data: List[ast.Dict] = None, price: float = None) -> ast.Dict

   计算胜率分布

   :param chip_dist: 筹码分布情况，使用calc_chip_dist调用的结果
   :type chip_dist: Dict
   :param data: 原始k线数据。胜率的标准，使用的是close价格，data和price两者不能同时为空
   :type data: List[Dict], optional
   :param price: 胜率的标准，使用的是固定价格，data和price两者不能同时为空
   :type price: float, optional

   :returns: 胜率分布情况
   :rtype: Dict


.. py:function:: calc_cost(chip_dist: ast.Dict, ratio: int) -> ast.Dict

   计算成本分布

   :param chip_dist: 筹码分布情况，使用calc_chip_dist调用的结果
   :type chip_dist: Dict
   :param ratio: 百分之几的成本的价格
   :type ratio: int

   :returns: 成本分布情况
   :rtype: Dict


.. py:function:: ma(bar: List[float], ma_type: int) -> List[float]

   均线

   :param bar: K线
   :type bar: List[float]
   :param ma_type: ma类型
   :type ma_type: int

   :returns: 日线
   :rtype: List[float]


.. py:function:: shadow(last_close: float, open: float, close: float, low: float, high: float) -> Tuple[float]

   k线各部分占比

   :param last_close: 昨收价
   :type last_close: float
   :param open: 开盘价
   :type open: float
   :param close: 收盘价
   :type close: float
   :param low: 最低价
   :type low: float
   :param high: 最高价
   :type high: float

   :returns: (振幅， 上天线占比， 蜡烛图占比， 下天线占比)
   :rtype: Tuple[float]


.. py:function:: uuid() -> str

   生成uuid


.. py:function:: new_signal(type: str, source: ast.Dict, code: str, name: str, price: float, volume: int, desc: str) -> ast.Dict

   生成新signal

   :param type: 类型
   :type type: str
   :param source: 信号源
   :type source: Dict
   :param code: 代码
   :type code: str
   :param name: 名称
   :type name: str
   :param price: 价格
   :type price: float
   :param volume: 量
   :type volume: int
   :param desc: 说明
   :type desc: str

   :rtype: Dict


.. py:function:: stat_select_hit(data: List[ast.Dict], hit: int, hit_max: int) -> ast.Dict

   标记select 命中结果

   :param data: 命中数据
   :type data: List[Dict]
   :param hit: 命中下标
   :type hit: int
   :param hit_max: 最大下标
   :type hit_max: int

   :rtype: Dict


.. py:class:: ShareState(loader: qdatac.loader.BlockLoader, is_trading: bool, is_started: bool, account: Optional[qstrategy.tradecomm.Account] = None)

   .. py:property:: loader
      :type: qdatac.loader.BlockLoader

      Loader


   .. py:property:: account
      :type: Optional[qstrategy.tradecomm.Account]

      Account


   .. py:property:: events
      :type: List[ast.Dict]

      Events


   .. py:property:: is_trading
      :type: bool

      is_trading


   .. py:property:: is_started
      :type: bool

      is_started


   .. py:method:: can_buy(price: float, volume: int) -> bool

      测试是否可以买

      :param price: 价格
      :type price: float
      :param volume: 量
      :type volume: int

      :rtype: bool



   .. py:method:: can_sell(code: str) -> int

      测试是否可以卖

      :param code: 代码
      :type code: str

      :returns: 可卖量
      :rtype: int



   .. py:method:: can_cancel(code: str) -> Optional[List[qstrategy.tradecomm.Entrust]]

      是否可以取消委托

      :param code: 代码
      :type code: str

      :returns: 可取消的委托单
      :rtype: Optional[List[Entrust]]



   .. py:method:: get_position_volume(code: str) -> Tuple[int, int]

      返回头寸的量和可用量

      :param code: 代码
      :type code: str

      :returns: (量，可用量)
      :rtype: Tuple[int, int]



   .. py:method:: get_position(code: Optional[str] = None) -> Optional[List[qstrategy.tradecomm.Position]]

      返回头寸列表

      :param code: 代码，如果没有，则返回全部
      :type code: Optional[str], optional

      :returns: 头寸列表
      :rtype: Optional[List[Position]]



   .. py:method:: buy(signal: qstrategy.tradecomm.Signal)

      发出买信号

      :param signal: 信号
      :type signal: Signal



   .. py:method:: sell(signal: qstrategy.tradecomm.Signal)

      发出卖信号

      :param signal: 信号
      :type signal: Signal



   .. py:method:: cancel(signal: qstrategy.tradecomm.Signal)

      发出取消信号

      :param signal: 信号
      :type signal: Signal



   .. py:method:: subscribe(codes: List[str])

      订阅行情

      :param codes: 代码列表
      :type codes: List[str]



   .. py:method:: emit(event: qstrategy.event.Event)

      发出事件

      :param event: 事件
      :type event: Event



