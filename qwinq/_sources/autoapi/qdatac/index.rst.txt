qdatac
======

.. py:module:: qdatac


Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/qdatac/loader/index
   /autoapi/qdatac/mongo/index
   /autoapi/qdatac/qdatac/index
   /autoapi/qdatac/sync/index


Classes
-------

.. autoapisummary::

   qdatac.Loader
   qdatac.MongoLoader
   qdatac.BlockMongoLoader
   qdatac.MySync
   qdatac.MyBlockSync
   qdatac.Dest
   qdatac.Funcs


Functions
---------

.. autoapisummary::

   qdatac.get_loader
   qdatac.int_to_str_date


Package Contents
----------------

.. py:class:: Loader(url: str)

   Bases: :py:obj:`abc.ABC`

   .. autoapi-inheritance-diagram:: qdatac.Loader
      :parts: 1


   数据库查询接口



   .. py:method:: to_dataframe(to_frame, data)
      :staticmethod:



   .. py:method:: datetime_to_int(date: Union[str, datetime.datetime]) -> int
      :staticmethod:


      datetime转换为数据格式的时间



   .. py:method:: json_def_handler(obj)
      :staticmethod:



   .. py:method:: load_bond_info(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


      加载可转债信息

      :param filter: 过滤条件，同mongodb格式，默认 {}。
      :type filter: Optional[Dict], optional
      :param sort: 排序条件， 同mongodb格式，默认 {}。
      :type sort: Optional[Dict], optional
      :param limit: 限制条数， 默认 None，不限制
      :type limit: Optional[int], optional
      :param to_frame: 是否转换为DataFrame格式，默认 是
      :type to_frame: bool, optional

      :rtype: Union[List[Dict], pd.DataFrame]



   .. py:method:: load_bond_daily(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


      加载可转债k线信息

      :param filter: 过滤条件，同mongodb格式，默认 {}。
      :type filter: Optional[Dict], optional
      :param sort: 排序条件， 同mongodb格式，默认 {}。
      :type sort: Optional[Dict], optional
      :param limit: 限制条数， 默认 None，不限制
      :type limit: Optional[int], optional
      :param to_frame: 是否转换为DataFrame格式，默认 是
      :type to_frame: bool, optional

      :rtype: Union[List[Dict], pd.DataFrame]



   .. py:method:: load_fund_info(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


      加载etf基金信息

      :param filter: 过滤条件，同mongodb格式，默认 {}。
      :type filter: Optional[Dict], optional
      :param sort: 排序条件， 同mongodb格式，默认 {}。
      :type sort: Optional[Dict], optional
      :param limit: 限制条数， 默认 None，不限制
      :type limit: Optional[int], optional
      :param to_frame: 是否转换为DataFrame格式，默认 是
      :type to_frame: bool, optional

      :rtype: Union[List[Dict], pd.DataFrame]



   .. py:method:: load_fund_daily(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


      加载etf基金k线信息

      :param filter: 过滤条件，同mongodb格式，默认 {}。
      :type filter: Optional[Dict], optional
      :param sort: 排序条件， 同mongodb格式，默认 {}。
      :type sort: Optional[Dict], optional
      :param limit: 限制条数， 默认 None，不限制
      :type limit: Optional[int], optional
      :param to_frame: 是否转换为DataFrame格式，默认 是
      :type to_frame: bool, optional

      :rtype: Union[List[Dict], pd.DataFrame]



   .. py:method:: load_fund_net(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


      加载etf基金净值信息

      :param filter: 过滤条件，同mongodb格式，默认 {}。
      :type filter: Optional[Dict], optional
      :param sort: 排序条件， 同mongodb格式，默认 {}。
      :type sort: Optional[Dict], optional
      :param limit: 限制条数， 默认 None，不限制
      :type limit: Optional[int], optional
      :param to_frame: 是否转换为DataFrame格式，默认 是
      :type to_frame: bool, optional

      :rtype: Union[List[Dict], pd.DataFrame]



   .. py:method:: load_index_info(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


      加载指数信息

      :param filter: 过滤条件，同mongodb格式，默认 {}。
      :type filter: Optional[Dict], optional
      :param sort: 排序条件， 同mongodb格式，默认 {}。
      :type sort: Optional[Dict], optional
      :param limit: 限制条数， 默认 None，不限制
      :type limit: Optional[int], optional
      :param to_frame: 是否转换为DataFrame格式，默认 是
      :type to_frame: bool, optional

      :rtype: Union[List[Dict], pd.DataFrame]



   .. py:method:: load_index_daily(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


      加载指数指标信息

      :param filter: 过滤条件，同mongodb格式，默认 {}。
      :type filter: Optional[Dict], optional
      :param sort: 排序条件， 同mongodb格式，默认 {}。
      :type sort: Optional[Dict], optional
      :param limit: 限制条数， 默认 None，不限制
      :type limit: Optional[int], optional
      :param to_frame: 是否转换为DataFrame格式，默认 是
      :type to_frame: bool, optional

      :rtype: Union[List[Dict], pd.DataFrame]



   .. py:method:: load_stock_info(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


      加载股票信息

      :param filter: 过滤条件，同mongodb格式，默认 {}。
      :type filter: Optional[Dict], optional
      :param sort: 排序条件， 同mongodb格式，默认 {}。
      :type sort: Optional[Dict], optional
      :param limit: 限制条数， 默认 None，不限制
      :type limit: Optional[int], optional
      :param to_frame: 是否转换为DataFrame格式，默认 是
      :type to_frame: bool, optional

      :rtype: Union[List[Dict], pd.DataFrame]



   .. py:method:: load_stock_daily(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


      加载股票k线信息

      :param filter: 过滤条件，同mongodb格式，默认 {}。
      :type filter: Optional[Dict], optional
      :param sort: 排序条件， 同mongodb格式，默认 {}。
      :type sort: Optional[Dict], optional
      :param limit: 限制条数， 默认 None，不限制
      :type limit: Optional[int], optional
      :param to_frame: 是否转换为DataFrame格式，默认 是
      :type to_frame: bool, optional

      :rtype: Union[List[Dict], pd.DataFrame]



   .. py:method:: load_stock_index(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


      加载股票指标信息

      :param filter: 过滤条件，同mongodb格式，默认 {}。
      :type filter: Optional[Dict], optional
      :param sort: 排序条件， 同mongodb格式，默认 {}。
      :type sort: Optional[Dict], optional
      :param limit: 限制条数， 默认 None，不限制
      :type limit: Optional[int], optional
      :param to_frame: 是否转换为DataFrame格式，默认 是
      :type to_frame: bool, optional

      :rtype: Union[List[Dict], pd.DataFrame]



   .. py:method:: load_stock_industry(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


      加载行业信息

      :param filter: 过滤条件，同mongodb格式，默认 {}。
      :type filter: Optional[Dict], optional
      :param sort: 排序条件， 同mongodb格式，默认 {}。
      :type sort: Optional[Dict], optional
      :param limit: 限制条数， 默认 None，不限制
      :type limit: Optional[int], optional
      :param to_frame: 是否转换为DataFrame格式，默认 是
      :type to_frame: bool, optional

      :rtype: Union[List[Dict], pd.DataFrame]



   .. py:method:: load_stock_industry_daily(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


      加载行业k线信息

      :param filter: 过滤条件，同mongodb格式，默认 {}。
      :type filter: Optional[Dict], optional
      :param sort: 排序条件， 同mongodb格式，默认 {}。
      :type sort: Optional[Dict], optional
      :param limit: 限制条数， 默认 None，不限制
      :type limit: Optional[int], optional
      :param to_frame: 是否转换为DataFrame格式，默认 是
      :type to_frame: bool, optional

      :rtype: Union[List[Dict], pd.DataFrame]



   .. py:method:: load_stock_industry_detail(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


      加载行业明细信息

      :param filter: 过滤条件，同mongodb格式，默认 {}。
      :type filter: Optional[Dict], optional
      :param sort: 排序条件， 同mongodb格式，默认 {}。
      :type sort: Optional[Dict], optional
      :param limit: 限制条数， 默认 None，不限制
      :type limit: Optional[int], optional
      :param to_frame: 是否转换为DataFrame格式，默认 是
      :type to_frame: bool, optional

      :rtype: Union[List[Dict], pd.DataFrame]



   .. py:method:: load_stock_concept(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


      加载股票概念信息

      :param filter: 过滤条件，同mongodb格式，默认 {}。
      :type filter: Optional[Dict], optional
      :param sort: 排序条件， 同mongodb格式，默认 {}。
      :type sort: Optional[Dict], optional
      :param limit: 限制条数， 默认 None，不限制
      :type limit: Optional[int], optional
      :param to_frame: 是否转换为DataFrame格式，默认 是
      :type to_frame: bool, optional

      :rtype: Union[List[Dict], pd.DataFrame]



   .. py:method:: load_stock_concept_daily(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


      加载股票k线信息

      :param filter: 过滤条件，同mongodb格式，默认 {}。
      :type filter: Optional[Dict], optional
      :param sort: 排序条件， 同mongodb格式，默认 {}。
      :type sort: Optional[Dict], optional
      :param limit: 限制条数， 默认 None，不限制
      :type limit: Optional[int], optional
      :param to_frame: 是否转换为DataFrame格式，默认 是
      :type to_frame: bool, optional

      :rtype: Union[List[Dict], pd.DataFrame]



   .. py:method:: load_stock_concept_detail(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


      加载股票明细信息

      :param filter: 过滤条件，同mongodb格式，默认 {}。
      :type filter: Optional[Dict], optional
      :param sort: 排序条件， 同mongodb格式，默认 {}。
      :type sort: Optional[Dict], optional
      :param limit: 限制条数， 默认 None，不限制
      :type limit: Optional[int], optional
      :param to_frame: 是否转换为DataFrame格式，默认 是
      :type to_frame: bool, optional

      :rtype: Union[List[Dict], pd.DataFrame]



   .. py:method:: load_stock_yjbb(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


      加载股票业绩报表信息

      :param filter: 过滤条件，同mongodb格式，默认 {}。
      :type filter: Optional[Dict], optional
      :param sort: 排序条件， 同mongodb格式，默认 {}。
      :type sort: Optional[Dict], optional
      :param limit: 限制条数， 默认 None，不限制
      :type limit: Optional[int], optional
      :param to_frame: 是否转换为DataFrame格式，默认 是
      :type to_frame: bool, optional

      :rtype: Union[List[Dict], pd.DataFrame]



   .. py:method:: load_stock_margin(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


      加载股票融资融券信息

      :param filter: 过滤条件，同mongodb格式，默认 {}。
      :type filter: Optional[Dict], optional
      :param sort: 排序条件， 同mongodb格式，默认 {}。
      :type sort: Optional[Dict], optional
      :param limit: 限制条数， 默认 None，不限制
      :type limit: Optional[int], optional
      :param to_frame: 是否转换为DataFrame格式，默认 是
      :type to_frame: bool, optional

      :rtype: Union[List[Dict], pd.DataFrame]



   .. py:method:: count(*, tab: str) -> int
      :async:


      加载数据库条数

      :param tab: 库表名称。
      :type tab: str

      :returns: 条数
      :rtype: int



   .. py:method:: load_info(*, tab: str, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


      加载基本信息

      :param tab: 库表名称。
      :type tab: str
      :param filter: 过滤条件，同mongodb格式，默认 {}。
      :type filter: Optional[Dict], optional
      :param sort: 排序条件， 同mongodb格式，默认 {}。
      :type sort: Optional[Dict], optional
      :param limit: 限制条数， 默认 None，不限制
      :type limit: Optional[int], optional
      :param to_frame: 是否转换为DataFrame格式，默认 是
      :type to_frame: bool, optional

      :rtype: Union[List[Dict], pd.DataFrame]



   .. py:method:: load_daily(*, tab: str, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


      加载基本k线信息

      :param tab: 库表名称。
      :type tab: str
      :param filter: 过滤条件，同mongodb格式，默认 {}。
      :type filter: Optional[Dict], optional
      :param sort: 排序条件， 同mongodb格式，默认 {}。
      :type sort: Optional[Dict], optional
      :param limit: 限制条数， 默认 None，不限制
      :type limit: Optional[int], optional
      :param to_frame: 是否转换为DataFrame格式，默认 是
      :type to_frame: bool, optional

      :rtype: Union[List[Dict], pd.DataFrame]



.. py:class:: MongoLoader(url: str)

   Bases: :py:obj:`qdatac.loader.Loader`

   .. autoapi-inheritance-diagram:: qdatac.MongoLoader
      :parts: 1


   数据库查询接口，mongodb实现



   .. py:attribute:: loader


   .. py:method:: load_bond_info(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


      加载可转债信息

      :param filter: 过滤条件，同mongodb格式，默认 {}。
      :type filter: Optional[Dict], optional
      :param sort: 排序条件， 同mongodb格式，默认 {}。
      :type sort: Optional[Dict], optional
      :param limit: 限制条数， 默认 None，不限制
      :type limit: Optional[int], optional
      :param to_frame: 是否转换为DataFrame格式，默认 是
      :type to_frame: bool, optional

      :rtype: Union[List[Dict], pd.DataFrame]



   .. py:method:: load_bond_daily(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


      加载可转债k线信息

      :param filter: 过滤条件，同mongodb格式，默认 {}。
      :type filter: Optional[Dict], optional
      :param sort: 排序条件， 同mongodb格式，默认 {}。
      :type sort: Optional[Dict], optional
      :param limit: 限制条数， 默认 None，不限制
      :type limit: Optional[int], optional
      :param to_frame: 是否转换为DataFrame格式，默认 是
      :type to_frame: bool, optional

      :rtype: Union[List[Dict], pd.DataFrame]



   .. py:method:: load_fund_info(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


      加载etf基金信息

      :param filter: 过滤条件，同mongodb格式，默认 {}。
      :type filter: Optional[Dict], optional
      :param sort: 排序条件， 同mongodb格式，默认 {}。
      :type sort: Optional[Dict], optional
      :param limit: 限制条数， 默认 None，不限制
      :type limit: Optional[int], optional
      :param to_frame: 是否转换为DataFrame格式，默认 是
      :type to_frame: bool, optional

      :rtype: Union[List[Dict], pd.DataFrame]



   .. py:method:: load_fund_daily(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


      加载etf基金k线信息

      :param filter: 过滤条件，同mongodb格式，默认 {}。
      :type filter: Optional[Dict], optional
      :param sort: 排序条件， 同mongodb格式，默认 {}。
      :type sort: Optional[Dict], optional
      :param limit: 限制条数， 默认 None，不限制
      :type limit: Optional[int], optional
      :param to_frame: 是否转换为DataFrame格式，默认 是
      :type to_frame: bool, optional

      :rtype: Union[List[Dict], pd.DataFrame]



   .. py:method:: load_fund_net(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


      加载etf基金净值信息

      :param filter: 过滤条件，同mongodb格式，默认 {}。
      :type filter: Optional[Dict], optional
      :param sort: 排序条件， 同mongodb格式，默认 {}。
      :type sort: Optional[Dict], optional
      :param limit: 限制条数， 默认 None，不限制
      :type limit: Optional[int], optional
      :param to_frame: 是否转换为DataFrame格式，默认 是
      :type to_frame: bool, optional

      :rtype: Union[List[Dict], pd.DataFrame]



   .. py:method:: load_index_info(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


      加载指数信息

      :param filter: 过滤条件，同mongodb格式，默认 {}。
      :type filter: Optional[Dict], optional
      :param sort: 排序条件， 同mongodb格式，默认 {}。
      :type sort: Optional[Dict], optional
      :param limit: 限制条数， 默认 None，不限制
      :type limit: Optional[int], optional
      :param to_frame: 是否转换为DataFrame格式，默认 是
      :type to_frame: bool, optional

      :rtype: Union[List[Dict], pd.DataFrame]



   .. py:method:: load_index_daily(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


      加载指数指标信息

      :param filter: 过滤条件，同mongodb格式，默认 {}。
      :type filter: Optional[Dict], optional
      :param sort: 排序条件， 同mongodb格式，默认 {}。
      :type sort: Optional[Dict], optional
      :param limit: 限制条数， 默认 None，不限制
      :type limit: Optional[int], optional
      :param to_frame: 是否转换为DataFrame格式，默认 是
      :type to_frame: bool, optional

      :rtype: Union[List[Dict], pd.DataFrame]



   .. py:method:: load_stock_info(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


      加载股票信息

      :param filter: 过滤条件，同mongodb格式，默认 {}。
      :type filter: Optional[Dict], optional
      :param sort: 排序条件， 同mongodb格式，默认 {}。
      :type sort: Optional[Dict], optional
      :param limit: 限制条数， 默认 None，不限制
      :type limit: Optional[int], optional
      :param to_frame: 是否转换为DataFrame格式，默认 是
      :type to_frame: bool, optional

      :rtype: Union[List[Dict], pd.DataFrame]



   .. py:method:: load_stock_daily(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


      加载股票k线信息

      :param filter: 过滤条件，同mongodb格式，默认 {}。
      :type filter: Optional[Dict], optional
      :param sort: 排序条件， 同mongodb格式，默认 {}。
      :type sort: Optional[Dict], optional
      :param limit: 限制条数， 默认 None，不限制
      :type limit: Optional[int], optional
      :param to_frame: 是否转换为DataFrame格式，默认 是
      :type to_frame: bool, optional

      :rtype: Union[List[Dict], pd.DataFrame]



   .. py:method:: load_stock_index(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


      加载股票指标信息

      :param filter: 过滤条件，同mongodb格式，默认 {}。
      :type filter: Optional[Dict], optional
      :param sort: 排序条件， 同mongodb格式，默认 {}。
      :type sort: Optional[Dict], optional
      :param limit: 限制条数， 默认 None，不限制
      :type limit: Optional[int], optional
      :param to_frame: 是否转换为DataFrame格式，默认 是
      :type to_frame: bool, optional

      :rtype: Union[List[Dict], pd.DataFrame]



   .. py:method:: load_stock_industry(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


      加载行业信息

      :param filter: 过滤条件，同mongodb格式，默认 {}。
      :type filter: Optional[Dict], optional
      :param sort: 排序条件， 同mongodb格式，默认 {}。
      :type sort: Optional[Dict], optional
      :param limit: 限制条数， 默认 None，不限制
      :type limit: Optional[int], optional
      :param to_frame: 是否转换为DataFrame格式，默认 是
      :type to_frame: bool, optional

      :rtype: Union[List[Dict], pd.DataFrame]



   .. py:method:: load_stock_industry_daily(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


      加载行业k线信息

      :param filter: 过滤条件，同mongodb格式，默认 {}。
      :type filter: Optional[Dict], optional
      :param sort: 排序条件， 同mongodb格式，默认 {}。
      :type sort: Optional[Dict], optional
      :param limit: 限制条数， 默认 None，不限制
      :type limit: Optional[int], optional
      :param to_frame: 是否转换为DataFrame格式，默认 是
      :type to_frame: bool, optional

      :rtype: Union[List[Dict], pd.DataFrame]



   .. py:method:: load_stock_industry_detail(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


      加载行业明细信息

      :param filter: 过滤条件，同mongodb格式，默认 {}。
      :type filter: Optional[Dict], optional
      :param sort: 排序条件， 同mongodb格式，默认 {}。
      :type sort: Optional[Dict], optional
      :param limit: 限制条数， 默认 None，不限制
      :type limit: Optional[int], optional
      :param to_frame: 是否转换为DataFrame格式，默认 是
      :type to_frame: bool, optional

      :rtype: Union[List[Dict], pd.DataFrame]



   .. py:method:: load_stock_concept(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


      加载股票概念信息

      :param filter: 过滤条件，同mongodb格式，默认 {}。
      :type filter: Optional[Dict], optional
      :param sort: 排序条件， 同mongodb格式，默认 {}。
      :type sort: Optional[Dict], optional
      :param limit: 限制条数， 默认 None，不限制
      :type limit: Optional[int], optional
      :param to_frame: 是否转换为DataFrame格式，默认 是
      :type to_frame: bool, optional

      :rtype: Union[List[Dict], pd.DataFrame]



   .. py:method:: load_stock_concept_daily(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


      加载股票k线信息

      :param filter: 过滤条件，同mongodb格式，默认 {}。
      :type filter: Optional[Dict], optional
      :param sort: 排序条件， 同mongodb格式，默认 {}。
      :type sort: Optional[Dict], optional
      :param limit: 限制条数， 默认 None，不限制
      :type limit: Optional[int], optional
      :param to_frame: 是否转换为DataFrame格式，默认 是
      :type to_frame: bool, optional

      :rtype: Union[List[Dict], pd.DataFrame]



   .. py:method:: load_stock_concept_detail(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


      加载股票明细信息

      :param filter: 过滤条件，同mongodb格式，默认 {}。
      :type filter: Optional[Dict], optional
      :param sort: 排序条件， 同mongodb格式，默认 {}。
      :type sort: Optional[Dict], optional
      :param limit: 限制条数， 默认 None，不限制
      :type limit: Optional[int], optional
      :param to_frame: 是否转换为DataFrame格式，默认 是
      :type to_frame: bool, optional

      :rtype: Union[List[Dict], pd.DataFrame]



   .. py:method:: load_stock_yjbb(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


      加载股票业绩报表信息

      :param filter: 过滤条件，同mongodb格式，默认 {}。
      :type filter: Optional[Dict], optional
      :param sort: 排序条件， 同mongodb格式，默认 {}。
      :type sort: Optional[Dict], optional
      :param limit: 限制条数， 默认 None，不限制
      :type limit: Optional[int], optional
      :param to_frame: 是否转换为DataFrame格式，默认 是
      :type to_frame: bool, optional

      :rtype: Union[List[Dict], pd.DataFrame]



   .. py:method:: load_stock_margin(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


      加载股票融资融券信息

      :param filter: 过滤条件，同mongodb格式，默认 {}。
      :type filter: Optional[Dict], optional
      :param sort: 排序条件， 同mongodb格式，默认 {}。
      :type sort: Optional[Dict], optional
      :param limit: 限制条数， 默认 None，不限制
      :type limit: Optional[int], optional
      :param to_frame: 是否转换为DataFrame格式，默认 是
      :type to_frame: bool, optional

      :rtype: Union[List[Dict], pd.DataFrame]



   .. py:method:: count(*, tab: str) -> int
      :async:


      加载数据库条数

      :param tab: 库表名称。
      :type tab: str

      :returns: 条数
      :rtype: int



   .. py:method:: load_info(*, typ: str, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


      加载基本信息

      :param tab: 库表名称。
      :type tab: str
      :param filter: 过滤条件，同mongodb格式，默认 {}。
      :type filter: Optional[Dict], optional
      :param sort: 排序条件， 同mongodb格式，默认 {}。
      :type sort: Optional[Dict], optional
      :param limit: 限制条数， 默认 None，不限制
      :type limit: Optional[int], optional
      :param to_frame: 是否转换为DataFrame格式，默认 是
      :type to_frame: bool, optional

      :rtype: Union[List[Dict], pd.DataFrame]



   .. py:method:: load_daily(*, typ: str, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


      加载基本k线信息

      :param tab: 库表名称。
      :type tab: str
      :param filter: 过滤条件，同mongodb格式，默认 {}。
      :type filter: Optional[Dict], optional
      :param sort: 排序条件， 同mongodb格式，默认 {}。
      :type sort: Optional[Dict], optional
      :param limit: 限制条数， 默认 None，不限制
      :type limit: Optional[int], optional
      :param to_frame: 是否转换为DataFrame格式，默认 是
      :type to_frame: bool, optional

      :rtype: Union[List[Dict], pd.DataFrame]



.. py:class:: BlockMongoLoader(url: str)

   Bases: :py:obj:`qdatac.loader.BlockLoader`

   .. autoapi-inheritance-diagram:: qdatac.BlockMongoLoader
      :parts: 1


   数据库查询接口，mongodb实现（阻塞版本）



   .. py:attribute:: loader


   .. py:method:: to_dataframe(to_frame, data)
      :staticmethod:



   .. py:method:: load_bond_info(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]

      参考: :func:`qdatac.loader.Loader.load_bond_info`



   .. py:method:: load_bond_daily(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]

      参考: :func:`qdatac.loader.Loader.load_bond_daily`



   .. py:method:: load_fund_info(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]

      参考: :func:`qdatac.loader.Loader.load_fund_info`



   .. py:method:: load_fund_daily(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]

      参考: :func:`qdatac.loader.Loader.load_fund_daily`



   .. py:method:: load_fund_net(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]

      参考: :func:`qdatac.loader.Loader.load_fund_net`



   .. py:method:: load_index_info(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]

      参考: :func:`qdatac.loader.Loader.load_index_info`



   .. py:method:: load_index_daily(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]

      参考: :func:`qdatac.loader.Loader.load_index_daily`



   .. py:method:: load_stock_info(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]

      参考: :func:`qdatac.loader.Loader.load_stock_info`



   .. py:method:: load_stock_daily(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]

      参考: :func:`qdatac.loader.Loader.load_stock_daily`



   .. py:method:: load_stock_index(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]

      参考: :func:`qdatac.loader.Loader.load_stock_index`



   .. py:method:: load_stock_industry(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]

      参考: :func:`qdatac.loader.Loader.load_stock_industry`



   .. py:method:: load_stock_industry_daily(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]

      参考: :func:`qdatac.loader.Loader.load_stock_industry_daily`



   .. py:method:: load_stock_industry_detail(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]

      参考: :func:`qdatac.loader.Loader.load_stock_industry_detail`



   .. py:method:: load_stock_concept(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]

      参考: :func:`qdatac.loader.Loader.load_stock_concept`



   .. py:method:: load_stock_concept_daily(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]

      参考: :func:`qdatac.loader.Loader.load_stock_concept_daily`



   .. py:method:: load_stock_concept_detail(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]

      参考: :func:`qdatac.loader.Loader.load_stock_concept_detail`



   .. py:method:: load_stock_yjbb(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]

      参考: :func:`qdatac.loader.Loader.load_stock_yjbb`



   .. py:method:: load_stock_margin(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]

      参考: :func:`qdatac.loader.Loader.load_stock_margin`



   .. py:method:: count(*, tab: str) -> int

      参考: :func:`qdatac.loader.Loader.count`



   .. py:method:: load_info(*, typ: str, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]

      参考: :func:`qdatac.loader.Loader.load_info`



   .. py:method:: load_daily(*, typ: str, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]

      参考: :func:`qdatac.loader.Loader.load_daily`



.. py:class:: MySync(dest: Dest, funcs: Optional[List[int]] = None)

   数据同步



   .. py:attribute:: inner


   .. py:method:: sync(skip_basic=False, task_count=4, split_count=5)
      :async:


      同步函数

      :param skip_basic: 是否忽略基础数据，默认否。
      :type skip_basic: bool, optional
      :param task_count: 任务数量，默认4，如果不清楚，不要改变。过多并发容易被封。
      :type task_count: int, optional
      :param split_count: 同一个任务切分分组数，默认5。
      :type split_count: int, optional



   .. py:method:: shutdown()

      停止同步



.. py:class:: MyBlockSync(dest: Dest, funcs: Optional[List[int]] = None)

   数据同步（阻塞版本）


   .. py:attribute:: inner


   .. py:method:: sync(skip_basic=False, task_count=4, split_count=5)

      参考：:func:`qdatac.sync.MySync.sync`



   .. py:method:: shutdown()

      参考：:func:`qdatac.sync.MySync.shutdown`



.. py:class:: Dest(*, file: Optional[str] = None, mongo: Optional[str] = None, mysql: Optional[str] = None)

   同步目的



   .. py:attribute:: file


   .. py:attribute:: mongo


   .. py:attribute:: mysql


   .. py:method:: to_list() -> Optional[List[Tuple]]

      转换为list

      :returns: list
      :rtype: Optional[List[Tuple]]



.. py:class:: Funcs

   同步的数据类型



   .. py:attribute:: TradeDate
      :value: 1



   .. py:attribute:: IndexInfo
      :value: 2



   .. py:attribute:: IndexDaily
      :value: 3



   .. py:attribute:: StockInfo
      :value: 4



   .. py:attribute:: StockBar
      :value: 5



   .. py:attribute:: StockIndex
      :value: 6



   .. py:attribute:: StockIndustry
      :value: 7



   .. py:attribute:: StockIndustryDetail
      :value: 8



   .. py:attribute:: StockIndustryBar
      :value: (9,)



   .. py:attribute:: StockConcept
      :value: (10,)



   .. py:attribute:: StockConceptDetail
      :value: 11



   .. py:attribute:: StockConceptBar
      :value: (12,)



   .. py:attribute:: StockYJBB
      :value: 13



   .. py:attribute:: StockMargin
      :value: 14



   .. py:attribute:: FundInfo
      :value: 15



   .. py:attribute:: FundNet
      :value: 16



   .. py:attribute:: FundBar
      :value: 17



   .. py:attribute:: BondInfo
      :value: 18



   .. py:attribute:: BondBar
      :value: 19



.. py:function:: get_loader(typ: str, url: str, block: bool = False) -> Optional[loader.Loader]

   获取数据获取实例

   :param typ: 类型，目前只支持mongodb
   :type typ: str
   :param url: 链接字符串
   :type url: str
   :param block: 是否使用阻塞版本，默认否。
   :type block: bool, optional

   :rtype: Optional[Loader]


.. py:function:: int_to_str_date(t: int) -> str

   数据库时间转换为字符串格式

   :param t: 数据库时间
   :type t: int

   :returns: 字符串格式时间
   :rtype: str


