qdatac.qdatac
=============

.. py:module:: qdatac.qdatac


Classes
-------

.. autoapisummary::

   qdatac.qdatac.Sync
   qdatac.qdatac.BlockSync
   qdatac.qdatac.MongoLoader
   qdatac.qdatac.BlockMongoLoader


Module Contents
---------------

.. py:class:: Sync(funcs: Optional[List[int]] = None)

   .. py:method:: sync(skip_basic, task_count, split_count)
      :async:



   .. py:method:: shutdown()


.. py:class:: BlockSync(funcs: Optional[List[int]])

   .. py:method:: sync(skip_basic, task_count, split_count)


   .. py:method:: shutdown()


.. py:class:: MongoLoader

   .. py:method:: load_bond_info(filter: Optional[str], sort: Optional[str], limit: Optional[int]) -> List[Dict]
      :async:



   .. py:method:: load_bond_daily(filter: Optional[str], sort: Optional[str], limit: Optional[int]) -> List[Dict]
      :async:



   .. py:method:: load_fund_info(filter: Optional[str], sort: Optional[str], limit: Optional[int]) -> List[Dict]
      :async:



   .. py:method:: load_fund_daily(filter: Optional[str], sort: Optional[str], limit: Optional[int]) -> List[Dict]
      :async:



   .. py:method:: load_fund_net(filter: Optional[str], sort: Optional[str], limit: Optional[int]) -> List[Dict]
      :async:



   .. py:method:: load_index_info(filter: Optional[str], sort: Optional[str], limit: Optional[int]) -> List[Dict]
      :async:



   .. py:method:: load_index_daily(filter: Optional[str], sort: Optional[str], limit: Optional[int]) -> List[Dict]
      :async:



   .. py:method:: load_stock_info(filter: Optional[str], sort: Optional[str], limit: Optional[int]) -> List[Dict]
      :async:



   .. py:method:: load_stock_daily(filter: Optional[str], sort: Optional[str], limit: Optional[int]) -> List[Dict]
      :async:



   .. py:method:: load_stock_index(filter: Optional[str], sort: Optional[str], limit: Optional[int]) -> List[Dict]
      :async:



   .. py:method:: load_stock_industry(filter: Optional[str], sort: Optional[str], limit: Optional[int]) -> List[Dict]
      :async:



   .. py:method:: load_stock_industry_daily(filter: Optional[str], sort: Optional[str], limit: Optional[int]) -> List[Dict]
      :async:



   .. py:method:: load_stock_industry_detail(filter: Optional[str], sort: Optional[str], limit: Optional[int]) -> List[Dict]
      :async:



   .. py:method:: load_stock_concept(filter: Optional[str], sort: Optional[str], limit: Optional[int]) -> List[Dict]
      :async:



   .. py:method:: load_stock_concept_daily(filter: Optional[str], sort: Optional[str], limit: Optional[int]) -> List[Dict]
      :async:



   .. py:method:: load_stock_concept_detail(filter: Optional[str], sort: Optional[str], limit: Optional[int]) -> List[Dict]
      :async:



   .. py:method:: load_stock_yjbb(filter: Optional[str], sort: Optional[str], limit: Optional[int]) -> List[Dict]
      :async:



   .. py:method:: load_stock_margin(filter: Optional[str], sort: Optional[str], limit: Optional[int]) -> List[Dict]
      :async:



   .. py:method:: count(tab: str) -> int
      :async:



   .. py:method:: load_info(typ: str, filter: Optional[str], sort: Optional[str], limit: Optional[int]) -> List[Dict]
      :async:



   .. py:method:: load_daily(typ: str, filter: Optional[str], sort: Optional[str], limit: Optional[int]) -> List[Dict]
      :async:



.. py:class:: BlockMongoLoader

   .. py:method:: load_bond_info(filter: Optional[str], sort: Optional[str], limit: Optional[int]) -> List[Dict]


   .. py:method:: load_bond_daily(filter: Optional[str], sort: Optional[str], limit: Optional[int]) -> List[Dict]


   .. py:method:: load_fund_info(filter: Optional[str], sort: Optional[str], limit: Optional[int]) -> List[Dict]


   .. py:method:: load_fund_daily(filter: Optional[str], sort: Optional[str], limit: Optional[int]) -> List[Dict]


   .. py:method:: load_fund_net(filter: Optional[str], sort: Optional[str], limit: Optional[int]) -> List[Dict]


   .. py:method:: load_index_info(filter: Optional[str], sort: Optional[str], limit: Optional[int]) -> List[Dict]


   .. py:method:: load_index_daily(filter: Optional[str], sort: Optional[str], limit: Optional[int]) -> List[Dict]


   .. py:method:: load_stock_info(filter: Optional[str], sort: Optional[str], limit: Optional[int]) -> List[Dict]


   .. py:method:: load_stock_daily(filter: Optional[str], sort: Optional[str], limit: Optional[int]) -> List[Dict]


   .. py:method:: load_stock_index(filter: Optional[str], sort: Optional[str], limit: Optional[int]) -> List[Dict]


   .. py:method:: load_stock_industry(filter: Optional[str], sort: Optional[str], limit: Optional[int]) -> List[Dict]


   .. py:method:: load_stock_industry_daily(filter: Optional[str], sort: Optional[str], limit: Optional[int]) -> List[Dict]


   .. py:method:: load_stock_industry_detail(filter: Optional[str], sort: Optional[str], limit: Optional[int]) -> List[Dict]


   .. py:method:: load_stock_concept(filter: Optional[str], sort: Optional[str], limit: Optional[int]) -> List[Dict]


   .. py:method:: load_stock_concept_daily(filter: Optional[str], sort: Optional[str], limit: Optional[int]) -> List[Dict]


   .. py:method:: load_stock_concept_detail(filter: Optional[str], sort: Optional[str], limit: Optional[int]) -> List[Dict]


   .. py:method:: load_stock_yjbb(filter: Optional[str], sort: Optional[str], limit: Optional[int]) -> List[Dict]


   .. py:method:: load_stock_margin(filter: Optional[str], sort: Optional[str], limit: Optional[int]) -> List[Dict]


   .. py:method:: count(tab: str) -> int
      :async:



   .. py:method:: load_info(typ: str, filter: Optional[str], sort: Optional[str], limit: Optional[int]) -> List[Dict]
      :async:



   .. py:method:: load_daily(typ: str, filter: Optional[str], sort: Optional[str], limit: Optional[int]) -> List[Dict]
      :async:



