:py:mod:`pywqdata.loader`
=========================

.. py:module:: pywqdata.loader


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pywqdata.loader.Loader
   pywqdata.loader.BlockLoader




.. py:class:: Loader(url: str)


   Bases: :py:obj:`abc.ABC`

   .. autoapi-inheritance-diagram:: pywqdata.loader.Loader
      :parts: 1

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: to_dataframe(to_frame, data)
      :staticmethod:


   .. py:method:: json_def_handler(obj)
      :staticmethod:


   .. py:method:: load_bond_info(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


   .. py:method:: load_bond_daily(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


   .. py:method:: load_fund_info(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


   .. py:method:: load_fund_daily(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


   .. py:method:: load_fund_net(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


   .. py:method:: load_index_info(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


   .. py:method:: load_index_daily(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


   .. py:method:: load_stock_info(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


   .. py:method:: load_stock_daily(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


   .. py:method:: load_stock_index(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


   .. py:method:: load_stock_industry(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


   .. py:method:: load_stock_industry_daily(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


   .. py:method:: load_stock_industry_detail(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


   .. py:method:: load_stock_concept(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


   .. py:method:: load_stock_concept_daily(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


   .. py:method:: load_stock_concept_detail(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


   .. py:method:: load_stock_yjbb(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:


   .. py:method:: load_stock_margin(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]
      :async:



.. py:class:: BlockLoader(url: str)


   Bases: :py:obj:`abc.ABC`

   .. autoapi-inheritance-diagram:: pywqdata.loader.BlockLoader
      :parts: 1

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: to_dataframe(to_frame, data)
      :staticmethod:


   .. py:method:: load_bond_info(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]


   .. py:method:: load_bond_daily(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]


   .. py:method:: load_fund_info(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]


   .. py:method:: load_fund_daily(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]


   .. py:method:: load_fund_net(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]


   .. py:method:: load_index_info(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]


   .. py:method:: load_index_daily(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]


   .. py:method:: load_stock_info(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]


   .. py:method:: load_stock_daily(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]


   .. py:method:: load_stock_index(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]


   .. py:method:: load_stock_industry(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]


   .. py:method:: load_stock_industry_daily(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]


   .. py:method:: load_stock_industry_detail(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]


   .. py:method:: load_stock_concept(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]


   .. py:method:: load_stock_concept_daily(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]


   .. py:method:: load_stock_concept_detail(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]


   .. py:method:: load_stock_yjbb(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]


   .. py:method:: load_stock_margin(*, filter: Optional[Dict] = {}, sort: Optional[Dict] = {}, limit: Optional[int] = None, to_frame=True) -> Union[List[Dict], pandas.DataFrame]



