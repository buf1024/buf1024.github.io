:py:mod:`pywqfetch.pywqfetch`
=============================

.. py:module:: pywqfetch.pywqfetch


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pywqfetch.pywqfetch.BondFetch
   pywqfetch.pywqfetch.BlockBondFetch
   pywqfetch.pywqfetch.FundFetch
   pywqfetch.pywqfetch.BlockFundFetch
   pywqfetch.pywqfetch.StockFetch
   pywqfetch.pywqfetch.BlockStockFetch



Functions
~~~~~~~~~

.. autoapisummary::

   pywqfetch.pywqfetch.fetch_trade_date
   pywqfetch.pywqfetch.block_fetch_trade_date
   pywqfetch.pywqfetch.fetch_next_trade_date
   pywqfetch.pywqfetch.block_fetch_next_trade_date
   pywqfetch.pywqfetch.fetch_prev_trade_date
   pywqfetch.pywqfetch.block_fetch_prev_trade_date
   pywqfetch.pywqfetch.fetch_is_trade_date
   pywqfetch.pywqfetch.block_fetch_is_trade_date
   pywqfetch.pywqfetch.to_std_code
   pywqfetch.pywqfetch.fetch_rt_quot
   pywqfetch.pywqfetch.block_fetch_rt_quot



.. py:function:: fetch_trade_date() -> Set[int]
   :async:


.. py:function:: block_fetch_trade_date() -> Set[int]


.. py:function:: fetch_next_trade_date(d: datetime.date) -> int
   :async:


.. py:function:: block_fetch_next_trade_date(d: datetime.date) -> int


.. py:function:: fetch_prev_trade_date(d: datetime.date) -> int
   :async:


.. py:function:: block_fetch_prev_trade_date(d: datetime.date) -> int


.. py:function:: fetch_is_trade_date(d: datetime.date) -> bool
   :async:


.. py:function:: block_fetch_is_trade_date(d: datetime.date) -> bool


.. py:function:: to_std_code(typ: int, code: str) -> str


.. py:function:: fetch_rt_quot(self, code: List[str]) -> Dict[str, Dict]
   :async:


.. py:function:: block_fetch_rt_quot(self, code: List[str]) -> Dict[str, Dict]


.. py:class:: BondFetch


   .. py:method:: fetch_bond_info() -> List[Dict]
      :async:


   .. py:method:: fetch_bond_bar(code: str, name: str, stock_code: str, stock_name: str, freq: Optional[int], start: Optional[datetime.date], end: Optional[datetime.date], skip_rt: bool) -> Dict
      :async:



.. py:class:: BlockBondFetch


   .. py:method:: fetch_bond_info() -> List[Dict]
      :async:


   .. py:method:: fetch_bond_bar(code: str, name: str, stock_code: str, stock_name: str, freq: Optional[int], start: Optional[datetime.date], end: Optional[datetime.date], skip_rt: bool) -> Dict
      :async:



.. py:class:: FundFetch


   .. py:method:: fetch_fund_info() -> List[Dict]
      :async:


   .. py:method:: fetch_fund_net(code: str, name: Optional[str], start: Optional[datetime.date], end: Optional[datetime.date]) -> List[Dict]
      :async:


   .. py:method:: fetch_fund_bar(code: str, name: Optional[str], freq: Optional[int], start: Optional[datetime.date], end: Optional[datetime.date], skip_rt: bool) -> Dict
      :async:



.. py:class:: BlockFundFetch


   .. py:method:: fetch_fund_info() -> List[Dict]


   .. py:method:: fetch_fund_net(code: str, name: Optional[str], start: Optional[datetime.date], end: Optional[datetime.date]) -> List[Dict]


   .. py:method:: fetch_fund_bar(code: str, name: Optional[str], freq: Optional[int], start: Optional[datetime.date], end: Optional[datetime.date], skip_rt: bool) -> Dict



.. py:class:: StockFetch


   .. py:method:: fetch_index_info() -> List[Dict]
      :async:


   .. py:method:: fetch_index_bar(code: str, name: Optional[str] = None, freq: Optional[int] = None, start: Optional[datetime.date] = None, end: Optional[datetime.date] = None, skip_rt: bool = True) -> Dict
      :async:


   .. py:method:: fetch_stock_info(market: int = 0) -> List[Dict]
      :async:


   .. py:method:: fetch_stock_is_margin() -> Set[str]
      :async:


   .. py:method:: fetch_stock_bar(code: str, name: Optional[str] = None, freq: Optional[int] = None, start: Optional[datetime.date] = None, end: Optional[datetime.date] = None, skip_rt: bool = True) -> Dict
      :async:


   .. py:method:: fetch_stock_index(index_date: Optional[datetime.date]) -> Dict[str, Dict]
      :async:


   .. py:method:: fetch_stock_industry() -> List[Dict]
      :async:


   .. py:method:: fetch_stock_industry_detail(code: Optional[str] = None, name: Optional[str] = None) -> List[Dict]
      :async:


   .. py:method:: fetch_stock_industry_daily(code: str, name: Optional[str] = None, start: Optional[datetime.date] = None, end: Optional[datetime.date] = None, skip_rt: bool = True) -> Dict
      :async:


   .. py:method:: fetch_stock_concept() -> List[Dict]
      :async:


   .. py:method:: fetch_stock_concept_detail(code: Optional[str] = None, name: Optional[str] = None) -> List[Dict]
      :async:


   .. py:method:: fetch_stock_concept_daily(code: str, name: Optional[str] = None, start: Optional[datetime.date] = None, end: Optional[datetime.date] = None, skip_rt: bool = True) -> Dict
      :async:


   .. py:method:: fetch_stock_yjbb(year: int, season: int) -> List[Dict]
      :async:


   .. py:method:: fetch_stock_margin(code: str, start: Optional[datetime.date] = None, end: Optional[datetime.date] = None) -> List[Dict]
      :async:


   .. py:method:: fetch_stock_hot_rank(code: str) -> Dict
      :async:



.. py:class:: BlockStockFetch


   .. py:method:: fetch_index_info() -> List[Dict]


   .. py:method:: fetch_index_bar(code: str, name: Optional[str] = None, freq: Optional[int] = None, start: Optional[datetime.date] = None, end: Optional[datetime.date] = None, skip_rt: bool = True) -> Dict


   .. py:method:: fetch_stock_info(market: int = 0) -> List[Dict]


   .. py:method:: fetch_stock_is_margin() -> Set[str]


   .. py:method:: fetch_stock_bar(code: str, name: Optional[str] = None, freq: Optional[int] = None, start: Optional[datetime.date] = None, end: Optional[datetime.date] = None, skip_rt: bool = True) -> Dict


   .. py:method:: fetch_stock_index(index_date: Optional[datetime.date]) -> Dict[str, Dict]


   .. py:method:: fetch_stock_industry() -> List[Dict]


   .. py:method:: fetch_stock_industry_detail(code: Optional[str] = None, name: Optional[str] = None) -> List[Dict]


   .. py:method:: fetch_stock_industry_daily(code: str, name: Optional[str] = None, start: Optional[datetime.date] = None, end: Optional[datetime.date] = None, skip_rt: bool = True) -> Dict


   .. py:method:: fetch_stock_concept() -> List[Dict]


   .. py:method:: fetch_stock_concept_detail(code: Optional[str] = None, name: Optional[str] = None) -> List[Dict]


   .. py:method:: fetch_stock_concept_daily(code: str, name: Optional[str] = None, start: Optional[datetime.date] = None, end: Optional[datetime.date] = None, skip_rt: bool = True) -> Dict


   .. py:method:: fetch_stock_yjbb(year: int, season: int) -> List[Dict]


   .. py:method:: fetch_stock_margin(code: str, start: Optional[datetime.date] = None, end: Optional[datetime.date] = None) -> List[Dict]


   .. py:method:: fetch_stock_hot_rank(code: str) -> Dict



