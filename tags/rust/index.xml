<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rust on BUF1024</title>
    <link>http://localhost:1313/tags/rust/</link>
    <description>Recent content in Rust on BUF1024</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 30 Apr 2024 16:00:10 +0800</lastBuildDate><atom:link href="http://localhost:1313/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>网络收音机增加同步功能</title>
      <link>http://localhost:1313/post/2024-04-30-hiqradio-sync/</link>
      <pubDate>Tue, 30 Apr 2024 16:00:10 +0800</pubDate>
      
      <guid>http://localhost:1313/post/2024-04-30-hiqradio-sync/</guid>
      <description>
        
          
            之前写了个跨n端的网络收音机，不过一直缺少的一个功能，就是跨多端播放记录和收藏夹的同步。虽然可以通过导入导出的方式勉强可以实现某种程度的同步
          
          
        
      </description>
    </item>
    
    <item>
      <title>Rust sqlx SQLBuilder</title>
      <link>http://localhost:1313/post/2024-01-13-rust-sqlx-sqlbuilder/</link>
      <pubDate>Sat, 13 Jan 2024 16:00:10 +0800</pubDate>
      
      <guid>http://localhost:1313/post/2024-01-13-rust-sqlx-sqlbuilder/</guid>
      <description>
        
          
            对于个人来说，一直不喜欢ORM​框架。明明就是熟悉sql​的，为何还要封装一层？抛开针对各个数据库厂商难以作sql​ 优化之外，封装之后的写法
          
          
        
      </description>
    </item>
    
    <item>
      <title>rust 过程宏</title>
      <link>http://localhost:1313/post/2023-12-26-rust-proc-macro/</link>
      <pubDate>Tue, 26 Dec 2023 16:00:10 +0800</pubDate>
      
      <guid>http://localhost:1313/post/2023-12-26-rust-proc-macro/</guid>
      <description>
        
          
            简介 Rust 编程语言里面有两种宏系统，一种是声明宏（Declarative Macros），另一种为过程宏（Procedural Macros）。声明
          
          
        
      </description>
    </item>
    
    <item>
      <title>一行代码让 rustc panic</title>
      <link>http://localhost:1313/post/2023-09-21-rust-panic/</link>
      <pubDate>Thu, 21 Sep 2023 18:00:10 +0800</pubDate>
      
      <guid>http://localhost:1313/post/2023-09-21-rust-panic/</guid>
      <description>
        
          
            今天遇到一个非常特殊的问题，源自于以下一段代码： 1 2 3 4 // 敏感信息去掉 fORMat!(&amp;#34;https://xxxget?\ a=(ab%3D%22code%22)&amp;amp;X_=xadf0&amp;#34;, code = &amp;amp;code[2..]); 这是一段拼接url的代码，以上代码是错误的写法，%3D%22
          
          
        
      </description>
    </item>
    
    <item>
      <title>rust 异步编程粗略理解 async/.await</title>
      <link>http://localhost:1313/post/2021-07-26-rust-async/</link>
      <pubDate>Mon, 26 Jul 2021 22:12:02 +0800</pubDate>
      
      <guid>http://localhost:1313/post/2021-07-26-rust-async/</guid>
      <description>
        
          
            简介 协程已经是非常成熟的概念了，很多编程语言(比如JS, Python, DART等等)已提供原生的支持了，并且几乎提供相同的关键字async/await。
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
