<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on BUF1024</title>
    <link>https://buf1024.github.io/tags/linux/</link>
    <description>Recent content in Linux on BUF1024</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 01 Oct 2018 10:54:00 +0000</lastBuildDate><atom:link href="https://buf1024.github.io/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>防火墙放开端口</title>
      <link>https://buf1024.github.io/post/2018-10-01-firewall-cmd/</link>
      <pubDate>Mon, 01 Oct 2018 10:54:00 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2018-10-01-firewall-cmd/</guid>
      <description>
        
          
            firewall-cmd &amp;ndash;permanent &amp;ndash;zone=public &amp;ndash;add-port=8484/tcp &amp;ndash;zone #作用域 &amp;ndash;add-port=8484/tcp #添加端口，格式为：端口/通讯协议 &amp;ndash;permanent #永久生效，没有此参数重启后失效 firewall-cmd &amp;ndash;reload 1、firewalld的基本使用 启动： systemctl start firewalld 查看
          
          
        
      </description>
    </item>
    
    <item>
      <title>线程同步与原子变量</title>
      <link>https://buf1024.github.io/post/2017-06-03-synchronize-atomic-variable/</link>
      <pubDate>Sat, 03 Jun 2017 11:19:25 +0800</pubDate>
      
      <guid>https://buf1024.github.io/post/2017-06-03-synchronize-atomic-variable/</guid>
      <description>
        
          
            无论是基于多线程还是多进程并发的程序，同步控制总是不可避免的。按照自己的思维和使用习惯，自然会想到的是互斥量(mutext)和自旋锁(spi
          
          
        
      </description>
    </item>
    
    <item>
      <title>lwan http 服务器</title>
      <link>https://buf1024.github.io/post/2017-04-28-lwan-http-server/</link>
      <pubDate>Fri, 28 Apr 2017 22:10:32 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2017-04-28-lwan-http-server/</guid>
      <description>
        
          
            简介 服务器端程序的设计模式一般比较固定，目前主要有两种主要的解决方式，一种多进程方式(进程池)，另外一种多线程的方式(线程池)(P.S:请忘
          
          
        
      </description>
    </item>
    
    <item>
      <title>ld常用特别选项</title>
      <link>https://buf1024.github.io/post/2016-01-19-ld-special/</link>
      <pubDate>Tue, 19 Jan 2016 11:12:36 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2016-01-19-ld-special/</guid>
      <description>
        
          
            链接器ld的一些特别选项，编译OS时有用到。 -N --omagic Set the text and data sections to be readable and writable. Also, do not page-align the data segment, and disable linking against shared libraries. If the output fORMat supports Unix style magic numbers, mark the output as &amp;quot;OMAGIC&amp;quot;. Note: Although a writable text section is allowed
          
          
        
      </description>
    </item>
    
    <item>
      <title>minix 3</title>
      <link>https://buf1024.github.io/post/2016-01-18-minix-3/</link>
      <pubDate>Mon, 18 Jan 2016 11:12:36 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2016-01-18-minix-3/</guid>
      <description>
        
          
            Linux非常庞大，虽然有很多参考的资料，但是啃这样庞大的东西还是很费力，如果是业余啃，那难度或许更大。然而，我们可以绕道看下另外一个小巧，
          
          
        
      </description>
    </item>
    
    <item>
      <title>tcpdump usage</title>
      <link>https://buf1024.github.io/post/2015-07-25-tcpdump-usage/</link>
      <pubDate>Sat, 25 Jul 2015 14:26:04 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2015-07-25-tcpdump-usage/</guid>
      <description>
        
          
            Tcpdump使用方法 （1）第一种是关于类型的关键字主要包括host，net，port 例如： host 210.27.48.2，指明 210.27.48
          
          
        
      </description>
    </item>
    
    <item>
      <title>gdb一丢丢常见问题</title>
      <link>https://buf1024.github.io/post/2015-04-01-gdb-common-issue/</link>
      <pubDate>Wed, 01 Apr 2015 17:12:10 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2015-04-01-gdb-common-issue/</guid>
      <description>
        
          
            一、gdb 无法自动加载当前文件 .gdbinit文件 提示： warning: File &amp;ldquo;/home/heidong/privt/proj/osv6/.gdbinit&amp;rdquo; auto-loading has been declined by your `auto-load safe-path&amp;rsquo; set to &amp;ldquo;$debugdir:$datadir/auto-load&amp;rdquo;. To enable execution of this file add add-auto-load-safe-path /home/heidong/privt/proj/osv6/.gdbinit line to your configuration file &amp;ldquo;/home/heidong/.gdbinit&amp;rdquo;. To completely disable this security protection add set auto-load safe-path / line to
          
          
        
      </description>
    </item>
    
    <item>
      <title>Linux /proc 伪文件系统</title>
      <link>https://buf1024.github.io/post/2014-07-28-process-information-pseduo-file-system/</link>
      <pubDate>Mon, 28 Jul 2014 14:57:18 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2014-07-28-process-information-pseduo-file-system/</guid>
      <description>
        
          
            Linux /proc伪文件系统是内核数据结构的接口，是异常强大的，大部分的文件都是只读的。本文主要是根据man proc来补充说明(未完待续)。 /proc/[pid] 每一
          
          
        
      </description>
    </item>
    
    <item>
      <title>杂乱记忆</title>
      <link>https://buf1024.github.io/post/2014-07-15-misc-memory/</link>
      <pubDate>Tue, 15 Jul 2014 11:10:13 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2014-07-15-misc-memory/</guid>
      <description>
        
          
            这里记录的是一些常见的错误或技巧或一些注意事项等，不定时更新: hexo 安装（含插件） hexo 是相对比较好的一个静态BLOG生成器，虽然我在树莓派上面编译
          
          
        
      </description>
    </item>
    
    <item>
      <title>隐藏make编译的编译输出</title>
      <link>https://buf1024.github.io/post/2014-07-04-hide-compile-output/</link>
      <pubDate>Fri, 04 Jul 2014 16:45:00 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2014-07-04-hide-compile-output/</guid>
      <description>
        
          
            编译程序make时，会看到很多编译输出。对于开发来说，这是非常直观的，但是如果分发到客户（需要编译）或者只需要关注错误时，这种输出就感觉烦人
          
          
        
      </description>
    </item>
    
    <item>
      <title>设置进程的名称</title>
      <link>https://buf1024.github.io/post/2014-07-04-set-proccess-title/</link>
      <pubDate>Fri, 04 Jul 2014 10:27:47 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2014-07-04-set-proccess-title/</guid>
      <description>
        
          
            如何开搞 我们平时ps进程时，显示的进程标题是我们输入的程序名以及一些参数。这种显示方式并非非常直观，我们需要一种方式可以设置程序的标题，一眼
          
          
        
      </description>
    </item>
    
    <item>
      <title>mschedule 简单Linux进程管理（树莓派）</title>
      <link>https://buf1024.github.io/post/2014-05-30-myschd/</link>
      <pubDate>Fri, 30 May 2014 23:28:16 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2014-05-30-myschd/</guid>
      <description>
        
          
            树莓派是神奇的机器，CPU和内存都少的可怜，但体积小功耗低，在上面搞些动搞些西其实也挺有意思，挺好玩的。装的是pidara，基本服务没有精简
          
          
        
      </description>
    </item>
    
    <item>
      <title>Linux pkg-config</title>
      <link>https://buf1024.github.io/post/2013-05-29-linux-pkg-config/</link>
      <pubDate>Wed, 29 May 2013 22:37:14 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2013-05-29-linux-pkg-config/</guid>
      <description>
        
          
            pkg-config主要的作用是提供编译和连接到软件库的信息的。 如，典型的用法： [heidong@HEIDONGVM bin]$ pkg-config --cflags --libs libevent -I/usr/local/include -L/usr/local/lib -levent 将显示包含头文件和连接的信息。 那么pkg-
          
          
        
      </description>
    </item>
    
    <item>
      <title>Linux -- rpm</title>
      <link>https://buf1024.github.io/post/2012-09-18-linux-rpm/</link>
      <pubDate>Tue, 18 Sep 2012 23:48:14 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2012-09-18-linux-rpm/</guid>
      <description>
        
          
            rpm是redhat（系列）系统软件安装，管理的工具。相对于针对仓库而言的yum，rpm是针对单个软件包的。通常情况下Linux发布软件是通
          
          
        
      </description>
    </item>
    
    <item>
      <title>Linux -- yum</title>
      <link>https://buf1024.github.io/post/2012-09-13-linux-yum/</link>
      <pubDate>Thu, 13 Sep 2012 20:10:10 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2012-09-13-linux-yum/</guid>
      <description>
        
          
            Red Hat/CentOS/SuSE等都是采用RPM或者基于RPM的软件包来安装的。而yum则可以认为是rpm的软件仓库。大致的命令如下（前面加
          
          
        
      </description>
    </item>
    
    <item>
      <title>sys/queue.h</title>
      <link>https://buf1024.github.io/post/2012-05-02-sys-queue-h/</link>
      <pubDate>Wed, 02 May 2012 21:08:14 +0000</pubDate>
      
      <guid>https://buf1024.github.io/post/2012-05-02-sys-queue-h/</guid>
      <description>
        
          
            概述 sys/queue.h是Linux/UNIX系统下面的一个标准头文件，用一系列的数据结构定义了一队列。包括singly-lined list, list, simple
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
