<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C on BUF1024</title>
    <link>https://luoguochun.cn/tags/c/</link>
    <description>Recent content in C on BUF1024</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 03 Jun 2017 11:19:25 +0800</lastBuildDate><atom:link href="https://luoguochun.cn/tags/c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>线程同步与原子变量</title>
      <link>https://luoguochun.cn/post/2017-06-03-synchronize-atomic-variable/</link>
      <pubDate>Sat, 03 Jun 2017 11:19:25 +0800</pubDate>
      
      <guid>https://luoguochun.cn/post/2017-06-03-synchronize-atomic-variable/</guid>
      <description>
        
          
            无论是基于多线程还是多进程并发的程序，同步控制总是不可避免的。按照自己的思维和使用习惯，自然会想到的是互斥量(mutext)和自旋锁(spi
          
          
        
      </description>
    </item>
    
    <item>
      <title>GCC不常见，但有用特别选项</title>
      <link>https://luoguochun.cn/post/2017-05-01-gcc-missing/</link>
      <pubDate>Mon, 01 May 2017 22:10:31 +0000</pubDate>
      
      <guid>https://luoguochun.cn/post/2017-05-01-gcc-missing/</guid>
      <description>
        
          
            -isystem dir Search dir for header files, after all directories specified by -I but before the standard system directories. Mark it as a system directory, so that it gets the same special treatment as is applied to the standard system directories. If dir begins with &amp;quot;=&amp;quot;, then the &amp;quot;=&amp;quot; will be replaced by the sysroot prefix; see --sysroot and -isysroot. 标记 DIR 为系统DIR，
          
          
        
      </description>
    </item>
    
    <item>
      <title>lwan http 服务器</title>
      <link>https://luoguochun.cn/post/2017-04-28-lwan-http-server/</link>
      <pubDate>Fri, 28 Apr 2017 22:10:32 +0000</pubDate>
      
      <guid>https://luoguochun.cn/post/2017-04-28-lwan-http-server/</guid>
      <description>
        
          
            简介 服务器端程序的设计模式一般比较固定，目前主要有两种主要的解决方式，一种多进程方式(进程池)，另外一种多线程的方式(线程池)(P.S:请忘
          
          
        
      </description>
    </item>
    
    <item>
      <title>ld常用特别选项</title>
      <link>https://luoguochun.cn/post/2016-01-19-ld-special/</link>
      <pubDate>Tue, 19 Jan 2016 11:12:36 +0000</pubDate>
      
      <guid>https://luoguochun.cn/post/2016-01-19-ld-special/</guid>
      <description>
        
          
            链接器ld的一些特别选项，编译OS时有用到。 -N --omagic Set the text and data sections to be readable and writable. Also, do not page-align the data segment, and disable linking against shared libraries. If the output fORMat supports Unix style magic numbers, mark the output as &amp;quot;OMAGIC&amp;quot;. Note: Although a writable text section is allowed
          
          
        
      </description>
    </item>
    
    <item>
      <title>minix 3</title>
      <link>https://luoguochun.cn/post/2016-01-18-minix-3/</link>
      <pubDate>Mon, 18 Jan 2016 11:12:36 +0000</pubDate>
      
      <guid>https://luoguochun.cn/post/2016-01-18-minix-3/</guid>
      <description>
        
          
            Linux非常庞大，虽然有很多参考的资料，但是啃这样庞大的东西还是很费力，如果是业余啃，那难度或许更大。然而，我们可以绕道看下另外一个小巧，
          
          
        
      </description>
    </item>
    
    <item>
      <title>gdb一丢丢常见问题</title>
      <link>https://luoguochun.cn/post/2015-04-01-gdb-common-issue/</link>
      <pubDate>Wed, 01 Apr 2015 17:12:10 +0000</pubDate>
      
      <guid>https://luoguochun.cn/post/2015-04-01-gdb-common-issue/</guid>
      <description>
        
          
            一、gdb 无法自动加载当前文件 .gdbinit文件 提示： warning: File &amp;ldquo;/home/heidong/privt/proj/osv6/.gdbinit&amp;rdquo; auto-loading has been declined by your `auto-load safe-path&#39; set to &amp;ldquo;$debugdir:$datadir/auto-load&amp;rdquo;. To enable execution of this file add add-auto-load-safe-path /home/heidong/privt/proj/osv6/.gdbinit line to your configuration file &amp;ldquo;/home/heidong/.gdbinit&amp;rdquo;. To completely disable this security protection add set auto-load safe-path / line to
          
          
        
      </description>
    </item>
    
    <item>
      <title>杂乱记忆</title>
      <link>https://luoguochun.cn/post/2014-07-15-misc-memory/</link>
      <pubDate>Tue, 15 Jul 2014 11:10:13 +0000</pubDate>
      
      <guid>https://luoguochun.cn/post/2014-07-15-misc-memory/</guid>
      <description>
        
          
            这里记录的是一些常见的错误或技巧或一些注意事项等，不定时更新: hexo 安装（含插件） hexo 是相对比较好的一个静态BLOG生成器，虽然我在树莓派上面编译
          
          
        
      </description>
    </item>
    
    <item>
      <title>隐藏make编译的编译输出</title>
      <link>https://luoguochun.cn/post/2014-07-04-hide-compile-output/</link>
      <pubDate>Fri, 04 Jul 2014 16:45:00 +0000</pubDate>
      
      <guid>https://luoguochun.cn/post/2014-07-04-hide-compile-output/</guid>
      <description>
        
          
            编译程序make时，会看到很多编译输出。对于开发来说，这是非常直观的，但是如果分发到客户（需要编译）或者只需要关注错误时，这种输出就感觉烦人
          
          
        
      </description>
    </item>
    
    <item>
      <title>设置进程的名称</title>
      <link>https://luoguochun.cn/post/2014-07-04-set-proccess-title/</link>
      <pubDate>Fri, 04 Jul 2014 10:27:47 +0000</pubDate>
      
      <guid>https://luoguochun.cn/post/2014-07-04-set-proccess-title/</guid>
      <description>
        
          
            如何开搞 我们平时ps进程时，显示的进程标题是我们输入的程序名以及一些参数。这种显示方式并非非常直观，我们需要一种方式可以设置程序的标题，一眼
          
          
        
      </description>
    </item>
    
    <item>
      <title>浮动数与0比较</title>
      <link>https://luoguochun.cn/post/2014-06-28-infinite/</link>
      <pubDate>Sat, 28 Jun 2014 21:40:50 +0000</pubDate>
      
      <guid>https://luoguochun.cn/post/2014-06-28-infinite/</guid>
      <description>
        
          
            ###无限大小 C语言如何表示无限大小，NAN？redis里面这么搞的： static double R_Zero, R_PosInf, R_NegInf, R_Nan; /* Double constants initialization */ R_Zero = 0.0; R_PosInf = 1.0/R_Zero; R_NegInf = -1.0/R_Zero; R_Nan = R_Zero/R_Zero; 简单测试： #include &amp;lt;stdio.h&amp;gt; int main() { static double
          
          
        
      </description>
    </item>
    
    <item>
      <title>c构造函数</title>
      <link>https://luoguochun.cn/post/2014-06-25-c-constructor/</link>
      <pubDate>Wed, 25 Jun 2014 13:00:43 +0000</pubDate>
      
      <guid>https://luoguochun.cn/post/2014-06-25-c-constructor/</guid>
      <description>
        
          
            构造函数 任何一们面向对象语言里都会涉及构造函数这一概念，只是实现的方式各有差异。需要这main函数之前执行一段代码是非常容易的事情，只需要声
          
          
        
      </description>
    </item>
    
    <item>
      <title>mschedule 简单Linux进程管理（树莓派）</title>
      <link>https://luoguochun.cn/post/2014-05-30-myschd/</link>
      <pubDate>Fri, 30 May 2014 23:28:16 +0000</pubDate>
      
      <guid>https://luoguochun.cn/post/2014-05-30-myschd/</guid>
      <description>
        
          
            树莓派是神奇的机器，CPU和内存都少的可怜，但体积小功耗低，在上面搞些动搞些西其实也挺有意思，挺好玩的。装的是pidara，基本服务没有精简
          
          
        
      </description>
    </item>
    
    <item>
      <title>memcpy造成其他变量值改变</title>
      <link>https://luoguochun.cn/post/2014-04-09-memcpy-error/</link>
      <pubDate>Wed, 09 Apr 2014 19:12:17 +0000</pubDate>
      
      <guid>https://luoguochun.cn/post/2014-04-09-memcpy-error/</guid>
      <description>
        
          
            以前C/C++遇到过很多很多的问题，有时候费了很久很久时间，很大很大的努力才解决。但是都没有记录下来，现在想想以前的遇到的问题，只知道这样的
          
          
        
      </description>
    </item>
    
    <item>
      <title>C 简单单元测试框架</title>
      <link>https://luoguochun.cn/post/2014-01-11-ctest/</link>
      <pubDate>Sat, 11 Jan 2014 23:48:14 +0000</pubDate>
      
      <guid>https://luoguochun.cn/post/2014-01-11-ctest/</guid>
      <description>
        
          
            大约2年前，仿照GTEST写了个简单的C++单元测试框架。 https://luoguochun.cn/2012/02/09/simple-c++-test-framework/ 后来用C写后台程序比较多了，C++那个框架却不怎么好用了，于是又写了个C的。 功能
          
          
        
      </description>
    </item>
    
    <item>
      <title>gcov 简述</title>
      <link>https://luoguochun.cn/post/2013-05-31-linux-gcov/</link>
      <pubDate>Fri, 31 May 2013 17:08:14 +0000</pubDate>
      
      <guid>https://luoguochun.cn/post/2013-05-31-linux-gcov/</guid>
      <description>
        
          
            代码覆盖率是单元测试的一个指标，通常覆盖率越高，单元测试就做得更完备。（然而，覆盖率是不是和软件质量成正比关系呢？）gcov是GNU工具链中
          
          
        
      </description>
    </item>
    
    <item>
      <title>Linux pkg-config</title>
      <link>https://luoguochun.cn/post/2013-05-29-linux-pkg-config/</link>
      <pubDate>Wed, 29 May 2013 22:37:14 +0000</pubDate>
      
      <guid>https://luoguochun.cn/post/2013-05-29-linux-pkg-config/</guid>
      <description>
        
          
            pkg-config主要的作用是提供编译和连接到软件库的信息的。 如，典型的用法： [heidong@HEIDONGVM bin]$ pkg-config --cflags --libs libevent -I/usr/local/include -L/usr/local/lib -levent 将显示包含头文件和连接的信息。 那么pkg-
          
          
        
      </description>
    </item>
    
    <item>
      <title>基于libevent进程池服务器</title>
      <link>https://luoguochun.cn/post/2012-06-23-proccess-pool-server/</link>
      <pubDate>Sat, 23 Jun 2012 11:08:14 +0000</pubDate>
      
      <guid>https://luoguochun.cn/post/2012-06-23-proccess-pool-server/</guid>
      <description>
        
          
            本程序仅是为了学习libevent而写的，但可以当作是简单的程序框架扩展为实际的应用。程序本身没有经过广泛的功能测试和压力测试，仅作简单的功
          
          
        
      </description>
    </item>
    
    <item>
      <title>sys/queue.h</title>
      <link>https://luoguochun.cn/post/2012-05-02-sys-queue-h/</link>
      <pubDate>Wed, 02 May 2012 21:08:14 +0000</pubDate>
      
      <guid>https://luoguochun.cn/post/2012-05-02-sys-queue-h/</guid>
      <description>
        
          
            概述 sys/queue.h是Linux/UNIX系统下面的一个标准头文件，用一系列的数据结构定义了一队列。包括singly-lined list, list, simple
          
          
        
      </description>
    </item>
    
    <item>
      <title>迷你日志类Minilog</title>
      <link>https://luoguochun.cn/post/2012-02-18-minlog/</link>
      <pubDate>Sat, 18 Feb 2012 10:15:09 +0000</pubDate>
      
      <guid>https://luoguochun.cn/post/2012-02-18-minlog/</guid>
      <description>
        
          
            简介 日志，在一般系统里是非常非常重要的，它不仅跟踪到程序的执行，同时也是对系统进行各方面分析的基础。其重要性在这里不再一一说明，有兴趣可自行
          
          
        
      </description>
    </item>
    
    <item>
      <title>MyJson, JSON C&#43;&#43; 的另一种实现</title>
      <link>https://luoguochun.cn/post/2012-02-10-myjson-intro/</link>
      <pubDate>Fri, 10 Feb 2012 21:05:10 +0000</pubDate>
      
      <guid>https://luoguochun.cn/post/2012-02-10-myjson-intro/</guid>
      <description>
        
          
            JSON，JavaScript Object Notation, 是一种轻量级的数据交换格式。本质上来说，它和XML, YAML等格式化的数据格式没有什么区别。都是为了方便（
          
          
        
      </description>
    </item>
    
    <item>
      <title>gtest 小结</title>
      <link>https://luoguochun.cn/post/2011-12-05-gtest-summary/</link>
      <pubDate>Mon, 05 Dec 2011 12:00:00 +0000</pubDate>
      
      <guid>https://luoguochun.cn/post/2011-12-05-gtest-summary/</guid>
      <description>
        
          
            GTEST 是简单而且又非常实用的测试框架。下面关于GTEST的一些简单总结。 编译 在GNU系统下： g++ -I${GTEST_DIR}/include -I${GTEST_DIR} -c ${GTEST_DIR}/src/gtest-all.cc ar -rv libgtest.a gtest-all.o 在WINDOWS下： GTEST在M
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
