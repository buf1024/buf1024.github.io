<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>c on BUF1024!!!</title>
    <link>https://luoguochun.cn/tags/c/</link>
    <description>Recent content in c on BUF1024!!!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 03 Jun 2017 11:19:25 +0800</lastBuildDate><atom:link href="https://luoguochun.cn/tags/c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>线程同步与原子变量</title>
      <link>https://luoguochun.cn/post/2017-06-03-synchronize-atomic-variable/</link>
      <pubDate>Sat, 03 Jun 2017 11:19:25 +0800</pubDate>
      
      <guid>https://luoguochun.cn/post/2017-06-03-synchronize-atomic-variable/</guid>
      <description>&lt;p&gt;无论是基于多线程还是多进程并发的程序，同步控制总是不可避免的。按照自己的思维和使用习惯，自然会想到的是互斥量(mutext)和自旋锁(spin lock)，当然同步的方式不只这两种。gcc提供了，&lt;code&gt;__sync_*&lt;/code&gt;系列的内置函数，用于对&lt;strong&gt;基本数据类型&lt;/strong&gt;的原子操作。&lt;code&gt;__sync_*&lt;/code&gt;针对的是c/c++的&lt;strong&gt;基本数据类型&lt;/strong&gt;，而互斥量和自旋锁可以用于代码块的同步，当然，也不是说&lt;code&gt;__sync_*&lt;/code&gt;不能用于代码块的同步控制，只需要一点点的技巧。&lt;/p&gt;
&lt;p&gt;在撸&lt;code&gt;__sync_*&lt;/code&gt;系列函数之前，先看看一丢丢并发程序易忽略的技巧。为了提高效率，我们希望线程的调度级别和系统普通进程的调度级别一样的，为了充分利用cpu的cache特性，我们还希望每次系统调度时都绑定到同一个cpu中执行。前者，已经使用过了：&lt;code&gt;pthread_attr_setscope(&amp;amp;attr, PTHREAD_SCOPE_SYSTEM)&lt;/code&gt;，后者，叫cpu亲和性（也有叫亲缘性，英文：affinity），用到的api主要有：&lt;code&gt;sched_setaffinity&lt;/code&gt; 和 &lt;code&gt;sched_getaffinity&lt;/code&gt;，使用方式也是挺简单的，如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// 线程/进程起来后
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;CPU_ZERO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;CPU_SET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;proc_num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;sched_setaffinity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;gettid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;cpu_set_t&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;我们再看看习惯思维的同步工具，互斥锁（mutext）和自旋锁(spin lock)的区别。互斥锁是sleep-waiting类型的锁，例如，在多核的环境中，A线程如果尝试对B线程进行加互斥锁，如果互斥锁已经被B线程占用，那么A线程就会进入等等状态，那么系统就会对A线程进行上下文切换(conext switch)，让出CPU使用权，上下文切换(conext switch)是比较耗时的操作的。而自旋锁的处理方式则不会进行上下文切换，而是让cpu不断的轮询的获取锁。自旋锁的CPU轮询和互斥锁的上下文切换同样是耗性能的，大多数情况下，有限时间内的CPU轮询比互斥锁的上下文切换轻量太多了。那么什么情况下使用互斥锁（mutext）和自旋锁(spin lock)呢，有人总结说，尽管互斥锁消耗的资源相对多（上下文切换），但互斥锁是适用情况还是比较广，大多数情况下还是选择互斥锁，在需要进行性能优化/或者知道锁代码块运行时间的情况下，才考虑自旋锁。&lt;/p&gt;
&lt;p&gt;另外提及一下，线程局部变量。这个在其他语言是有这个概念的，C/C++也是有，但是经常容易忽略。线程局部变量，使用&lt;code&gt;__thread&lt;/code&gt;修饰，使用时有局限性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__thread&lt;/code&gt;可以修饰全局变量、函数的静态变量，但是无法修饰函数的局部变量。&lt;/li&gt;
&lt;li&gt;被&lt;code&gt;__thread&lt;/code&gt;修饰的变量只能在编译期初始化，且只能通过常量表达式来初始化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们正式看一下gcc提供的原子操作：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__sync_fetch_and_add&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__sync_fetch_and_sub&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__sync_fetch_and_or&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__sync_fetch_and_and&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__sync_fetch_and_xor&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__sync_fetch_and_nand&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__sync_add_and_fetch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__sync_sub_and_fetch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__sync_or_and_fetch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__sync_and_and_fetch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__sync_xor_and_fetch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__sync_nand_and_fetch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__sync_bool_compare_and_swap&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;oldval&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;newval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__sync_val_compare_and_swap&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;oldval&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;newval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;__sync_synchronize&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(...)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__sync_lock_test_and_set&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__sync_lock_release&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;__sync_*&lt;/code&gt;系列函数操作的数据都是原始的数据类型，从名字看，很容易猜出它们的用途。最后三个使用的比较少，是内存壁垒的含义，现代CPU都是乱序执行的，有些情况下乱序执行会有问题，所以需要顺序执行，这就是这三个函数的用处。最开始说过，&lt;code&gt;__sync_*&lt;/code&gt;用于代码块的同步控制，需要一丢丢的技巧。比如用于代码块的封装:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#define trylock(lock)  (*(lock) == 0 &amp;amp;&amp;amp; __sync_bool_compare_and_swap(lock, 0, 1))
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#define unlock(lock)    *(lock) = 0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 使用
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;trylock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;unlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;上面说自旋锁锁被占用时，空耗CPU，使用原子变量，可以进行一定程度的优化，和原来的自旋锁的优化是，自旋一定次数后，主动交出CPU的控制权：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;spinlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uint_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;uint_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;spin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;ngx_uint_t&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lock&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__sync_bool_compare_and_swap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ncpu&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// ncpu CPU个数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;            &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;spin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;c1&#34;&gt;// cpu_pause(); 空转
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lock&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__sync_bool_compare_and_swap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nf&#34;&gt;sched_yield&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 只旋一个周期，没有获取到锁，退出CPU控制权
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;正常的应用业务或许不会用到&lt;code&gt;__sync_*&lt;/code&gt;系列函数，但如果使用了无疑可以进一步提高单个应用的性能。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GCC不常见，但有用特别选项</title>
      <link>https://luoguochun.cn/post/2017-05-01-gcc-missing/</link>
      <pubDate>Mon, 01 May 2017 22:10:31 +0000</pubDate>
      
      <guid>https://luoguochun.cn/post/2017-05-01-gcc-missing/</guid>
      <description>&lt;p&gt;-isystem dir&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;       Search dir for header files, after all directories specified by -I but before the

       standard system directories.  Mark it as a system directory, so that it gets the same

       special treatment as is applied to the standard system directories.  If dir begins

       with &amp;quot;=&amp;quot;, then the &amp;quot;=&amp;quot; will be replaced by the sysroot prefix; see --sysroot and

       -isysroot.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;标记 DIR 为系统DIR，搜索头文件顺序： 1. -I路径 2. -isystem DIR 3. 系统路径&lt;/p&gt;
&lt;p&gt;&amp;ndash;sysroot=dir&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;       Use dir as the logical root directory for headers and libraries.  For example, if the

       compiler normally searches for headers in /usr/include and libraries in /usr/lib, it

       instead searches dir/usr/include and dir/usr/lib.

       If you use both this option and the -isysroot option, then the --sysroot option

       applies to libraries, but the -isysroot option applies to header files.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;标记DIR为头文件的根目录&lt;/p&gt;
&lt;p&gt;-static&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;       On systems that support dynamic linking, this prevents linking with the shared libraries.

       On other systems, this option has no effect.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;链接静态库&lt;/p&gt;
&lt;p&gt;-M&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;      Instead of outputting the result of preprocessing, output a rule suitable for make describing the dependencies of the main source file.

      The preprocessor outputs one make rule containing the object file name for that source file, a colon, and the names of all the included files,

      including those coming from -include or -imacros command line options.

      Unless specified explicitly (with -MT or -MQ), the object file name consists of the name of the source file with any suffix replaced with object

      file suffix and with any leading directory parts  removed.  If there are many included files then the rule is split into several lines using \-newline.

      The rule has no commands.

      This option does not suppress the preprocessor&#39;s debug output, such as -dM.  To avoid mixing such debug output with the dependency

      rules you should explicitly specify the dependency output file

       with -MF, or use an environment variable like DEPENDENCIES_OUTPUT.  Debug output will still be sent to the regular output stream as normal.

       Passing -M to the driver implies -E, and suppresses warnings with an implicit -w.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;生依赖文件，-E 为预编译，和-MF “文件”，生产依赖到文件，-MD生产依赖到，XXX.d文件，以上所描述几个，均为加快编译。&lt;/p&gt;
&lt;p&gt;-O&lt;/p&gt;
&lt;p&gt;-O1 Optimize.  Optimizing compilation takes somewhat more time, and a lot more memory for&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;       a large function.

       With -O, the compiler tries to reduce code size and execution time, without performing

       any optimizations that take a great deal of compilation time.

       -O turns on the following optimization flags:

       -fauto-inc-dec -fcompare-elim -fcprop-registers -fdce -fdefer-pop -fdelayed-branch

       -fdse -fguess-branch-probability -fif-conversion2 -fif-conversion -fipa-pure-const

       -fipa-profile -fipa-reference -fmerge-constants -fsplit-wide-types -ftree-bit-ccp

       -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-copyrename -ftree-dce

       -ftree-dominator-opts -ftree-dse -ftree-forwprop -ftree-fre -ftree-phiprop -ftree-slsr

       -ftree-sra -ftree-pta -ftree-ter -funit-at-a-time

       -O also turns on -fomit-frame-pointer on machines where doing so does not interfere

       with debugging.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;-O2 Optimize even more.  GCC performs nearly all supported optimizations that do not&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;       involve a space-speed tradeoff.  As compared to -O, this option increases both

       compilation time and the performance of the generated code.

       -O2 turns on all optimization flags specified by -O.  It also turns on the following

       optimization flags: -fthread-jumps -falign-functions  -falign-jumps -falign-loops

       -falign-labels -fcaller-saves -fcrossjumping -fcse-follow-jumps  -fcse-skip-blocks

       -fdelete-null-pointer-checks -fdevirtualize -fexpensive-optimizations -fgcse

       -fgcse-lm -fhoist-adjacent-loads -finline-small-functions -findirect-inlining

       -fipa-sra -foptimize-sibling-calls -fpartial-inlining -fpeephole2 -fregmove

       -freorder-blocks  -freorder-functions -frerun-cse-after-loop -fsched-interblock

       -fsched-spec -fschedule-insns  -fschedule-insns2 -fstrict-aliasing -fstrict-overflow

       -ftree-switch-conversion -ftree-tail-merge -ftree-pre -ftree-vrp

       Please note the warning under -fgcse about invoking -O2 on programs that use computed

       gotos.

       NOTE: In Ubuntu 8.10 and later versions, -D_FORTIFY_SOURCE=2 is set by default, and is

       activated when -O is set to 2 or higher.  This enables additional compile-time and

       run-time checks for several libc functions.  To disable, specify either

       -U_FORTIFY_SOURCE or -D_FORTIFY_SOURCE=0.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;-O3 Optimize yet more.  -O3 turns on all optimizations specified by -O2 and also turns on&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;       the -finline-functions, -funswitch-loops, -fpredictive-commoning, -fgcse-after-reload,

       -ftree-vectorize, -fvect-cost-model, -ftree-partial-pre and -fipa-cp-clone options.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;-O0 Reduce compilation time and make debugging produce the expected results.  This is the&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;       default.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;-Os Optimize for size.  -Os enables all -O2 optimizations that do not typically increase&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;       code size.  It also performs further optimizations designed to reduce code size.

       -Os disables the following optimization flags: -falign-functions  -falign-jumps

       -falign-loops -falign-labels  -freorder-blocks  -freorder-blocks-and-partition

       -fprefetch-loop-arrays  -ftree-vect-loop-version
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;-Ofast&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;       Disregard strict standards compliance.  -Ofast enables all -O3 optimizations.  It also

       enables optimizations that are not valid for all standard-compliant programs.  It

       turns on -ffast-math and the Fortran-specific -fno-protect-parens and -fstack-arrays.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;-Og Optimize debugging experience.  -Og enables optimizations that do not interfere with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;       debugging. It should be the optimization level of choice for the standard edit-

       compile-debug cycle, offering a reasonable level of optimization while maintaining

       fast compilation and a good debugging experience.

       If you use multiple -O options, with or without level numbers, the last such option is

       the one that is effective.

      优化等级
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;-fstack-protector&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;       Emit extra code to check for buffer overflows, such as stack smashing attacks.  This

       is done by adding a guard variable to functions with vulnerable objects.  This

       includes functions that call &amp;quot;alloca&amp;quot;, and functions with buffers larger than 8 bytes.

       The guards are initialized when a function is entered and then checked when the

       function exits.  If a guard check fails, an error message is printed and the program

       exits

       检查栈溢出，相反的      -fno-stack-protector
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;-nostdinc&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;       Do not search the standard system directories for header files.  Only the directories

       you have specified with -I options (and the directory of the current file, if

       appropriate) are searched.

       不使用标准C头文件
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;-nostdinc++&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;       Do not search for header files in the C++-specific standard directories, but do still

       search the other standard directories.  (This option is used when building the C++

       library.)

      不使用标准C++头文件
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;-Wall&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;       This enables all the warnings about constructions that some users consider

       questionable, and that are easy to avoid (or modify to prevent the warning), even in

       conjunction with macros.  This also enables some language-specific warnings described

       in C++ Dialect Options and Objective-C and Objective-C++ Dialect Options.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;打开警告（并非所有），打开绝大部分，还要加-Wextral&lt;/p&gt;
&lt;p&gt;-Wextra&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;       This enables some extra warning flags that are not enabled by -Wall. (This option used

       to be called -W.  The older name is still supported, but the newer name is more

       descriptive.)

       打开额外的警告，同-W（旧名）
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;-Werror&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;       Make all warnings into hard errors.  Source code which triggers warnings will be

       rejected.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;警告即报错。&lt;/p&gt;
&lt;p&gt;-w  Suppress all warnings, including those which GNU CPP issues by default.&lt;/p&gt;
&lt;p&gt;关闭所有的错误警告&lt;/p&gt;
&lt;p&gt;-Wa,option&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;       Pass option as an option to the assembler.  If option contains commas, it is split

       into multiple options at the commas
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;传选项给汇编器&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>lwan http 服务器</title>
      <link>https://luoguochun.cn/post/2017-04-28-lwan-http-server/</link>
      <pubDate>Fri, 28 Apr 2017 22:10:32 +0000</pubDate>
      
      <guid>https://luoguochun.cn/post/2017-04-28-lwan-http-server/</guid>
      <description>&lt;h3 id=&#34;简介&#34;&gt;简介 &lt;a href=&#34;#%e7%ae%80%e4%bb%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;服务器端程序的设计模式一般比较固定，目前主要有两种主要的解决方式，一种多进程方式(进程池)，另外一种多线程的方式(线程池)(P.S:请忘掉一个连接或一个业务fork一个进程，或起一个线程的方式，系统开销太大)，两种方式都采用了非阻塞io，多路复用(P.S:linux平台为最高效的&lt;code&gt;epoll&lt;/code&gt;，新型api，如&lt;code&gt;signalfd&lt;/code&gt;, &lt;code&gt;timerfd&lt;/code&gt;, &lt;code&gt;eventfd&lt;/code&gt;等，也可以进行&lt;code&gt;epoll&lt;/code&gt;)。&lt;/p&gt;
&lt;p&gt;对于多进程的模式，有些实现是，起一个主进程进行监听和管理，再起N个(N=cpu个数)业务进程，当主进程&lt;code&gt;accept&lt;/code&gt;成功后，根据一定的业务逻辑，将fd发送到业务进程(P.S:发送方式用&lt;code&gt;socketpair&lt;/code&gt;，参考：&lt;a href=&#34;https://github.com/buf1024/reinvent-wheel/blob/master/common/sock.c&#34;&gt;sock.c&lt;/a&gt; &lt;code&gt;unix_domain_send_fd&lt;/code&gt;和&lt;code&gt;unix_domain_recv_fd&lt;/code&gt;)，业务进程对接收到到fd进行&lt;code&gt;epoll&lt;/code&gt;。对于多进程，另外一些实现是，起N个(N=cpu个数)业务进程，同时N个进行地位同等，同时进行&lt;code&gt;epoll&lt;/code&gt;，&lt;code&gt;listen&lt;/code&gt;，&lt;code&gt;accept&lt;/code&gt;等(P.S:多进行进行监听将引起群惊效应，但只有一个进程&lt;code&gt;accept&lt;/code&gt;成功)。而多线程的模式，则和多进程模式类似，有一个主线程进行监听和管理，再起N个(N=cpu个数)业务线程，&lt;strong&gt;并将业务线程的调度级别设置为系统级别&lt;/strong&gt;，这点非常重要，各个业务线程程进行进行&lt;code&gt;epoll&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;多进程和多线程并无本质区别，多线程的优点个人看来，数据都在整个进程空间，线程内数据都可以共享，需要留意共享数据的互斥访问，缺点就是调试起来稍微麻烦，而多进程的优点在于个人看来，调试相对多线程方便，缺点就是不方便运维。(P.S:旧同事入职一家导航的公司，他们的网络框架就是多线程模式，而公司的，多数是多进程模式。旧同事提起，所以现在再回头看看&lt;a href=&#34;https://github.com/lpereira/lwan&#34;&gt;lwan&lt;/a&gt;, 当时只是看，没记录下来，现在重新记录一下)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/lpereira/lwan&#34;&gt;lwan&lt;/a&gt;是个非常轻量级的http服务器(P.S:检验你是否掌握了C语言的标准，是否能完整的实现一个http服务器)，代码量只有2W多行，比起成熟稳定的&lt;a href=&#34;http://nginx.org/&#34;&gt;nginx&lt;/a&gt;代码量少太多了，当然功能也少很多。&lt;a href=&#34;https://github.com/lpereira/lwan&#34;&gt;lwan&lt;/a&gt;在16年5月份左右一段时间在C语言项目排行榜star增加数排前列。个人觉得，&lt;a href=&#34;https://github.com/lpereira/lwan&#34;&gt;lwan&lt;/a&gt;，它采用多线程模式，遵循了高并发服务设计的最基本模式，自己设计一个比较有特色的&lt;a href=&#34;http://baike.baidu.com/link?url=3ojcT0gOp_oV_uDCAr0IYmAl6AziaFrQNodhpkS1DPpB7euef3LideO12NpZYhJWhuHYIw-2JqSlUUw_pvP9pa&#34;&gt;trie&lt;/a&gt;树的实现，可扩展的模块编写，同时创新的使用了协程（协程，自己在很久之前也关注过，参考: &lt;a href=&#34;https://luoguochun.cn/2014/08/21/coroutine/&#34;&gt;coroutine协程&lt;/a&gt;），这是最大的特点。当然，到目前为止，它还不稳定，从自己关注提出的第一个issue, 还有很多BUG，代码有一些不好的风格（如相对比较多的&lt;code&gt;goto&lt;/code&gt;语句，一言不合就&lt;code&gt;abort&lt;/code&gt;）。尽管如此，它还是一个非常值得学习的web服务器。下面简单粗略回顾下&lt;a href=&#34;https://github.com/lpereira/lwan&#34;&gt;lwan&lt;/a&gt;，详细了解的话，参考代码，自己也fork了一份，加了部分注释&lt;a href=&#34;https://github.com/buf1024/lwan&#34;&gt;lwan&lt;/a&gt;。(P.S:自己叫别人去学习，没理由自己忘记了)&lt;/p&gt;
&lt;h3 id=&#34;大致工作流程&#34;&gt;大致工作流程 &lt;a href=&#34;#%e5%a4%a7%e8%87%b4%e5%b7%a5%e4%bd%9c%e6%b5%81%e7%a8%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/bu24/lwan&#34;&gt;lwan&lt;/a&gt;的工作模式是非常典型的多线程模型，粗略画一下它的工作流程：
&lt;img src=&#34;https://luoguochun.cn/img/lwan/workflow.png&#34; alt=&#34;lwan工作流程&#34;&gt;
&lt;a href=&#34;https://github.com/bu24/lwan&#34;&gt;lwan&lt;/a&gt;总共包括，一个低级别的job线程，主要于资源清理，一个主线程，主要用于接收连接和分发连接，以及N(N可配置，一般等于CPU个数)个调度级别为进程级别的业务处理线程。&lt;a href=&#34;https://github.com/bu24/lwan&#34;&gt;lwan&lt;/a&gt;进行线程初始化是，使用到了&lt;code&gt;pthread_barrier_*&lt;/code&gt;这种数据结构，&lt;code&gt;pthread_barrier_*&lt;/code&gt;其实只做且只能做一件事，就是充当栏杆（barrier意为栏杆)。形象的说就是把先后到达的多个线程挡在同一栏杆前，直到所有线程到齐，然后撤下栏杆同时放行。1）&lt;code&gt;init&lt;/code&gt;函数负责指定要等待的线程个数；2） &lt;code&gt;wait&lt;/code&gt;函数由每个线程主动调用，它告诉栏杆“我到起跑线前了”。&lt;code&gt;wait&lt;/code&gt;执行末尾栏杆会检查是否所有人都到栏杆前了，如果是，栏杆就消失所有线程继续执行下一句代码；如果不是，则所有已到&lt;code&gt;wait&lt;/code&gt;的线程停在该函数不动，剩下没执行到wait()的线程继续执行；3）&lt;code&gt;destroy&lt;/code&gt;函数释放init申请的资源。&lt;/p&gt;
&lt;p&gt;job线程在每一次循环调用&lt;code&gt;sleep&lt;/code&gt;类的函数，这类函数有个致命的缺点，那就是不能响应信号，这就是导致&lt;a href=&#34;https://github.com/bu24/lwan&#34;&gt;lwan&lt;/a&gt;退出非常慢的原因。使用&lt;code&gt;pthread_cond_wait&lt;/code&gt;可以避免该问题，已经修改，并进行了pull request：&lt;a href=&#34;https://github.com/lpereira/lwan/pull/199&#34;&gt;quick quit optimize&lt;/a&gt;。业务处理线程里面全部使用协程进行处理。&lt;/p&gt;
&lt;h3 id=&#34;数据结构&#34;&gt;数据结构 &lt;a href=&#34;#%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;一般程序，使用比较多的两个数据结构一个是&lt;code&gt;list&lt;/code&gt;链表，另外一个是&lt;code&gt;hashtable&lt;/code&gt;。&lt;code&gt;list&lt;/code&gt;没有太多可讲的，而&lt;code&gt;hashtable&lt;/code&gt;的实现，在这里可能也不是最优的。&lt;code&gt;hashtable&lt;/code&gt;比较高效，而且经过大量检验的是redis的实现方式，推荐看这个，公司内部使用的库也是修改这个而来。网上对&lt;a href=&#34;https://github.com/antirez/redis/blob/4.0/src/dict.c&#34;&gt;dict.c&lt;/a&gt;的分析很多，如：&lt;a href=&#34;http://huangz.iteye.com/blog/1455808&#34;&gt;Redis 源码分析（1）：字典和哈希表（dict.c 和 dict.h）&lt;/a&gt;。这里不累赘了，大体来说：hash 的典型实现方法，定义一个假如长度为len的数组，每个数组里面为leaf的节点，leaf节点为一链表结构。插入和查询就是，先计算key的hash，hash值取模len，得出数据所在的位置，添加到leaf节点后（插入），或者在从leaf链表里面遍历（查询，由于hash冲突），得到最终的结果。redis的&lt;code&gt;dict&lt;/code&gt;包括两个这个样的&lt;code&gt;hashtable&lt;/code&gt;，首先插入数据从0号&lt;code&gt;hashtable&lt;/code&gt;插入，插入时创建，当0号&lt;code&gt;hashtable&lt;/code&gt;增长到一定的程度或比例，那么就会创建1号&lt;code&gt;hashtable&lt;/code&gt;，并将0号&lt;code&gt;hashtable&lt;/code&gt;迁移到这个&lt;code&gt;hashtable&lt;/code&gt;，如果正在发生迁移，那么新插入的数据就会插入1号&lt;code&gt;hashtable&lt;/code&gt;，0号到1号&lt;code&gt;hashtable&lt;/code&gt;的迁移是分摊到&lt;code&gt;dict&lt;/code&gt;的每个操作之中的，并非采用集中式的迁移。当0号&lt;code&gt;hashtable&lt;/code&gt;全部迁移到1号&lt;code&gt;hashtable&lt;/code&gt;时，那么将0号&lt;code&gt;hashtable&lt;/code&gt;删除，并将1号&lt;code&gt;hashtable&lt;/code&gt;变为0号&lt;code&gt;hashtable&lt;/code&gt;，1号&lt;code&gt;hashtable&lt;/code&gt;变为NULL。然后在重复这样一个过程。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://baike.baidu.com/link?url=zKneAm7OsFA-2VblcQ21Grh7ZYBSnSkaycwjc9q1Z5IbMNU0tdaqi71hgVjx7ZrO81aKwVYdnOAqOGl3VbU3U_&#34;&gt;trie&lt;/a&gt;树是这里的另外一个重要的数据结构，很多web框架都严重依赖这种数据结构，个人觉得，这里实现的&lt;code&gt;trie&lt;/code&gt;还是比较高效的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// trie数据结构定义
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lwan_trie_node&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lwan_trie_node&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lwan_trie_leaf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;leaf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ref_count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lwan_trie_leaf&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lwan_trie_leaf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lwan_trie&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lwan_trie_node&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;free_node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//查找或插入时，就已经确认位置了    /* Traverse the trie, allocating nodes if necessary */
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;knode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;trie&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;knode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nf&#34;&gt;GET_NODE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;比如，5，58,12,123,1234,12345在内存的存储情况（简化，假设&lt;code&gt;struct lwan_trie_node *next[4]&lt;/code&gt;）：
&lt;img src=&#34;https://luoguochun.cn/img/lwan/trie.png&#34; alt=&#34;trie内存存储&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;协程coro&#34;&gt;协程coro &lt;a href=&#34;#%e5%8d%8f%e7%a8%8bcoro&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;业务处理线程里面全部使用协程进行处理的。协程应该属于&lt;a href=&#34;https://github.com/bu24/lwan&#34;&gt;lwan&lt;/a&gt;的核心了。协程可以参考&lt;a href=&#34;https://luoguochun.cn/2014/08/21/coroutine/&#34;&gt;coroutine协程&lt;/a&gt;，里面描述这里的有很大区别，但本质上都是都对&lt;code&gt;context&lt;/code&gt;不同程度封装，或用汇编，或直接用系统函数。这里的coro定义了一个&lt;code&gt;struct coro_defer_array defer;&lt;/code&gt;，用于&lt;code&gt;connection&lt;/code&gt;超时或协程被清理时，内部资源的清理。具体协程不再详述。&lt;/p&gt;
&lt;p&gt;协程本身概念并不难复杂，如果熟悉这种编程模式，那么非阻塞编程模式将可以用顺序编程的方式来思考，对程序员的思考的角度和业务逻辑的理解将有很大的提升(非阻塞的方式时，当业务流程需要进行阻塞时，比如需要连接第三方系统请求数据，那么业务当前的状态可能需要保存下来，当第三方系统应答时，再恢复状态，进行下一步处理，这样，业务流程就变成一段一段的了)。但是协程并没有大规模的使用，&lt;a href=&#34;http://blog.codingnow.com/&#34;&gt;风云&lt;/a&gt;也曾介绍过，在推广协成概念时，遇到了很多问题(具体出处已忘记)。&lt;/p&gt;
&lt;p&gt;使用协程必须适当评估程序&lt;code&gt;STACK&lt;/code&gt;的大小，&lt;a href=&#34;https://github.com/lpereira/lwan&#34;&gt;lwan&lt;/a&gt;里面是固定定义为&lt;code&gt;#define PTHREAD_STACK_MIN	16384&lt;/code&gt;，协程分配的&lt;code&gt;STACK&lt;/code&gt;为&lt;code&gt;((3 * (PTHREAD_STACK_MIN)) / 2)&lt;/code&gt;或&lt;code&gt;#define CORO_STACK_MIN         (5 * (PTHREAD_STACK_MIN))&lt;/code&gt;，这样那么如果在协程切换函数里面定义一个比较大的临时变量，如&lt;code&gt;char tmp[1024000]&lt;/code&gt;那么程序必挂了，因为栈溢出了。所以使用协程需要考虑&lt;code&gt;STACK&lt;/code&gt;或考虑动态分配内存，动态分配内存还需要考虑释放问题(参考 lwan-coro.c &lt;code&gt;coro_defer&lt;/code&gt;)。另外一个问题是，程序coredump时，用gdb进行调试，发现用&lt;code&gt;bt&lt;/code&gt;进行调用堆栈查看时，有部分是乱的，不方便问题定位。我想这些有可能是协程没有被大规模推广的原因之一吧？&lt;/p&gt;
&lt;h3 id=&#34;模块处理&#34;&gt;模块处理 &lt;a href=&#34;#%e6%a8%a1%e5%9d%97%e5%a4%84%e7%90%86&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/lpereira/lwan&#34;&gt;lwan&lt;/a&gt;通过模块进行自身的扩展，自己本身也实现了一些模块。&lt;code&gt;lwan-mod&lt;/code&gt;开头的文件都是它的模块。个人编写模块，只有实现相关的函数，直接编译成动态库即可。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 模块需实现函数，模块名可在配置文件进行配置，返回const struct lwan_module *结构体指针
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lwan_module&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;lwan_module_模块名&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/*lwan 模块是函数名为 lwan_module_模块名的函数，内置模块使用-rdynamic编译进可执行程序内*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lwan_module&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;init_from_hash&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shutdown&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parse_conf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;config&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// http 请求处理函数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;lwan_http_status&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;handle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lwan_request&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lwan_response&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lwan_handler_flags&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 处理标志
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;自己实现一个helloworld模块可参考：&lt;a href=&#34;https://github.com/buf1024/lwan/blob/master/common/lwan-mod-helloworld.c&#34;&gt;helloworld&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;配置文件&#34;&gt;配置文件 &lt;a href=&#34;#%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/lpereira/lwan&#34;&gt;lwan&lt;/a&gt;提供的配置文件，并没有覆盖全部的配置，下面从代码中提取的配置文件，供参考下(见国不少开源项目采用这种配置格式，但貌似没有具体定义这是那种格式，所有自己叫这种格式为&lt;code&gt;tson&lt;/code&gt;，并写了一个简单解析的代码，参考&lt;a href=&#34;https://github.com/buf1024/reinvent-wheel/blob/master/common/tson.c&#34;&gt;tson&lt;/a&gt;)：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;62
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;63
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;64
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;65
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;66
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;67
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;68
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;69
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;70
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;71
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;#true on yes    以及非0数值，被解析为true
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;#false off no   以及非0数值，被解析为false
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# Timeout in seconds to keep a connection alive.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;keep_alive_timeout = 15
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# Set to true to not print any debugging messages. (Only effective in
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# release builds.)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;quiet = false
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# Set SO_REUSEPORT=1 in the master socket.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;reuse_port = true
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# Disable HAProxy&amp;#39;s PROXY protocol by default. Only enable if needed.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;proxy_protocol = false
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;allow_cors=false
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# Value of &amp;#34;Expires&amp;#34; header. Default is 1 month and 1 week.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;expires = 1M 1w
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;#error_template = error.html
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# post 数据大小，最多为128m
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;max_post_data_size=40960000
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;allow_temp_files=true
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# Number of I/O threads. Default (0) is number of online CPUs.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;threads = 0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;#需要root用户，或者有root权限的用户执行， 该section必须在所以listener之前
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;#straitjacket {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;#  # 切换运行改程序的用户
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;#  user = heidong
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;#  # 程序运行的根目录
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;#  chroot = /home/heidong
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;#}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# section解析  ip:port
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;listener *:8080 {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    # 配置三种方式 1. prefix 路径 1. &amp;amp;handler 路径 3. module 路径。 只有配置为module的，方有回调函数读里面配置项目
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    #prefix / {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    #        #handler和module只能是一个, module 为函数名为 lwan_module_{module_name}的模块
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    #        module = module_name
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    #        #handler 函数原型 lwan_http_status_t (*handler)(lwan_request_t *request, lwan_response_t *response, void *data);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    #        handler  = handler_symbol
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    #        authorization basic {     #目前只支持basic
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    #            realm=value #默认Lwan
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    #            passowrd_file=file #默认htpasswd
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    #        }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    #}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    # 配置handler
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    #&amp;amp;handler / {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    #}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    serve_files / {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            path = ./
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            # When requesting for file.ext, look for a smaller/newer file.ext.gz,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            # and serve that instead if `Accept-Encoding: gzip` is in the
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            # request headers.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            serve precompressed files = true
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            # 配置该section后，必须授权才可访问该url
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            authorization basic {     #目前只支持basic
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                realm=测试测试 #默认Lwan
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                password_file=/home/heidong/privt/proj/lwan/htpasswd.conf #默认htpasswd，数据格式为：用户名=密码
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;其他&#34;&gt;其他 &lt;a href=&#34;#%e5%85%b6%e4%bb%96&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;这里只是简单过一些lwan最基本的东西，没有详细的过里面的其他方面，仔细分析的话还有很多东西可以学，这里不再罗列了，暂时先这样。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>杂乱记忆</title>
      <link>https://luoguochun.cn/post/2014-07-15-misc-memory/</link>
      <pubDate>Tue, 15 Jul 2014 11:10:13 +0000</pubDate>
      
      <guid>https://luoguochun.cn/post/2014-07-15-misc-memory/</guid>
      <description>&lt;p&gt;这里记录的是一些常见的错误或技巧或一些注意事项等，不定时更新:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://hexo.io&#34;&gt;hexo&lt;/a&gt; 安装（含插件）&lt;br&gt;
hexo 是相对比较好的一个静态BLOG生成器，虽然我在&lt;a href=&#34;http://www.raspberrypi.org&#34;&gt;树莓派&lt;/a&gt;上面编译一个nodejs耗时6个多小时，每次hexo -g耗时接近15分钟，但这不影响使用。安装：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  npm install -g hexo    
  npm install hexo-generator-feed    
  npm install hexo-generator-sitemap    
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;python 后台操作git&lt;br&gt;
程序切换的git目录后:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  git_cmd = [&amp;quot;git&amp;quot;, &amp;quot;add&amp;quot;, &amp;quot;./*&amp;quot;]
  ret = subprocess.call(git_cmd)

  git_cmd = [&amp;quot;git&amp;quot;, &amp;quot;commit&amp;quot;, &amp;quot;-m&amp;quot;, &amp;quot;&#39;auto commit&#39;&amp;quot;, &amp;quot;-a&amp;quot;]
  ret = subprocess.call(git_cmd)

  git_cmd = [&amp;quot;git&amp;quot;, &amp;quot;push&amp;quot;]
  ret = subprocess.call(git_cmd)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意，因为提交了后台，使用的不是git clone仓库的那个用户，需要在为具体的git目录添加git信息&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    git config user.email &amp;quot;xxx@xx.xx&amp;quot;
    git config user.name  &amp;quot;xxx&amp;quot;
    git config push.default simple
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;同时需要在运行这个用户的主目录下添加.ssh信息。否则提交不成功&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;路由器登陆&lt;br&gt;
TP-link路由器的登陆使用的是http basic auth。具体是每一次请求，都必须在http头输入http认证信息。http认证方式可参考：&lt;a href=&#34;http://blog.csdn.net/hotnet522/article/details/5824716&#34;&gt;HTTP认证方式&lt;/a&gt;。python 代码:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  req = urllib2.Request(url)
  req.add_header(&amp;quot;Authorization&amp;quot;, &amp;quot;Basic aGVsbG86d29ybGQ=&amp;quot;)
  rsp = urllib2.urlopen(req)
  rsp.close()
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/buf1024/mysch&#34;&gt;mysch&lt;/a&gt; 程序需全路径&lt;br&gt;
mysch是调度监控程序，目前没有流量控制，只有时间控制，调用的程序名需要全路径。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://code.google.com/p/openerdns/&#34;&gt;openerdns&lt;/a&gt;和&lt;a href=&#34;http://www.opendns.com&#34;&gt;Opendns&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  OpenerDNS可实现最简单的翻墙，有时不可用。
  地址: 42.120.21.30  
  OpenDNS不能翻墙。
  地址：  
  208.67.222.222  
  208.67.220.220  
  208.67.222.220  
  208.67.220.222  
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>设置进程的名称</title>
      <link>https://luoguochun.cn/post/2014-07-04-set-proccess-title/</link>
      <pubDate>Fri, 04 Jul 2014 10:27:47 +0000</pubDate>
      
      <guid>https://luoguochun.cn/post/2014-07-04-set-proccess-title/</guid>
      <description>&lt;p&gt;###如何开搞
我们平时ps进程时，显示的进程标题是我们输入的程序名以及一些参数。这种显示方式并非非常直观，我们需要一种方式可以设置程序的标题，一眼就知道该进程时什么鸟。如redis或nginx:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;root      8527     1  0 10:30 ?        00:00:00 nginx: master process nginx    
nginx     8528  8527  0 10:30 ?        00:00:00 nginx: worker process    
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;实现的原理非常简单，我们只需要修改argv[0],说指向的那段内存空间的内容即可。但是为了使程序的正常逻辑不受影响，事先要把原理的内容保存起来，并通过原来的方式可以访问。&lt;br&gt;
argv[0]所指向的的空间是和·enviorn·所指向的内存空间是连续的，在程序启动的时候，系统已经设置好这些空间了。如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://privt-share.qiniudn.com/@/redis/setproctitle.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;那么，1. 我们只需要重新分配空间（不一定是连续的）来存储这些内容，将地址分别复制给&lt;code&gt;argv&lt;/code&gt;或&lt;code&gt;environ&lt;/code&gt;数组，这样原来程序的流程不受影响。2. 我们可以在原&lt;code&gt;agv&lt;/code&gt;最开始的地方和&lt;code&gt;environ&lt;/code&gt;最结尾的地方，随便设置你显示的内容即可，也就是图中&lt;code&gt;./exe&lt;/code&gt;开始的地方和&lt;code&gt;Env5=val5&lt;/code&gt;最后一个0结尾复的地方。只需要注意到，设置的内容必须与0结尾，而且不能超过该内存空间。&lt;/p&gt;
&lt;p&gt;###redis如何实现
redis的实现在&lt;a href=&#34;https://github.com/antirez/redis/blob/2.8.12/src/setproctitle.c&#34;&gt;setproctitle&lt;/a&gt;里面。只是实现有点疑惑：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;argc个数少于argv数组数？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; for (i = 0; i &amp;lt; argc || (i &amp;gt;= argc &amp;amp;&amp;amp; argv[i]); i++) {    
     if (!argv[i] || argv[i] &amp;lt; end)
 	    continue;

     end = argv[i] + strlen(argv[i]) + 1;
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;按照我们一直以来的常识，是通过argc从argv里面取出数据来的，而他这里&lt;code&gt;i &amp;lt; argc || (i &amp;gt;= argc &amp;amp;&amp;amp; argv[i])&lt;/code&gt;这个条件明显就是argc可能会少于argv个数。什么情况下会出现这种情况呢？&lt;br&gt;
2. SPT.nul貌似没有用&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;	if (nul &amp;lt; SPT.nul) {
	    *SPT.nul = &#39;.&#39;;
    } else if (nul == SPT.nul &amp;amp;&amp;amp; &amp;amp;nul[1] &amp;lt; SPT.end) {
	    *SPT.nul = &#39; &#39;;
	    *++nul = &#39;\0&#39;;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这是&lt;code&gt;setproctitle&lt;/code&gt;里面的一个奇怪的逻辑，更本没想到他是干嘛用的。而且貌似SPT.nul在set proc title里面没有什么作用。&lt;/p&gt;
&lt;p&gt;###简单吐槽
虽然redis非常出名，但是redis的代码貌似不是很规范……或者是我们一直接触的就不规范，哈……&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>浮动数与0比较</title>
      <link>https://luoguochun.cn/post/2014-06-28-infinite/</link>
      <pubDate>Sat, 28 Jun 2014 21:40:50 +0000</pubDate>
      
      <guid>https://luoguochun.cn/post/2014-06-28-infinite/</guid>
      <description>&lt;p&gt;###无限大小
C语言如何表示无限大小，NAN？redis里面这么搞的：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;static double R_Zero, R_PosInf, R_NegInf, R_Nan;    
/* Double constants initialization */    
R_Zero = 0.0;    
R_PosInf = 1.0/R_Zero;    
R_NegInf = -1.0/R_Zero;    
R_Nan = R_Zero/R_Zero;    
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;简单测试：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;    
    
int main()    
{    
    static double R_Zero, R_PosInf, R_NegInf, R_Nan;    
    /* Double constants initialization */    
    R_Zero = 0.0;    
    R_PosInf = 1.0/R_Zero;    
    R_NegInf = -1.0/R_Zero;    
    R_Nan = R_Zero/R_Zero;   
    
    printf(&amp;quot;R_Zero  : %lf\n&amp;quot;
           &amp;quot;R_PosInf: %lf\n&amp;quot;
           &amp;quot;R_NegInf: %lf\n&amp;quot;
           &amp;quot;R_Nan   : %lf\n&amp;quot;,
           R_Zero, R_PosInf, R_NegInf, R_Nan);

    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[heidong@HEIDONGVM tmp]$ ./z 
R_Zero  : 0.000000
R_PosInf: inf
R_NegInf: -inf
R_Nan   : -nan
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;果然神奇。&lt;/p&gt;
&lt;h3 id=&#34;浮动数与0比较&#34;&gt;浮动数与0比较 &lt;a href=&#34;#%e6%b5%ae%e5%8a%a8%e6%95%b0%e4%b8%8e0%e6%af%94%e8%be%83&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;大学时候，老师教导我们，浮动数不要与0比较，因为浮点数在计算机里面表示的是近似值。所以如果浮动数要与0做比较就用·&amp;lt; 0.000001·这种龌蹉的方式，明明是0，却要搞个神马0.000001出来。现在我们可以这么来稿了：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;    
    
int main()    
{    
    static double R_Zero, R_PosInf, R_NegInf, R_Nan;    
    /* Double constants initialization */    
    R_Zero = 0.0;    
    R_PosInf = 1.0/R_Zero;    
    R_NegInf = -1.0/R_Zero;    
    R_Nan = R_Zero/R_Zero;   
    
    printf(&amp;quot;R_Zero  : %lf\n&amp;quot;
           &amp;quot;R_PosInf: %lf\n&amp;quot;
           &amp;quot;R_NegInf: %lf\n&amp;quot;
           &amp;quot;R_Nan   : %lf\n&amp;quot;,
           R_Zero, R_PosInf, R_NegInf, R_Nan);

    double a = 1.0;
    double b = 1.0;

    if(a-b == R_NegInf) {
            printf(&amp;quot;%lf - %lf != 0\n&amp;quot;, a, b);
    }else{
            printf(&amp;quot;%lf - %lf == 0\n&amp;quot;, a, b);
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[heidong@HEIDONGVM tmp]$ ./z 
R_Zero  : 0.000000
R_PosInf: inf
R_NegInf: -inf
R_Nan   : -nan
1.000000 - 1.000000 == 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以后就可以用R_NegInf这种方式和0比较了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>c构造函数</title>
      <link>https://luoguochun.cn/post/2014-06-25-c-constructor/</link>
      <pubDate>Wed, 25 Jun 2014 13:00:43 +0000</pubDate>
      
      <guid>https://luoguochun.cn/post/2014-06-25-c-constructor/</guid>
      <description>&lt;h3 id=&#34;构造函数&#34;&gt;构造函数 &lt;a href=&#34;#%e6%9e%84%e9%80%a0%e5%87%bd%e6%95%b0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;任何一们面向对象语言里都会涉及构造函数这一概念，只是实现的方式各有差异。需要这main函数之前执行一段代码是非常容易的事情，只需要声明一对象的全局变量，在构造函数可以为&lt;em&gt;所欲为&lt;/em&gt;干你想干的事情。然而，对于面向过程的语言比如C，需要实现全局的构造函数就比较奇葩。当然gcc会有很优雅的解决方式，VC则猥琐点。&lt;/p&gt;
&lt;h3 id=&#34;为何需要这个&#34;&gt;为何需要这个 &lt;a href=&#34;#%e4%b8%ba%e4%bd%95%e9%9c%80%e8%a6%81%e8%bf%99%e4%b8%aa&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;其实在main函数里面调用一下就可以了，是的，这样是可以，但是对于框架的实现来说，这却是不太好的，客户使用起来不自由。当然也可以说，我是屌丝，我可以装逼点。&lt;/p&gt;
&lt;h3 id=&#34;如何实现&#34;&gt;如何实现 &lt;a href=&#34;#%e5%a6%82%e4%bd%95%e5%ae%9e%e7%8e%b0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;gcc实现&lt;br&gt;
gcc 实现是非常简单的事情。在全局构造函数前叫以下编译器属性即可：&lt;br&gt;
&lt;strong&gt;attribute&lt;/strong&gt;((constructor))&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;vc实现
vc的实现比较奇葩，VC本身没有类似·&lt;strong&gt;attribute&lt;/strong&gt;·这样的属性，你需要将全局函数编译到某个特定的代码段里面。MSDN对于这部分有详细的说明：&lt;a href=&#34;http://msdn.microsoft.com/en-us/library/bb918180.aspx&#34;&gt;CRT Initialization&lt;/a&gt;&lt;br&gt;
简单来说就是将你的全局构造函数的函数指针编译到·.CRT$XCU·段里面。如何编译到·.CRT$XCU·段？VC有VC的语法。&lt;/p&gt;
&lt;p&gt;// 声明在段·.CRT$XCU·里面生成代码 &lt;br&gt;
#pragma section(&amp;quot;.CRT$XCU&amp;quot;,read) &lt;br&gt;
// 声明需要调用的函数 &lt;br&gt;
__declspec(allocate(&amp;quot;.CRT$XCU&amp;quot;)) void (__cdecl *a)(void) = func; &lt;br&gt;
// 调用的函数实现 &lt;br&gt;
void func(void){}&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上实现可以用下面实现：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#ifdef _MSC_VER    
#define __CCALL __cdecl    
#define __func__ __FUNCTION__    
#define snprintf _snprintf    
#pragma warning(disable:4996) // this is very violent    
#pragma section(&amp;quot;.CRT$XCU&amp;quot;,read)
#define __CONSTRCT(a, b)                                             \    
  void __CCALL __##a##__##b##__ ## 520hjm(void);                   \    
  __declspec(allocate(&amp;quot;.CRT$XCU&amp;quot;))                                 \    
  void (__CCALL * __ctor__##a##__##b##__ ## 520hjm)(void) =        \    
  __##a##__##b##__ ## 520hjm;    
#else    
#define __CCALL    
#define __CONSTRCT(a, b) __attribute__((constructor))    
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;额外参考&#34;&gt;额外参考 &lt;a href=&#34;#%e9%a2%9d%e5%a4%96%e5%8f%82%e8%80%83&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;仿照&lt;a href=&#34;https://code.google.com/p/googletest/&#34;&gt;gtest&lt;/a&gt;的简易单元测试&lt;a href=&#34;https://github.com/buf1024/ctest&#34;&gt;ctest&lt;/a&gt;就是用的这方面的知识。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>mschedule 简单linux进程管理（树莓派）</title>
      <link>https://luoguochun.cn/post/2014-05-30-myschd/</link>
      <pubDate>Fri, 30 May 2014 23:28:16 +0000</pubDate>
      
      <guid>https://luoguochun.cn/post/2014-05-30-myschd/</guid>
      <description>&lt;p&gt;树莓派是神奇的机器，CPU和内存都少的可怜，但体积小功耗低，在上面搞些动搞些西其实也挺有意思，挺好玩的。装的是pidara，基本服务没有精简多少，先cat一下CPU和RAM。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    [able@raspi ~]$ cat /proc/cpuinfo 
    Processor       : ARMv6-compatible processor rev 7 (v6l)
    BogoMIPS        : 464.48
    Features        : swp half thumb fastmult vfp edsp java tls 
    CPU implementer : 0x41
    CPU architecture: 7
    CPU variant     : 0x0
    CPU part        : 0xb76
    CPU revision    : 7
    
    Hardware        : BCM2708
    Revision        : 000e
    Serial          : 000000003123ffdc
    [able@raspi ~]$ cat /proc/meminfo 
    MemTotal:         446672 kB
    MemFree:          289976 kB
    Buffers:           16872 kB
    Cached:            65868 kB
    SwapCached:            0 kB
    Active:            88652 kB
    Inactive:          50360 kB
    Active(anon):      58692 kB
    Inactive(anon):      844 kB
    Active(file):      29960 kB
    Inactive(file):    49516 kB
    Unevictable:           0 kB
    Mlocked:               0 kB
    HighTotal:             0 kB
    HighFree:              0 kB
    LowTotal:         446672 kB
    LowFree:          289976 kB
    SwapTotal:        524284 kB
    SwapFree:         524284 kB
    Dirty:                16 kB
    Writeback:             0 kB
    AnonPages:         56284 kB
    Mapped:            16088 kB
    Shmem:              3268 kB
    Slab:               9684 kB
    SReclaimable:       5664 kB
    SUnreclaim:         4020 kB
    KernelStack:         656 kB
    PageTables:         1292 kB
    NFS_Unstable:          0 kB
    Bounce:                0 kB
    WritebackTmp:          0 kB
    CommitLimit:      747620 kB
    Committed_AS:     211148 kB
    VmallocTotal:     565248 kB
    VmallocUsed:        5024 kB
    VmallocChunk:     347144 kB
    [able@raspi ~]$ 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;树莓派可能是为了节省成本，并没有安装时间模块，所以每次开机时间都会被重置。因为很久没有动过电烙铁了，所以没有想过给它装上个硬件模块。
所以想到的方法是同步网络时间。开始的时候，搞个启动脚本，开机启动同步时间，可是每当机器重启时，半个小时都启动不了，而且就算启动了，也没有
同步时间。于是想第二个方法，用根用户的crontab，结果不知道为何，没有同步，crontab执行其他任务是没有问题的，原因还不明。&lt;/p&gt;
&lt;p&gt;另外一个问题，因为树莓派是通过网线连接TP-LINK路由的，同时有个小米盒子连着。小米盒子是个神奇的东西，只有你连接上TP-LINK的路由的，其他
电脑或手机设备就很难连接进去，即使是断开了小米盒子，状况依然无法解决。所以，老妹一看连接不上，就拔电源重启。可以将一些应用程序做成自启动，
可是并不是所有的程序都像nginx一样完善，会切换用户执行。&lt;/p&gt;
&lt;p&gt;还有一个问题，就是有些程序coredump，让它自动重启，系统配置貌似还做不到（可能可以做到）。我还想在树莓派上面跑个DHT爬虫，但DHT爬虫太占
网络了，如果一直开着的话，网络就基本废了。所以我是想在周一到五凌晨才开始运行，到17点就停了，可以配置之类的。&lt;/p&gt;
&lt;p&gt;基于上面种种需求，自己搞了个非常简单管理调度程序，特点：&lt;br&gt;
1. 可以管理三类程序，常驻进程（挂掉会自动重启），一次进程（负责启动，不管是否成  功），优先的一次进程（负责启动，不管是否成功，具有最高优先级，所以程序必须等到此类程序退出后，方启动其他程序）&lt;br&gt;
2. 可以指定运行的用户，必须有相应的权限&lt;br&gt;
3. 常驻进程可以配置运行时间。&lt;/p&gt;
&lt;p&gt;缺点：&lt;br&gt;
1. 没有为每个进程分配优先级&lt;br&gt;
2. 没有设计没有进程的依赖关系&lt;/p&gt;
&lt;p&gt;相关配置文件：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    [nginx@raspi bin]$ cat mysch.conf 
    #程序运行参数
    #程序配置段PROG_LIST配置
    #[NGINX]
    #程序启动的命令
    #RUN_COMMAND=/sbin/ntpdate 1.cn.pool.ntp.org
    #运行该程序的用户组
    #RUN_GROUP=nginx
    #运行该程序的用户
    #RUN_USER=nginx
    #程序运行标志
    # -1 程序启动后先等待其运行完毕方可运行其它程序
    #  0 程序启动后不管其运行状态
    #  1 程序按照RUN_TIME配置时间点运行，非该运行点自动停止通过kill信号
    #RUN_FLAG=1
    #RUN_FLAG=1时有效，程序运行时间段，星期(1-7)，时间格式(24小时)，各条件之间是或关系
    #RUN_TIME=1-5,23:30-16:30|1-5,17:30-21:30|6-7,00:00-8:30
    
    [COMMON]
    #日志路径
    LOG_PATH=/home/nginx/bin/log
    #日志头
    LOG_HEADER=schedule
    #文件日志级别all,debug,info,warn,error,fatal,off
    LOG_LEVEL=debug
    #文件日志缓存,byte
    LOG_BUFFER=102400
    #文件切换时间,秒数
    LOG_SWITCH_TIME=86400
    
    #睡眠时间
    SLEEP_TIME = 60
    #推出时是否退出子程序
    KILL_CHILD_FLAG = 1
    #pid文件后,台执行时有效
    PID_FILE=/home/nginx/bin/log/mysch.pid
    #运行的用户
    RUN_USER=root
    PROG_LIST=NTP|NGINX|BIGFALSE
    
    [NTP]
    RUN_COMMAND=/usr/sbin/ntpdate 1.cn.pool.ntp.org
    RUN_USER=root
    RUN_FLAG=-1
    
    [NGINX]
    RUN_COMMAND=/home/nginx/www/sbin/nginx
    RUN_USER=nginx
    RUN_FLAG=1
    RUN_TIME=1-7,00:00-24:00
    RUN_PID_FILE=/home/nginx/www/logs/nginx.pid
    
    [BIGFALSE]
    RUN_COMMAND=/usr/bin/python /home/nginx/tinytrue/manage.py runfcgi host=127.0.0.1 port=7856 daemonize=true pidfile=/home/nginx/tinytrue/log/django.pid outlog=/home/nginx/tinytrue/log/access.log errlog=/home/nginx/tinytrue/log/error.log
    RUN_USER=nginx
    RUN_FLAG=1
    RUN_TIME=1-7,00:00-24:00
    RUN_PID_FILE=/home/nginx/tinytrue/log/django.pid
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;按照这个配置，运行的程序：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    [nginx@raspi bin]$ p nginx
    root       233     1  0 14:41 ?        00:00:00 /home/nginx/bin/mysch -c /home/nginx/bin/mysch.conf
    nginx      304     1  0 14:42 ?        00:00:00 nginx: master process /home/nginx/www/sbin/nginx
    nginx      305   304  0 14:42 ?        00:00:00 nginx: worker process     
    nginx      307     1  0 14:42 ?        00:00:00 /usr/bin/python /home/nginx/tinytrue/manage.py runfcgi host=127.0.0.1 port=7856 daemonize=true pidfile=/home/nginx/tinytrue/log/django.pid outlog=/home/nginx/tinytrue/log/access.log errlog=/home/nginx/tinytrue/log/error.log
    nginx      308   307  0 14:42 ?        00:00:00 /usr/bin/python /home/nginx/tinytrue/manage.py runfcgi host=127.0.0.1 port=7856 daemonize=true pidfile=/home/nginx/tinytrue/log/django.pid outlog=/home/nginx/tinytrue/log/access.log errlog=/home/nginx/tinytrue/log/error.log
    nginx      309   307  0 14:42 ?        00:00:00 /usr/bin/python /home/nginx/tinytrue/manage.py runfcgi host=127.0.0.1 port=7856 daemonize=true pidfile=/home/nginx/tinytrue/log/django.pid outlog=/home/nginx/tinytrue/log/access.log errlog=/home/nginx/tinytrue/log/error.log
    nginx      310   307  0 14:42 ?        00:00:04 /usr/bin/python /home/nginx/tinytrue/manage.py runfcgi host=127.0.0.1 port=7856 daemonize=true pidfile=/home/nginx/tinytrue/log/django.pid outlog=/home/nginx/tinytrue/log/access.log errlog=/home/nginx/tinytrue/log/error.log
    nginx      311   307  0 14:42 ?        00:00:06 /usr/bin/python /home/nginx/tinytrue/manage.py runfcgi host=127.0.0.1 port=7856 daemonize=true pidfile=/home/nginx/tinytrue/log/django.pid outlog=/home/nginx/tinytrue/log/access.log errlog=/home/nginx/tinytrue/log/error.log
    nginx      312   307  0 14:42 ?        00:00:10 /usr/bin/python /home/nginx/tinytrue/manage.py runfcgi host=127.0.0.1 port=7856 daemonize=true pidfile=/home/nginx/tinytrue/log/django.pid outlog=/home/nginx/tinytrue/log/access.log errlog=/home/nginx/tinytrue/log/error.log
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;相关代码：&lt;br&gt;
&lt;a href=&#34;https://github.com/buf1024/mysch&#34;&gt;https://github.com/buf1024/mysch&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>memcpy造成其他变量值改变</title>
      <link>https://luoguochun.cn/post/2014-04-09-memcpy-error/</link>
      <pubDate>Wed, 09 Apr 2014 19:12:17 +0000</pubDate>
      
      <guid>https://luoguochun.cn/post/2014-04-09-memcpy-error/</guid>
      <description>&lt;p&gt;以前C/C++遇到过很多很多的问题，有时候费了很久很久时间，很大很大的努力才解决。但是都没有记录下来，现在想想以前的遇到的问题，只知道这样的事情发生过，至于是什么问题，一点印象都没有了。所以遇到奇怪的问题，还是记录下来靠谱点。&lt;/p&gt;
&lt;p&gt;背景：&lt;/p&gt;
&lt;p&gt;使用OTL访问ORACLE数据库，在POWER CPU 64位LINUX上面程序看起来运行没有什么异常情况。移植到X86构架的CPU 64位LINUX上面，却发现某条SQL无法执行。初步分析后（分析错误），发觉执行某条SQL后，某变量值莫名其妙变了。发邮件问OTL作者，作者看得也不是很仔细，一时也发现不了什么问题。&lt;/p&gt;
&lt;p&gt;最后继续看几次代码，发现还是自己程序的问题：&lt;/p&gt;
&lt;p&gt;具体如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// wrong:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;memcpy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;usr_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;u_info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;usr_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;usr_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;memcpy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;usr_no&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;u_info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;usr_num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;usr_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;memcpy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bank_acct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rcd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bank_acct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bank_acct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nl&#34;&gt;correct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;memcpy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;usr_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;u_info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;usr_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;usr_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;memcpy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;usr_no&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;u_info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;usr_num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;usr_no&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;memcpy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bank_acct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rcd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bank_acct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bank_acct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;info 和rcd为两个结构体，局部临时变量。由于中间一个memcpy拷贝长度错了，造成其他变量值改变，具体改变情况和CPU构架大小端相关，在POWER CPU上面不出问题纯属侥幸。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>C 简单单元测试框架</title>
      <link>https://luoguochun.cn/post/2014-01-11-ctest/</link>
      <pubDate>Sat, 11 Jan 2014 23:48:14 +0000</pubDate>
      
      <guid>https://luoguochun.cn/post/2014-01-11-ctest/</guid>
      <description>&lt;p&gt;大约2年前，仿照GTEST写了个简单的C++单元测试框架。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://luoguochun.cn/2012/02/09/simple-c++-test-framework/&#34;&gt;https://luoguochun.cn/2012/02/09/simple-c++-test-framework/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;后来用C写后台程序比较多了，C++那个框架却不怎么好用了，于是又写了个C的。&lt;/p&gt;
&lt;p&gt;功能和作用和C++的一模一样，并尽量做到用法和C++的一样。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/buf1024/ctest&#34;&gt;https://github.com/buf1024/ctest&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>gcov 简述</title>
      <link>https://luoguochun.cn/post/2013-05-31-linux-gcov/</link>
      <pubDate>Fri, 31 May 2013 17:08:14 +0000</pubDate>
      
      <guid>https://luoguochun.cn/post/2013-05-31-linux-gcov/</guid>
      <description>&lt;p&gt;代码覆盖率是单元测试的一个指标，通常覆盖率越高，单元测试就做得更完备。（然而，覆盖率是不是和软件质量成正比关系呢？）gcov是GNU工具链中的一个重要的工具，虽然gcov是覆盖率很好的工具，但是gcov的更重要的应用是性能的调优。gcov通过监视程序的执行，从而确定某行代码有没有执行，执行了多少次。gcov的报告是基于文本的格式的，看起来是比较难看点。但是，有个叫lcov的工具，将gcov的报告格式转换为html的直观形式，后面介绍。&lt;/p&gt;
&lt;p&gt;gcov使用：&lt;/p&gt;
&lt;p&gt;如有以下代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;     1:  #include &amp;lt;stdio.h&amp;gt;
     2:   
     3:  void bubbleSort( int list[], int size )
     4:  {
     5:      int i, j, temp, swap = 1;
     6:   
     7:      while (swap) {
     8:   
     9:          swap = 0;
    10:   
    11:          for ( i = (size-1) ; i &amp;gt;= 0 ; i-- ) {
    12:   
    13:              for ( j = 1 ; j &amp;lt;= i ; j++ ) {
    14:   
    15:                  if ( list[j-1] &amp;gt; list[j] ) {
    16:   
    17:                      temp = list[j-1];
    18:                      list[j-1] = list[j];
    19:                      list[j] = temp;
    20:                      swap = 1;
    21:   
    22:                  }
    23:   
    24:              }
    25:   
    26:          }
    27:   
    28:      }
    29:   
    30:   
    31:  }
    32:   
    33:  int main()
    34:  {
    35:      int theList[10]={10, 9, 8, 7, 6, 5, 4, 3, 2, 1};
    36:      int i;
    37:   
    38:      /* Invoke the bubble sort algorithm */
    39:      bubbleSort( theList, 10 );
    40:   
    41:      /* Print out the final list */
    42:      for (i = 0 ; i &amp;lt; 10 ; i++) { 
    43:          printf(&amp;quot;%d\n&amp;quot;, theList[i]);
    44:      }
    45:      if(i == 0){
    46:          printf(&amp;quot;i = 0\n&amp;quot;);
    47:      }else{
    48:          printf(&amp;quot;i != 0\n&amp;quot;);
    49:      }
    50:   
    51:  }
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;编译程序是增加 -ftest-coverage -fprofile-arcs 选项。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; [heidong@HEIDONGVM gcov]$ gcc -o bbsort bbsort.c -ftest-coverage -fprofile-arcs
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;生成.gcno文件。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;执行程序，将生成.gcda文件，用gcov程序检查相应的源代码文件，将生成结果文件。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; [heidong@HEIDONGVM gcov]$ ./bbsort 
 1 
 2 
 3 
 4 
 5 
 6 
 7 
 8 
 9 
 10 
 i != 0 
 [heidong@HEIDONGVM gcov]$ gcov bbsort.c 
 File‘bbsort.c’ 
 已执行的行数：95.24% (共 21 行) 
 bbsort.c：正在创建‘bbsort.c.gcov
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;检查相应的结果文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; [heidong@HEIDONGVM gcov]$ cat bbsort.c.gcov 
         -:    0:Source:bbsort.c
         -:    0:Graph:bbsort.gcno
         -:    0:Data:bbsort.gcda
         -:    0:Runs:1
         -:    0:Programs:1
         -:    1:#include &amp;lt;stdio.h&amp;gt;
         -:    2:
         1:    3:void bubbleSort( int list[], int size )
         -:    4:{
         1:    5:    int i, j, temp, swap = 1;
         -:    6:
         4:    7:    while (swap) {
         -:    8:
         2:    9:        swap = 0;
         -:   10:
        22:   11:        for ( i = (size-1) ; i &amp;gt;= 0 ; i-- ) {
         -:   12:
       110:   13:            for ( j = 1 ; j &amp;lt;= i ; j++ ) {
         -:   14:
        90:   15:                if ( list[j-1] &amp;gt; list[j] ) {
         -:   16:
        45:   17:                    temp = list[j-1];
        45:   18:                    list[j-1] = list[j];
        45:   19:                    list[j] = temp;
        45:   20:                    swap = 1;
         -:   21:
         -:   22:                }
         -:   23:
         -:   24:            }
         -:   25:
         -:   26:        }
         -:   27:
         -:   28:    }
         -:   29:
         -:   30:
         1:   31:}
         -:   32:
         1:   33:int main()
         -:   34:{
         1:   35:    int theList[10]={10, 9, 8, 7, 6, 5, 4, 3, 2, 1};
         -:   36:    int i;
         -:   37:
         -:   38:    /* Invoke the bubble sort algorithm */
         1:   39:    bubbleSort( theList, 10 );
         -:   40:
         -:   41:    /* Print out the final list */
        11:   42:    for (i = 0 ; i &amp;lt; 10 ; i++) { 
        10:   43:        printf(&amp;quot;%d\n&amp;quot;, theList[i]);
         -:   44:    }
         1:   45:    if(i == 0){
     #####:   46:        printf(&amp;quot;i = 0\n&amp;quot;);
         -:   47:    }else{
         1:   48:        printf(&amp;quot;i != 0\n&amp;quot;);
         -:   49:    }
         -:   50:
         1:   51:}
         -:   52:
 [heidong@HEIDONGVM gcov]$
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以看到某行执行了多少次，哪些行没有执行过（####标示）。gcov 还可以检查其他很多的信息，如分支，函数等，详细参考gcov的帮助文档，并测试之。&lt;/p&gt;
&lt;p&gt;对于文本格式，相信很多人的觉得不是很直观，于是便有了lcov这个工具，它可以算是gcov的前端工具，这样生成html文件，可以很直观的看到代码覆盖情况。&lt;/p&gt;
&lt;p&gt;lcov不是标准的unix/linux工具，需要下载，地址是：ltp.sourceforge.net/coverage/lcov.php 注意要FQ才可以访问。&lt;/p&gt;
&lt;p&gt;使用方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;执行完gcov的步骤后，执行下列命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; [heidong@HEIDONGVM gcov]$ lcov --capture --directory ./  --output-file bbsort.info 
 Capturing coverage data from ./ 
 Found gcov version: 4.4.6 
 Scanning ./ for .gcda files ... 
 Found 1 data files in ./ 
 Processing bbsort.gcda 
 Finished .info-file creation
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;生成html文件：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; [heidong@HEIDONGVM gcov]$ genhtml bbsort.info --output-directory ./lcov/ 
 Reading data file bbsort.info 
 Found 1 entries. 
 Found common filename prefix &amp;quot;/home/heidong/tmp&amp;quot; 
 Writing .css and .png files. 
 Generating output. 
 Processing file gcov/bbsort.c 
 Writing directory view page. 
 Overall coverage rate: 
   lines......: 95.2% (20 of 21 lines) 
   functions..: 100.0% (2 of 2 functions
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;看下生成的html文件：
&lt;img src=&#34;https://luoguochun.cn/img/gcov/gcov.jpg&#34; alt=&#34;html report&#34;&gt;&lt;br&gt;
完毕。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Linux pkg-config</title>
      <link>https://luoguochun.cn/post/2013-05-29-linux-pkg-config/</link>
      <pubDate>Wed, 29 May 2013 22:37:14 +0000</pubDate>
      
      <guid>https://luoguochun.cn/post/2013-05-29-linux-pkg-config/</guid>
      <description>&lt;p&gt;pkg-config主要的作用是提供编译和连接到软件库的信息的。&lt;/p&gt;
&lt;p&gt;如，典型的用法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    [heidong@HEIDONGVM bin]$ pkg-config --cflags --libs libevent 
    -I/usr/local/include  -L/usr/local/lib -levent
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;将显示包含头文件和连接的信息。&lt;/p&gt;
&lt;p&gt;那么pkg-config是如何获取得这些信息的呢？&lt;/p&gt;
&lt;p&gt;pkg-config 是从xxx.pc的文件里面取的软件包的信息，如上面的例子，libevent.pc&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    [heidong@HEIDONGVM bin]$ cat /usr/local/lib/pkgconfig/libevent.pc 
    #libevent pkg-config source file
    
    prefix=/usr/local 
    exec_prefix=${prefix} 
    libdir=${exec_prefix}/lib 
    includedir=${prefix}/include
    
    Name: libevent 
    Description: libevent is an asynchronous notification event loop library 
    Version: 2.0.17-stable 
    Requires: 
    Conflicts: 
    Libs: -L${libdir} -levent 
    Libs.private: -lrt 
    Cflags: -I${includedir}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可见，pkg-config里面主要包含了包含头文件，连接库的信息。在本例子中，Requires就空的，如果非空，cfalgs, libs将添加相应的依赖项。&lt;/p&gt;
&lt;p&gt;那么pkg-config是从哪里搜索这些文件的呢？&lt;/p&gt;
&lt;p&gt;首先pkg-config会从自己标准的搜索目录（如/usr/lib/pkgconfig/）和PKG_CONFIG_PATH环境变量目录寻找。&lt;br&gt;
如果寻找不到，会输出这样的信息：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    [heidong@HEIDONGVM bin]$ pkg-config --libs qt 
    Package qt was not found in the pkg-config search path. 
    Perhaps you should add the directory containing `qt.pc&#39; 
    to the PKG_CONFIG_PATH environment variable 
    No package &#39;qt&#39; found
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可见pkg-config对减轻编程人员的工作负荷有一定的帮助。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Linux -- rpm</title>
      <link>https://luoguochun.cn/post/2012-09-18-linux-rpm/</link>
      <pubDate>Tue, 18 Sep 2012 23:48:14 +0000</pubDate>
      
      <guid>https://luoguochun.cn/post/2012-09-18-linux-rpm/</guid>
      <description>&lt;p&gt;rpm是redhat（系列）系统软件安装，管理的工具。相对于针对仓库而言的yum，rpm是针对单个软件包的。通常情况下Linux发布软件是通过源代码方式，一般情况下就是对源码./configure, make,make install。除了这种方式外，比较常用的就是rpm包，它则可提供完整的已经编译好的二进制程序或者其它东西（帮助文件，源码等）。这里不说.deb。&lt;/p&gt;
&lt;p&gt;rpm的使用不说，直接看帮助，常用的就是-qa, -e，-ivh等几个选项。&lt;/p&gt;
&lt;p&gt;下面说说rpm包的制作（在制作过程中发现并不是那么顺利，还不如用源代码方式发布），制作是用rmpbuild这个命令完成的。这里仅说下简单的制作以供以后参考。&lt;/p&gt;
&lt;p&gt;rpm包的结构一般为: name-version-release.architecture.rpm&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;name-version-release&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;命名版本号之类的，如MySQL-server-5.0.i386.rpm&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;architecture&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;适用的结构，如i386, i686, x86_64, noarch&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;RPM系统要求有以下几个文件夹（如果是安装系统的时候安装了rmpbuild, 则在redhat系列是在/usr/src/redhat, 如果自行安装的话，可能在你的主目录的rpbbuild的目录下面）。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;BUILD&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;rpmbuild在此目录构建软件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RPMS&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;rmpbuild存储生成的二进制rpm文件目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SOURCES&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;所要构建软件的源码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SPECS&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;SPECS文件所在的目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SRPMS&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;rmpbuild存储生成的src rpm包的目录&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;rpmbuild最重要的是书写SPECS文件，写好的specs文件丢到SPECS目录(也可以不用)。SPECS比较烦琐，下面列出一些常用的，但不完全（#开头表示注释）。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Summary&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;软件包简要的描述&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Name&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;软件包名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Version&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;软件包定义的版本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Release&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;软件包发布版本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;License&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;软件包许可&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Group&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;软件包分类（在GNOME应用程序可看到）如Applications/Media&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Source&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;软件包源码下载地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;URL&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;源码相关网站&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Distribution&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;发行版系列&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Packager&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;打包人的信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Requires&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;如 mysql &amp;gt;= 3.30 或者 mysql&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sources&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;源码tar包，可以这样设置为通用的:%{name}-%{version}.tar.gz&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Buildroot&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;rmpbuild的暂存区，可以设置为通用的:%{_tmppath}/%{name}-%{version}-root&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%description&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;软件详细描述，可多行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%prep&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;软件编译之前的处理，如解压&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%setup&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;不知道什么用，不过通常在%prep下面%setup -q&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%build&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;开始编译软件，如make&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%install&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;开始安装软件，如make install&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%makeinstall&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;调用Makefiel的make install&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%clean&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;rmpbuild的clean命令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%post&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;rmpbuild构建完成的命令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%files&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;要打包的文件&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;如果用VIM新建.spec文件，在新建的时候会弹出相应的模板给你填，这个不错。&lt;/p&gt;
&lt;p&gt;rmpbuild的编译选项大致有下面几种类型：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-ba&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;构建所有的东西，包含二进制和源码的RPM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-bb&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;构建二进制的RPM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-bc&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;构建（编译）程序，但不生成RPM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-bp&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;准备构建RPM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-bi&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;构建二进制的RPM并安装之&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-bl&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;检查RPM文件列表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-bs&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;构建源码的RPM&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;一人简单的例子：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    Name:           jmm
    Version:        1.0
    Release:        1
    Summary:        Process pool server
    
    Group:          Applications/Internet
    License:        LGPL 2.0
    URL:            www.google.com
    Source0:        jmm-1.0.tar.gz
    BuildRoot:      %(mktemp -ud %{_tmppath}/%{name}-%{version}-%{release}-XXXXXX)
    
    #BuildRequires:
    #Requires:       libevent &amp;gt;= 2.0
    
    %description
    Process pool server base on libevent
    
    
    %prep
    %setup -q
    
    %build
    make
    
    %install
    mkdir -p %{buildroot}/usr/local/bin
    #make install DESTDIR=%{buildroot}
    install -m755 jmm %{buildroot}/usr/local/bin/jmm
    
    %clean
    rm -rf %{buildroot}
    
    
    %files
    /usr/local/bin/jmm
    #%defattr(-,root,root,-)
    #%doc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我的机子是x86_64的，在我机子上运行rmpbuil –ba jmm.spec将在RPMS目录生成x86_64/jmm-1.0-1.x86_68.rpm，在SRPMS目录生成jmm-1.0-1.src.rpm。&lt;br&gt;
要注意一点的就是%files下面的文件是要写buildroot下面的文件。&lt;br&gt;
查看刚才编译的文件信息（PS这个东西是要libevent2的所以，如果安装的话，是会失败的）：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    [heidong@CLOUD x86_64]$ rpm -qpi jmm-1.0-1.x86_64.rpm    
    Name        : jmm                          Relocations: (not relocatable)
    Version     : 1.0                               Vendor: (none)
    Release     : 1                             Build Date: Thu Sep 13 07:07:07 2012
    Install Date: (not installed)               Build Host: CLOUD.NODE.0
    Group       : Applications/Internet         Source RPM: jmm-1.0-1.src.rpm
    Size        : 45357                            License: LGPL 2.0
    Signature   : (none)
    URL         : www.google.com
    Summary     : Process pool server
    Description :
    Process pool server base on libevent
    [heidong@CLOUD x86_64]$ rpm -qpl jmm-1.0-1.x86_64.rpm   
    /usr/local/bin/jmm
    [heidong@CLOUD x86_64]$
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查看源RPM的信息：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    [heidong@CLOUD SRPMS]$ rpm -qpi jmm-1.0-1.src.rpm           
    Name        : jmm                          Relocations: (not relocatable)
    Version     : 1.0                               Vendor: (none)
    Release     : 1                             Build Date: Thu Sep 13 07:07:07 2012
    Install Date: (not installed)               Build Host: CLOUD.NODE.0
    Group       : Applications/Internet         Source RPM: (none)
    Size        : 17198                            License: LGPL 2.0
    Signature   : (none)
    URL         : www.google.com
    Summary     : Process pool server
    Description :
    Process pool server base on libevent
    [heidong@CLOUD SRPMS]$ rpm -qpl jmm-1.0-1.src.rpm   
    jmm-1.0.tar.gz
    jmm.spec
    [heidong@CLOUD SRPMS]$ 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;关于源RPM的安装，与编译好的二进制文件不一样，源RPM是要编译的。一般是包含压缩包和SPEC文件。安装后，源码文件是在SOURCE目录，SPEC文件是在SPEC目录。要进得编译方可得到二进制RPM包。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Linux -- yum</title>
      <link>https://luoguochun.cn/post/2012-09-13-linux-yum/</link>
      <pubDate>Thu, 13 Sep 2012 20:10:10 +0000</pubDate>
      
      <guid>https://luoguochun.cn/post/2012-09-13-linux-yum/</guid>
      <description>&lt;p&gt;Red Hat/CentOS/SuSE等都是采用RPM或者基于RPM的软件包来安装的。而yum则可以认为是rpm的软件仓库。大致的命令如下（前面加*表示比较常用）：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;check&lt;/th&gt;
&lt;th&gt;检查rpmdb有没问题的&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;check-update&lt;/td&gt;
&lt;td&gt;检查软件包有没可更新的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;clean&lt;/td&gt;
&lt;td&gt;删除缓存数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;deplist&lt;/td&gt;
&lt;td&gt;看软件依赖性&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;distribution-synchronization&lt;/td&gt;
&lt;td&gt;同步到最新版本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;downgrade&lt;/td&gt;
&lt;td&gt;恢复到之前版本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*erase&lt;/td&gt;
&lt;td&gt;缷载软件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;groupinfo&lt;/td&gt;
&lt;td&gt;一组软件信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;groupinstall&lt;/td&gt;
&lt;td&gt;一组软件安装&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;grouplist&lt;/td&gt;
&lt;td&gt;查看一组软件所包含的各软件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;groupremove&lt;/td&gt;
&lt;td&gt;缷载一组软件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*help&lt;/td&gt;
&lt;td&gt;显示帮助信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;history&lt;/td&gt;
&lt;td&gt;显示历史信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*info&lt;/td&gt;
&lt;td&gt;显示软件信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*install&lt;/td&gt;
&lt;td&gt;安装软件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*list&lt;/td&gt;
&lt;td&gt;列出仓库的软件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;load-transaction&lt;/td&gt;
&lt;td&gt;从文件加载事务信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;makecache&lt;/td&gt;
&lt;td&gt;生成缓存信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*provides&lt;/td&gt;
&lt;td&gt;查看什么软件包提供这样的命令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;reinstall&lt;/td&gt;
&lt;td&gt;重新安装&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;repolist&lt;/td&gt;
&lt;td&gt;列出配置的仓库&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;resolvedep&lt;/td&gt;
&lt;td&gt;列出解决依赖的软件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*search&lt;/td&gt;
&lt;td&gt;查找软件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;shell&lt;/td&gt;
&lt;td&gt;运行yum shell&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*update&lt;/td&gt;
&lt;td&gt;更新软件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;upgrade&lt;/td&gt;
&lt;td&gt;不知道有什么用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;version&lt;/td&gt;
&lt;td&gt;显示版本信息&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre&gt;&lt;code&gt;   yum的配置文件放/etc/yum.conf。对于自己的或者第三方的仓库，可以将配置写到该文件或者放到/etc/yum.repos.d的目录里，并且文件以.repo为结尾。

  自带仓库的类型：
&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;[base]&lt;/th&gt;
&lt;th&gt;这里提供的和iso基本上一致的软件&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;[updates]&lt;/td&gt;
&lt;td&gt;这里提供的和iso基本上一致的软件更新&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[extras]&lt;/td&gt;
&lt;td&gt;额外的软件仓库&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[centosplus]&lt;/td&gt;
&lt;td&gt;和[centosplus]类似&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[contrib]&lt;/td&gt;
&lt;td&gt;社区贡献的软件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[addons]&lt;/td&gt;
&lt;td&gt;要从RPM编译的仓库&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[testing]&lt;/td&gt;
&lt;td&gt;不稳定软件的仓库&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre&gt;&lt;code&gt;   每个仓库下面的配置：
&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;名字&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;mirrorlist&lt;/td&gt;
&lt;td&gt;从镜像列表中返回的URL作为仓库地地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;baseurl&lt;/td&gt;
&lt;td&gt;仓库URL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gpgcheck&lt;/td&gt;
&lt;td&gt;是否检查GPG&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;enabled&lt;/td&gt;
&lt;td&gt;是否允许&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gpgkey&lt;/td&gt;
&lt;td&gt;GPG KEY的URL&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;明天玩下RPM。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>基于libevent进程池服务器</title>
      <link>https://luoguochun.cn/post/2012-06-23-proccess-pool-server/</link>
      <pubDate>Sat, 23 Jun 2012 11:08:14 +0000</pubDate>
      
      <guid>https://luoguochun.cn/post/2012-06-23-proccess-pool-server/</guid>
      <description>&lt;p&gt;本程序仅是为了学习libevent而写的，但可以当作是简单的程序框架扩展为实际的应用。程序本身没有经过广泛的功能测试和压力测试，仅作简单的功能测试，如果在实际应用中产生任何问题与作者无关，也不提供任何技术支持。但欢迎讨论相关技术问题。&lt;/p&gt;
&lt;p&gt;本程序设计思路很简单，一个控制进程，M个业务进程（M可以配置），其中一个业务进程又负责N个TCP连接（N可以配置，因为是在同一个进程内，又没有用于线程，所以从本质来说，还是属于同步传输数据的）。控制进程负责监听连接，当接收到一个TCP连接的时候，按照一定的规则分发到空闲的业务进程中。每个业务进程就负责处理各个分配到的连接，接收到数据后又分发到业务模块，业务模块是可以根据实际的需要扩展的（本程序中则是一个回射服务器的）。&lt;/p&gt;
&lt;p&gt;这个程序且叫一个名字：jmm。下载：&lt;a href=&#34;https://github.com/buf1024/jmm/archive/jmm-1.0.0.zip&#34;&gt;jmm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;压缩包里一些特别的文件介绍。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;文件名&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Makefile&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Makefile 文件。如果是扩展应用，则修改第6行 &amp;lt;&amp;gt;JMM_MY_OBJ=myserver.o 改为自己的要编译的文件即可。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;jmm.conf&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;一个简单的配置。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;myserver.c&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;业务实现模块。这个就是简单的回射而已。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;jmm_cmmhdr.h&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;对外提供的扩展程序的头文件，包含一些常量的定义。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;jmm.h&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;对外提供的扩展程序的头文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;clog.h &lt;!-- raw HTML omitted --&gt;clog.c&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;简单的日志处理模块。可独立应用于任何应用程序。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ciniconfig.h &lt;!-- raw HTML omitted --&gt;ciniconfig.c&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;简单的读取INI配置文件的模块。可独立应用于任何应用程序。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;编译说明：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装libevent. 下载地址：&lt;a href=&#34;www.libevent.org&#34;&gt;libevent.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;建立文件夹mkdir conf log bin&lt;/li&gt;
&lt;li&gt;最后make可以了。&lt;/li&gt;
&lt;li&gt;如果会Makefile直接看Makefile&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;扩展说明：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    typedef struct jmm_hook 
    { 
    const char* (*prog_name)(); 
    const char* (*prog_version)(); 
    const char* (*prog_desc)();
    
    int (*prog_init)(char*); 
    int (*prog_service)(jmm_prog_in*, jmm_prog_out*); 
    int (*prog_uninit)();
    
    void* (*prog_malloc)(size_t); // sys/types.h 
    void (*prog_free)(void*);
    
    }jmm_hook;
    
    typedef void (*prog_init_hook)(jmm_hook* hook);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;除了分配内存的那个外，提供其它所有函数的实现。&lt;/p&gt;
&lt;p&gt;用REG_INIT_HOOK_FUN(myserver_init_hook)注册回调函数。&lt;/p&gt;
&lt;p&gt;参考myserver.c&lt;/p&gt;
&lt;p&gt;烦躁，不写了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>sys/queue.h</title>
      <link>https://luoguochun.cn/post/2012-05-02-sys-queue-h/</link>
      <pubDate>Wed, 02 May 2012 21:08:14 +0000</pubDate>
      
      <guid>https://luoguochun.cn/post/2012-05-02-sys-queue-h/</guid>
      <description>&lt;h3 id=&#34;概述&#34;&gt;概述 &lt;a href=&#34;#%e6%a6%82%e8%bf%b0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;sys/queue.h是LINUX/UNIX系统下面的一个标准头文件，用一系列的数据结构定义了一队列。包括singly-lined list, list, simple queue(Singly-linked Tail queue), tail queue, circle queue五种。&lt;/p&gt;
&lt;p&gt;引用此头文件对这五种数据结构的描述：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A singly-linked list is headed by a single forward pointer. The
elements are singly linked for minimum space and pointer manipulation
overhead at the expense of O(n) removal for arbitrary elements. New
elements can be added to the list after an existing element or at the
head of the list.  Elements being removed from the head of the list
should use the explicit macro for this purpose for optimum
efficiency. A singly-linked list may only be traversed in the forward
direction.  Singly-linked lists are ideal for applications with large
datasets and few or no removals or for implementing a LIFO queue.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A list is headed by a single forward pointer (or an array of forward
pointers for a hash table header). The elements are doubly linked
so that an arbitrary element can be removed without a need to
traverse the list. New elements can be added to the list before
or after an existing element or at the head of the list. A list
may only be traversed in the forward direction.&lt;/p&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;A simple queue is headed by a pair of pointers, one the head of the
list and the other to the tail of the list. The elements are singly
linked to save space, so elements can only be removed from the
head of the list. New elements can be added to the list after
an existing element, at the head of the list, or at the end of the
list. A simple queue may only be traversed in the forward direction.&lt;/p&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;A tail queue is headed by a pair of pointers, one to the head of the
list and the other to the tail of the list. The elements are doubly
linked so that an arbitrary element can be removed without a need to
traverse the list. New elements can be added to the list before or
after an existing element, at the head of the list, or at the end of
the list. A tail queue may be traversed in either direction.&lt;/p&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;A circle queue is headed by a pair of pointers, one to the head of the
list and the other to the tail of the list. The elements are doubly
linked so that an arbitrary element can be removed without a need to
traverse the list. New elements can be added to the list before or after
an existing element, at the head of the list, or at the end of the list.
A circle queue may be traversed in either direction, but has a more
complex end of list detection.&lt;/p&gt;
&lt;p&gt;简单来说，即是单链表，双链表，单链队列，双向队列（尾队列）和双向循环队列。&lt;/p&gt;
&lt;p&gt;虽然这是LINUX/UNIX里面的文件，但此文件本身没有用到LINUX/UNIX的系统特性，因而可以跨平台使用。&lt;/p&gt;
&lt;p&gt;下面对各数据结构简单描述之。&lt;/p&gt;
&lt;h3 id=&#34;单链表singly-linked-list&#34;&gt;单链表(singly-linked list) &lt;a href=&#34;#%e5%8d%95%e9%93%be%e8%a1%a8singly-linked-list&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;singly-linked list就是一单链表。&lt;/p&gt;
&lt;p&gt;singly-linked list相关的定义：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;宏定义&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;SLIST_HEAD(name, type)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;定义表头结点。 &lt;!-- raw HTML omitted --&gt;name: 表头结点名。&lt;!-- raw HTML omitted --&gt;type: 结点类型。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SLIST_HEAD_INITIALIZER(head)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;初始化头结点。 &lt;!-- raw HTML omitted --&gt;head: 表头结点。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SLIST_ENTRY(type)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;定义链表的链域。&lt;!-- raw HTML omitted --&gt;type: 结点类型。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;singly-linked list函数：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;宏定义&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;SLIST_INIT(head)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;初始化头结点。 &lt;!-- raw HTML omitted --&gt;head: 表头结点。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SLIST_INSERT_AFTER(slistelm, elm, field)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;将结点elm插入到结点slistelm后面。 &lt;!-- raw HTML omitted --&gt;slistelm：链表中某结点。 &lt;!-- raw HTML omitted --&gt;elm:要插入的结点。 &lt;!-- raw HTML omitted --&gt;field:链表中链域的名称。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SLIST_INSERT_HEAD(head, elm, field)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;将结点elm插入到头结点head后面。 &lt;!-- raw HTML omitted --&gt;head: 表头结点。&lt;!-- raw HTML omitted --&gt;elm:要插入的结点。&lt;!-- raw HTML omitted --&gt;field:链表中链域的名称。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SLIST_REMOVE_HEAD(head, field)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;移除将表头结点下面一个结点。 &lt;!-- raw HTML omitted --&gt;head: 表头结点。 &lt;!-- raw HTML omitted --&gt;field:链表中链域的名称。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SLIST_REMOVE(head, elm, type, field)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;移除将elm结点，elm结点一定要是链表中一结点。 &lt;!-- raw HTML omitted --&gt;head: 表头结点。 &lt;!-- raw HTML omitted --&gt;elm:某结点。 &lt;!-- raw HTML omitted --&gt;type: 结点类型。 &lt;!-- raw HTML omitted --&gt;field:链表中链域的名称。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SLIST_FOREACH(var, head, field)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;遍历链表，相当于for循环。 &lt;!-- raw HTML omitted --&gt;var: 结点类型的变量名称。 &lt;!-- raw HTML omitted --&gt;head: 表头结点。 &lt;!-- raw HTML omitted --&gt;field:链表中链域的名称。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;singly-linked list 访问方法：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;宏定义&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;SLIST_EMPTY(head)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;判断链表是否为空。 &lt;!-- raw HTML omitted --&gt;head: 表头结点。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SLIST_FIRST(head)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;访问链表里的第一个元素。 &lt;!-- raw HTML omitted --&gt;head: 表头结点。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SLIST_NEXT(elm, field)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;访问elm结点后一个元素。 &lt;!-- raw HTML omitted --&gt;elm:某结点。 &lt;!-- raw HTML omitted --&gt;field:链表中链域的名称。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;简单例子：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    struct SListItem
    {
        int data;
        SLIST_ENTRY(SListItem) entry;
    };
    /*
     struct SListItem
     {
        int data;
        struct {
            struct SListItem* sle_next;
        } entry;
     }
     */
    void slist_demo()
    {
        struct SListItem* item = NULL;
        SLIST_HEAD(SListHead, SListItem) shead;
        /*
         struct SListHead {
             struct SListItem* slh_first;
         } shead;
         */
        SLIST_INIT(&amp;amp;shead);
    
        item = (struct SListItem*)malloc(sizeof(struct SListItem));
        item-&amp;gt;data = 1;
    
        SLIST_INSERT_HEAD(&amp;amp;shead, item, entry);
        /*
         item-&amp;gt;entry.sle_next = (&amp;amp;shead)-&amp;gt;slh_first;
         (&amp;amp;shead)-&amp;gt;slh_first = item;
         */
    
        item = (struct SListItem*)malloc(sizeof(struct SListItem));
        item-&amp;gt;data = 2;
    
        SLIST_INSERT_HEAD(&amp;amp;shead, item, entry);
        /*
         item-&amp;gt;entry.sle_next = (&amp;amp;shead)-&amp;gt;slh_first;
         (&amp;amp;shead)-&amp;gt;slh_first = item;
         */
    
        SLIST_FOREACH(item, &amp;amp;shead, entry){
            printf(&amp;quot;%d &amp;quot;, item-&amp;gt;data);
        }
        /*
         for(item = (&amp;amp;shead)-&amp;gt;slh_first; item; item = item-&amp;gt;entry.sle_next){
            ...
         }
         */
        printf(&amp;quot;\n&amp;quot;);
    
        while(!SLIST_EMPTY(&amp;amp;shead)){
            item = SLIST_FIRST(&amp;amp;shead);
            printf(&amp;quot;remove %d\n&amp;quot;, item-&amp;gt;data);
            SLIST_REMOVE(&amp;amp;shead, item, SListItem, entry);
            free(item);
        }
        /*
         while(!((&amp;amp;shead)-&amp;gt;slh_first == NULL)){
             item = (&amp;amp;shead)-&amp;gt;slh_first;
             ...
             (&amp;amp;shead)-&amp;gt;slh_first = (&amp;amp;shead)-&amp;gt;slh_first-&amp;gt;entry.sle_next;
             ...
         }
         */
    }
    /*结果
    2 1
    remove 2
    remove 1
    */
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;双向链表list&#34;&gt;双向链表(list) &lt;a href=&#34;#%e5%8f%8c%e5%90%91%e9%93%be%e8%a1%a8list&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;list就是双向链表，不过链域有点古怪，指向前一个结点是指针的指针。&lt;br&gt;
list 相关定义&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;宏定义&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;LIST_HEAD(name, type)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;定义表头结点。 &lt;!-- raw HTML omitted --&gt;name: 表头结点名。 &lt;!-- raw HTML omitted --&gt;type: 结点类型。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LIST_HEAD_INITIALIZER(head)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;初始化头结点。 &lt;!-- raw HTML omitted --&gt;head: 表头结点。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LIST_ENTRY(type)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;定义链表的链域。 &lt;!-- raw HTML omitted --&gt;type: 结点类型。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;list函数&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;宏定义&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;LIST_INIT(head)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;初始化头结点。 &lt;!-- raw HTML omitted --&gt;head: 表头结点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LIST_INSERT_AFTER(listelm, elm, field)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;将结点elm插入到结点listelm后面。 &lt;!-- raw HTML omitted --&gt;listelm：链表中某结点。 &lt;!-- raw HTML omitted --&gt;elm:要插入的结点。 &lt;!-- raw HTML omitted --&gt;field:链表中链域的名称。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LIST_INSERT_BEFORE(listelm, elm, field)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;将结点elm插入到结点listelm前面。 &lt;!-- raw HTML omitted --&gt;listelm：链表中某结点。 &lt;!-- raw HTML omitted --&gt;elm:要插入的结点。 &lt;!-- raw HTML omitted --&gt;field:链表中链域的名称。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LIST_INSERT_HEAD(head, elm, field)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;将结点elm插入到头结点head后面。 &lt;!-- raw HTML omitted --&gt;head: 表头结点。 &lt;!-- raw HTML omitted --&gt;elm:要插入的结点。 &lt;!-- raw HTML omitted --&gt;field:链表中链域的名称。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LIST_REMOVE(elm, field)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;移除将elm结点。 &lt;!-- raw HTML omitted --&gt;elm:某结点。 &lt;!-- raw HTML omitted --&gt;field:链表中链域的名称。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LIST_FOREACH(var, head, field)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;遍历链表，相当于for循环。 &lt;!-- raw HTML omitted --&gt;var: 结点类型的变量名称。 &lt;!-- raw HTML omitted --&gt;head: 表头结点。 &lt;!-- raw HTML omitted --&gt;field:链表中链域的名称。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;list访问方法&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;宏定义&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;LIST_EMPTY(head)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;判断链表是否为空。 &lt;!-- raw HTML omitted --&gt;head: 表头结点。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LIST_FIRST(head)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;访问链表里的第一个元素。 &lt;!-- raw HTML omitted --&gt;head: 表头结点。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LIST_NEXT(elm, field)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;访问elm结点后一个元素。 &lt;!-- raw HTML omitted --&gt;elm:某结点。 &lt;!-- raw HTML omitted --&gt;field:链表中链域的名称。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/em&gt;，因为list是双向链表，但在访问方法里没有写出访问前一个元素的宏。因而可以这样写一个，参数含义和LIST_NEXT一样：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   #define LIST_PRE(elm, field) \
   (((elm)-&amp;gt;field.le_pre) != &amp;amp;elm ? *((elm)-&amp;gt;field.le_pre) : NULL)  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;简单例子:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   struct ListItem
   {
       int data;
       LIST_ENTRY(ListItem) entry;
   };
   /*
   struct ListItem
   {
       int data;
       struct{
           struct ListItem* le_next;
           struct ListItem** le_prev;
       } entry;
   };
   */
   void list_demo()
   {
       struct ListItem* item = NULL;
       
       LIST_HEAD(ListHead, ListItem) lhead;
       /*
       struct ListHead {
           struct ListItem* lh_first;
       } lhead;
       */
       LIST_INIT(&amp;amp;lhead);
       /*
       do{
            (&amp;amp;lhead)-&amp;gt;lh_first = NULL;
       }while(0);
       */
   
       item = (struct ListItem*)malloc(sizeof(struct ListItem));
       item-&amp;gt;data = 1;
   
       LIST_INSERT_HEAD(&amp;amp;lhead, item, entry);
       
       item = (struct ListItem*)malloc(sizeof(struct ListItem));
       item-&amp;gt;data = 2;
       
       LIST_INSERT_HEAD(&amp;amp;lhead, item, entry);
       /*
       do{
           if(((item)-&amp;gt;entry.le_next = (&amp;amp;lhead)-&amp;gt;lh_first) != NULL)
               (&amp;amp;lhead)-&amp;gt;lh_first-&amp;gt;entry.le_pre = &amp;amp;(elm)-&amp;gt;entry.le_next;
           (&amp;amp;lhead)-&amp;gt;lh_first = (item);
           (item)-&amp;gt;entry.le_prev = &amp;amp;(&amp;amp;lhead)-&amp;gt;lh_first;
       }while(0);
       */
       LIST_FOREACH(item, &amp;amp;lhead, entry){
           printf(&amp;quot;%d &amp;quot;, item-&amp;gt;data);
       }
       /*
       for ((item) = ((&amp;amp;lhead)-&amp;gt;lh_first);
           (item);
           (item) = ((item)-&amp;gt;entry.le_next)){
           ...
       }    
       */
       printf(&amp;quot;\n&amp;quot;);
   
       while(!LIST_EMPTY(&amp;amp;lhead)){
           item = LIST_FIRST(&amp;amp;lhead);
           printf(&amp;quot;remove %d\n&amp;quot;, item-&amp;gt;data);
           LIST_REMOVE(item, entry);
           free(item);
       }
       /*
       while(!((&amp;amp;lhead)-&amp;gt;lh_first == NULL)){
           item = ((&amp;amp;lhead)-&amp;gt;lh_first);
           ...
           do{
             if ((item)-&amp;gt;entry.le_next != NULL)                \
               (item)-&amp;gt;entry.le_next-&amp;gt;entry.le_prev =             \
                   (item)-&amp;gt;entry.le_prev;                \
             *(item)-&amp;gt;entry.le_prev = (item)-&amp;gt;entry.le_next;            \
           } while (0);
           ...
       }
       */
   }
   /*
   结果
   2 1
   remove 2
   remove 1
   */
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;简单队列simple-queue&#34;&gt;简单队列(simple queue) &lt;a href=&#34;#%e7%ae%80%e5%8d%95%e9%98%9f%e5%88%97simple-queue&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;简单来说，就是表对有两个链域，分别指向头和尾。&lt;br&gt;
simple queue 定义（具体说明不再写，可以参考list的，或者就直接展开宏）&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;宏定义&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;SIMPLEQ_HEAD(name, type)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SIMPLEQ_HEAD_INITIALIZER(head)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SIMPLEQ_ENTRY(type)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;simple queue函数（具体说明不再写，可以参考list的，或者就直接展开宏）&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;宏定义&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;SIMPLEQ_INIT(head)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SIMPLEQ_INSERT_HEAD(head, elm, field)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SIMPLEQ_INSERT_TAIL(head, elm, field)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SIMPLEQ_INSERT_AFTER(head, listelm, elm, field)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SIMPLEQ_REMOVE_HEAD(head, field)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SIMPLEQ_REMOVE(head, elm, type, field)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SIMPLEQ_FOREACH(var, head, field)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;simple queue方法（具体说明不再写，可以参考list的，或者就直接展开宏）&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;宏定义&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;SIMPLEQ_EMPTY(head)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SIMPLEQ_FIRST(head)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SIMPLEQ_NEXT(elm, field)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;简单例子：&lt;br&gt;
用法与list用法类似，不再重复。&lt;/p&gt;
&lt;h3 id=&#34;单链尾队列singled-linked-tail-queue&#34;&gt;单链尾队列(singled-linked tail queue) &lt;a href=&#34;#%e5%8d%95%e9%93%be%e5%b0%be%e9%98%9f%e5%88%97singled-linked-tail-queue&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;这个和Simple queue是一样的，参考simple queue&lt;br&gt;
singled-linked tail queue定义(具体说明不再写，可以参考list的，或者就直接展开宏)&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;宏定义&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;STAILQ_HEAD(name, type)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;STAILQ_HEAD_INITIALIZER(head)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;STAILQ_ENTRY(type)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;tail queue 函数（具体说明不再写，可以参考list的，或者就直接展开宏）&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;宏定义&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;STAILQ_INIT(head)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;STAILQ_INSERT_HEAD(head, elm, field)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;STAILQ_INSERT_TAIL(head, elm, field)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;STAILQ_INSERT_AFTER(head, listelm, elm, field)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;STAILQ_REMOVE_HEAD(head, field)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;STAILQ_REMOVE(head, elm, type, field)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;STAILQ_FOREACH(var, head, field)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;tail queue方法（具体说明不再写，可以参考list的，或者就直接展开宏）&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;宏定义&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;STAILQ_EMPTY(head)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;STAILQ_FIRST(head)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;STAILQ_NEXT(elm, field)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;简单例子：&lt;br&gt;
用法与list用法类似，不再重复。&lt;/p&gt;
&lt;h3 id=&#34;循环队列circle-queue&#34;&gt;循环队列(circle queue) &lt;a href=&#34;#%e5%be%aa%e7%8e%af%e9%98%9f%e5%88%97circle-queue&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;循环队列。&lt;br&gt;
circle queue定义（具体说明不再写，可以参考list的，或者就直接展开宏）&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;宏定义&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CIRCLEQ_HEAD(name, type)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CIRCLEQ_HEAD_INITIALIZER(head)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CIRCLEQ_ENTRY(type)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;circle queue函数（具体说明不再写，可以参考list的，或者就直接展开宏）&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;宏定义&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CIRCLEQ_INIT(head)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CIRCLEQ_INSERT_AFTER(head, listelm, elm, field)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CIRCLEQ_INSERT_BEFORE(head, listelm, elm, field)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CIRCLEQ_INSERT_HEAD(head, elm, field)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CIRCLEQ_INSERT_TAIL(head, elm, field)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CIRCLEQ_REMOVE(head, elm, field)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CIRCLEQ_REPLACE(head, elm, elm2, field)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;circle queue访问方法（具体说明不再写，可以参考list的，或者就直接展开宏）&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;宏定义&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CIRCLEQ_FIRST(head)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CIRCLEQ_LAST(head)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CIRCLEQ_END(head)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CIRCLEQ_NEXT(elm, field)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CIRCLEQ_PREV(elm, field)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CIRCLEQ_EMPTY(head)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CIRCLEQ_FOREACH(var, head, field)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CIRCLEQ_FOREACH_REVERSE(var, head, field)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;简单例子：&lt;br&gt;
用法与list用法类似，不再重复。&lt;/p&gt;
&lt;h2 id=&#34;小结&#34;&gt;小结 &lt;a href=&#34;#%e5%b0%8f%e7%bb%93&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&amp;amp;emsp虽然这是linux/unix实现的经过长时间考验的成熟的数据结构，但是如果不是很熟悉的话，第一次用起来还是感觉挺不习惯的。但是好在各个数据结构的定义和方法都非常类似，接口比较统一，如果用多的了，熟悉了，感觉就不错了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>libevent 概述</title>
      <link>https://luoguochun.cn/post/2012-03-21-libevent-intro/</link>
      <pubDate>Wed, 21 Mar 2012 21:05:10 +0000</pubDate>
      
      <guid>https://luoguochun.cn/post/2012-03-21-libevent-intro/</guid>
      <description>&lt;p&gt;声明，本文章东搬西扯抄来过的，并非原创，写给自己参考的。&lt;/p&gt;
&lt;p&gt;关于libevent的描述，有两个百科的连接可以参考：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://baike.baidu.com/view/1590523.htm&#34;&gt;libevent百度百科&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://zh.wikipedia.org/wiki/Libevent&#34;&gt;libevent维基百科&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在维基百科时，有几个有用的连接可以参考：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.wangafu.net/~nickm/libevent-book/&#34;&gt;libevent 2.0参考书籍（英文）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;还有另一个竞争力的事件库：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://software.schmorp.de/pkg/libev.html&#34;&gt;libev(另一个有竞争力的事件库)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;libevent是一个事件触发的网络库，适用于windows、linux、bsd等多种平台，内部使用select、epoll、kqueue等系统调用管理事件机制。libevent支持用户使用三种类型的事件，分别是网络IO、定时器、信号三种。Libevent提供了DNS，HTTP Server，RPC等组件。&lt;/p&gt;
&lt;h1 id=&#34;相关组件&#34;&gt;相关组件 &lt;a href=&#34;#%e7%9b%b8%e5%85%b3%e7%bb%84%e4%bb%b6&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;组件&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;evutil&lt;/td&gt;
&lt;td&gt;不同平台网络实现的通用功能函数。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;event 和event_base&lt;/td&gt;
&lt;td&gt;libevent的核心。提供与平台无关的事件驱动的非阻塞IO后端的API。它可以让你知道socket何时可读可写，超时处理和系统信号探测。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bufferevent&lt;/td&gt;
&lt;td&gt;提供event_base更方便的封装函数。提供缓冲支持。bufferevent同样提供多种IO后端。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;evbuffer&lt;/td&gt;
&lt;td&gt;bufferevent的缓冲机制底层实现。并提供更方便和高效的缓冲访问。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;evhttp&lt;/td&gt;
&lt;td&gt;简单的HTTP客户端服务端实现。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;evdns&lt;/td&gt;
&lt;td&gt;简单的DNS客户端服务端实现。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;evrpc&lt;/td&gt;
&lt;td&gt;简单的RPC客户端服务端实现。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;相关库&#34;&gt;相关库 &lt;a href=&#34;#%e7%9b%b8%e5%85%b3%e5%ba%93&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;库&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;libevent_core&lt;/td&gt;
&lt;td&gt;核心事件和缓冲功能。包含所有的event_base, evbuffer, bufferevent, 和工具函数。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;libevent_extra&lt;/td&gt;
&lt;td&gt;协议相关的功能，包含HTTP, DNS, 和RPC。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;libevent&lt;/td&gt;
&lt;td&gt;包含libevent_core和libevent_extra。由于历史的原因而存在。新应用程序不应该连接这个库。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;libevent_pthread&lt;/td&gt;
&lt;td&gt;依赖事pthread线程库，提供线程和锁实现。当你使用pthread多线程时，才连接这个库。（只在某些平台存在）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;libevent_openssl&lt;/td&gt;
&lt;td&gt;依赖于OpenSSL库的加密通信支持。当你使用加密通信时，才连接这个库。（只在某些平台存在）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;相关头文件&#34;&gt;相关头文件 &lt;a href=&#34;#%e7%9b%b8%e5%85%b3%e5%a4%b4%e6%96%87%e4%bb%b6&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;    所有的头文件安装在event2目录下。头文件大类别如下表：
&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类别&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;API头文件&lt;/td&gt;
&lt;td&gt;这个是libevent的对外头文件，文件没有任何后辍。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;兼容头文件&lt;/td&gt;
&lt;td&gt;兼容头文件包含抛弃的函数定义，除非是为了移值旧的程序，否则不要使用。文件以_compat.h结尾。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;结构体头文件&lt;/td&gt;
&lt;td&gt;libevent结构体定义的头文件。文件以_struct.h结尾。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre&gt;&lt;code&gt;    除了上述提到的头文件外，还有一些为了兼容旧程序而使用的头文件。它们不放在event2目录。放在这个目录的上一层。这些文件其实是新文件的包装而已。对应该关系如下表。
&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;旧头文件&lt;/th&gt;
&lt;th&gt;被替换的头文件&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;event.h&lt;/td&gt;
&lt;td&gt;event2/event*.h, event2/buffer*.h, event2/bufferedevent*.h, event2/tag*.h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;evdns.h&lt;/td&gt;
&lt;td&gt;event2/dns*.h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;evhttp.h&lt;/td&gt;
&lt;td&gt;event2/http*.h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rvrpc&lt;/td&gt;
&lt;td&gt;event2/rpc*.h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;evutil&lt;/td&gt;
&lt;td&gt;event2/util*.h&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;其它&#34;&gt;其它 &lt;a href=&#34;#%e5%85%b6%e5%ae%83&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;    本文大多剽窃自[libevent-book](http://www.wangafu.net/~nickm/libevent-book/)。具体请详细参考之。另外很多懒人不太习惯LINUX的编程调试环境，所以根据libevent提供的Makefile建了个VC2008的解决方案，直接解压出来丢到libevent目录，分别编译各个库。另，只为了调试搞DEBUG版本的，RELEASE的动都没动，sameple工程包括所有的例子了，直接编译是不通的。所以如果你要分别测试的话，要搞掉其它的。最简单的方法就是#if 0 #endif之类的。[下载VC2008解决方案](http://download.imlgc.com/lib/libevent/vcbuild.zip)。&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>迷你日志类Minilog</title>
      <link>https://luoguochun.cn/post/2012-02-18-minlog/</link>
      <pubDate>Sat, 18 Feb 2012 10:15:09 +0000</pubDate>
      
      <guid>https://luoguochun.cn/post/2012-02-18-minlog/</guid>
      <description>&lt;h1 id=&#34;简介&#34;&gt;简介 &lt;a href=&#34;#%e7%ae%80%e4%bb%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;日志，在一般系统里是非常非常重要的，它不仅跟踪到程序的执行，同时也是对系统进行各方面分析的基础。其重要性在这里不再一一说明，有兴趣可自行GOOGLE之。&lt;/p&gt;
&lt;p&gt;日志的实现可以很复杂，功能强大的如java的&lt;a href=&#34;http://logging.apache.org/log4j/&#34;&gt;log4j&lt;/a&gt;和移值到C++的&lt;a href=&#34;http://log4cpp.sourceforge.net/&#34;&gt;log4cpp&lt;/a&gt;。当然也可以很简单，就是简单的向控制台打印和写文件。Minilog就是属于这种简单的类型。&lt;/p&gt;
&lt;p&gt;特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;跨平台，当然我只测试LINUX和WINDOWS，买不起苹果。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提供非常丰富的宏，使用非常方便。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;没测试过性能，不过估计不会很差。&lt;/p&gt;
&lt;p&gt;下载：&lt;a href=&#34;http://download.imlgc.com/code/c++/minilog/minilog.zip&#34;&gt;minilog.zip&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;minilog.zip文件列表：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;文件&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;minilog.h&lt;/td&gt;
&lt;td&gt;日志类的头文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;minilog.cpp&lt;/td&gt;
&lt;td&gt;日志类的实现文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;test.h&lt;/td&gt;
&lt;td&gt;测试框架，可参阅之前写的&lt;a href=&#34;http://imlgc.com/?p=20&#34;&gt;Very Very Simple C++ Testing Framework&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;minilogtest.cpp&lt;/td&gt;
&lt;td&gt;测试文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;test.cpp&lt;/td&gt;
&lt;td&gt;测试启动函数，即main函数所在文件&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;实现和使用&#34;&gt;实现和使用 &lt;a href=&#34;#%e5%ae%9e%e7%8e%b0%e5%92%8c%e4%bd%bf%e7%94%a8&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;Minilog的实现只有一个类，为一单件。为了避免频繁的IO交互，日志先进行缓存，当缓存满或者刷日志时，才进行IO操作。日志级别分别为：ALL, DEBUG, INFO, WARNING, ERROR, FATAL, OFF。ALL级别最低，OFF级别最高。终端日志的输出不缓存，不同的级别输出来同的颜色。&lt;/p&gt;
&lt;p&gt;便捷的操作宏。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;宏&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;LOG_DEBUG&lt;/td&gt;
&lt;td&gt;输出调试日志，DEBUG级别&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LOG_INFO&lt;/td&gt;
&lt;td&gt;输出消息日志，INFO级别&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LOG_WARN&lt;/td&gt;
&lt;td&gt;输出警告日志，WARNING级别&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LOG_ERROR&lt;/td&gt;
&lt;td&gt;输出错误日志，ERROR级别&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LOG_FATAL&lt;/td&gt;
&lt;td&gt;输出致命日志，FATAL级别&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SET_LOG_FILE_LEVEL&lt;/td&gt;
&lt;td&gt;设置文件日志级别&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SET_LOG_CONSOLE_LEVEL&lt;/td&gt;
&lt;td&gt;设置终端日志级别&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SET_LOG_LEVEL&lt;/td&gt;
&lt;td&gt;设置终端和文件日志级别&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SET_LOG_PATH&lt;/td&gt;
&lt;td&gt;设置日志的路径&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SET_LOG_FILE_FIXED&lt;/td&gt;
&lt;td&gt;设置日志的文件名，不加任何修饰&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SET_LOG_FILE&lt;/td&gt;
&lt;td&gt;设置日志的文件名，加时间和进程号修饰&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SET_LOG_BUF_SIZE&lt;/td&gt;
&lt;td&gt;设置日志缓冲大小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LOG_FLUSH&lt;/td&gt;
&lt;td&gt;刷日志&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LOG_RELEASE&lt;/td&gt;
&lt;td&gt;释放日志，事实任何事情都不做&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LOG_IS_READY&lt;/td&gt;
&lt;td&gt;测试日志是否准备&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;原先的单件实现是动态分配内存的，于是有LOG_RELEASE这是写法，但是事实上，当程序退出后，如果没有显式释放，是不会刷日志的，于是采用下面这种方法实现：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Minilog&amp;amp; Minilog::GetInst()
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/*    if (sm_pInst == 0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sm_pInst = new Minilog;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    return *sm_pInst;*/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    static Minilog theLog;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    return theLog;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;void Minilog::ReleaseRC()
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/*    if (sm_pInst != 0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;delete sm_pInst;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sm_pInst = 0;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    }*/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  基本使用方法，如果你有一个叫MODULE的模块，要记录这个模块的日志，你可以这样做：
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;#define MODULE &amp;#34;[module]&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;#define X_INFO(...) LOG_INFO(MODULE __VA_ARGS__)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;// 以下省略
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Minilog提供了很多方法，但是通常情况下用宏就可以进行日常的使用了，不建议直接使
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;用，如果想了解如何实现，请参阅代码。
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;示例&#34;&gt;示例 &lt;a href=&#34;#%e7%a4%ba%e4%be%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;SET_LOG_PATH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;SET_LOG_FILE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;//SET_LOG_LEVEL(&amp;#34;debug&amp;#34;);
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;SET_LOG_FILE_LEVEL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;DEBUG&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;SET_LOG_CONSOLE_LEVEL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;debug&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;LOG_DEBUG&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%s %d&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;DEBUG&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;207&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;LOG_INFO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%s %d&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;207&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#ifdef _MSC_VER
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;Sleep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#else
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#endif
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;LOG_WARN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%s %d&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;207&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;LOG_ERROR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%s %d&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;207&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;LOG_FATAL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%s %d&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;207&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;LOG_FLUSH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;运行结果：
&lt;img src=&#34;https://luoguochun.cn/img/minlog/minlog.jpg&#34; alt=&#34;minlog.jpg&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;其它&#34;&gt;其它 &lt;a href=&#34;#%e5%85%b6%e5%ae%83&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;如果可能，所有的文件都不提供VC解决方案，如果用VC。当然你先要设置你的VC环境（运行VC安装目录下vcvarsall.bat这个文件即可），命令行编译方法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;E:\minilog&amp;gt;cl /c /EHsc *.cpp
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;用于 80x86 的 Microsoft (R) 32 位 C/C++ 优化编译器 15.00.30729.01 版
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;版权所有(C) Microsoft Corporation。保留所有权利。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;minilog.cpp
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;minilogtest.cpp
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;test.cpp
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;正在生成代码...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;E:\minilog&amp;gt;link /out:test.exe *.obj
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Microsoft (R) Incremental Linker Version 9.00.30729.01
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Copyright (C) Microsoft Corporation.  All rights reserved.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;E:\minilog&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;当然，你用其它编译器的话，你伪装一下VC，因为VC会定义_MSC_VER这个宏，其实编译器没有，这个宏是判定是否在WINDOWS的标准，当然实际是不合理的，如果需要，请自行修改，比如用mingw g++：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;E:\minilog&amp;gt;g++ -o test.exe *.cpp -D_MSC_VER
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>MyJson, JSON C&#43;&#43; 的另一种实现</title>
      <link>https://luoguochun.cn/post/2012-02-10-myjson-intro/</link>
      <pubDate>Fri, 10 Feb 2012 21:05:10 +0000</pubDate>
      
      <guid>https://luoguochun.cn/post/2012-02-10-myjson-intro/</guid>
      <description>&lt;p&gt;JSON，JavaScript Object Notation, 是一种轻量级的数据交换格式。本质上来说，它和XML, YAML等格式化的数据格式没有什么区别。都是为了方便（人机）阅读和交换的数据格式。&lt;/p&gt;
&lt;p&gt;JSON，是键值的数据结构，键是主要是指字符串，键主要是指字符串，数值，JSON对象，JSON数组，true, false, null这几种类型。要详细了解这种简单而又实用的数据格式，请参阅，&lt;a href=&#34;http://www.json.org/&#34;&gt;英文官网&lt;/a&gt;，&lt;a href=&#34;http://www.json.org/json-zh.html&#34;&gt;中文官网&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;JSON的实现有很多，基本上世界上每种语言都有实现，用C++实现的也有不少，各有特色。因为年前很空闲，于是也随手实现了一个，且叫myjson，特点是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;相对来说小，其实比较啰嗦&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用非常方便和直观&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;虽然不完全实现JSON，使用&lt;a href=&#34;http://sourceforge.net/projects/jsoncpp/&#34;&gt;jsoncpp&lt;/a&gt;的测试数据完全测试过&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在实时交互的系统中，可能效率不高&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一时兴起写的，可能比较粗略&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;p&gt;下载：&lt;a href=&#34;http://download.imlgc.com/code/c++/myjson/myjson.zip&#34;&gt;myjson.zip&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;myjson.zip 文件列表&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;文件/目录&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;json.h&lt;/td&gt;
&lt;td&gt;myjson 的头文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;json.cpp&lt;/td&gt;
&lt;td&gt;myjson 的实现文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;test.h&lt;/td&gt;
&lt;td&gt;简单的测试框架，在&lt;a href=&#34;3/post/2012-02-09-simple-c++-test-framework/&#34;&gt;/post/2012-02-09-simple-c++-test-framework/&lt;/a&gt;文章中说的的框架&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;test.cpp&lt;/td&gt;
&lt;td&gt;myjson的测试文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;testdata&lt;/td&gt;
&lt;td&gt;测试数据目录，jsoncpp的测试数据&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;实现&#34;&gt;实现 &lt;a href=&#34;#%e5%ae%9e%e7%8e%b0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;myjson的主要类的结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://luoguochun.cn/img/myjson/myjson.png&#34; alt=&#34;image&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;其中JsonValueItem是一时手痒写的，仅充当桥梁作用，实际上我们使用时用到的是JsonArray, JsonValue，和Json这三个类。&lt;/p&gt;
&lt;p&gt;各个类的说明：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Json&lt;/td&gt;
&lt;td&gt;表示一个JSON对象。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JsonValue&lt;/td&gt;
&lt;td&gt;表示JSON的值，值包含JSON对象，JSON数组，数值，字符串，false, true, null。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JsonArray&lt;/td&gt;
&lt;td&gt;表示一个JSON数组，数组元素为JSON的值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JsonValueItem&lt;/td&gt;
&lt;td&gt;用于组织JSON数据结构的类，实际不会使用到，具体来说就是以键作为关键字，组成一有序的链表。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;主要类主要函数说明：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类&lt;/th&gt;
&lt;th&gt;函数&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Json&lt;/td&gt;
&lt;td&gt;static int Parse(Json*&amp;amp; pJson, const char* pBuf);&lt;/td&gt;
&lt;td&gt;解析JSON数据。&lt;!-- raw HTML omitted --&gt;参数：pJson 返回的JSON对象&lt;!-- raw HTML omitted --&gt;参数：pBuf  要解析的数据&lt;!-- raw HTML omitted --&gt;返回：0成功，其它参考错误码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;static int Load(Json*&amp;amp; pJson, const char* pFilePath);&lt;/td&gt;
&lt;td&gt;从文件解析JSON数据。&lt;!-- raw HTML omitted --&gt;参数：pJson 返回的JSON对象&lt;!-- raw HTML omitted --&gt;参数：pFilePath文件路径&lt;!-- raw HTML omitted --&gt;返回：0成功，其它参考错误码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;int Save(const char* pFilePath);&lt;/td&gt;
&lt;td&gt;将JSON对象保存到文件。&lt;!-- raw HTML omitted --&gt;参数：pFilePath文件路径&lt;!-- raw HTML omitted --&gt;返回：0成功，其它参考错误码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;JsonValue* Set(const char* szKey, JsonValue&amp;amp; sVal);&lt;/td&gt;
&lt;td&gt;设置JSON键值。&lt;!-- raw HTML omitted --&gt;参数：szKey 健&lt;!-- raw HTML omitted --&gt;参数：sVal 值&lt;!-- raw HTML omitted --&gt;返回：JSON值，0则出错&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;JsonValue* Get(const char* szKey) const;&lt;/td&gt;
&lt;td&gt;获取JSON值。&lt;!-- raw HTML omitted --&gt;参数：szKey 健&lt;!-- raw HTML omitted --&gt;返回：JSON值，0则出错&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;void Dump(std::string&amp;amp; strDump) const;&lt;/td&gt;
&lt;td&gt;将JSON对象以最紧密的方式导出。&lt;!-- raw HTML omitted --&gt;参数：strDump返回的数据&lt;!-- raw HTML omitted --&gt;返回：无&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;void DumpFormat(std::string&amp;amp; strDump, int nSpace = FORMAT_SPACE) const;&lt;/td&gt;
&lt;td&gt;将JSON对象以格式化的方式导出。&lt;!-- raw HTML omitted --&gt;参数：strDump返回的数据&lt;!-- raw HTML omitted --&gt;参数：Space 空格数&lt;!-- raw HTML omitted --&gt;返回：无&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;JsonValue&amp;amp; operator [] (const char* szKey);/const JsonValue&amp;amp; operator [] (const char* szKey) const;&lt;/td&gt;
&lt;td&gt;JSON对象[]操作符，有点类似STL的MAP，当键不存在时，插入一个。&lt;!-- raw HTML omitted --&gt;参数：szKey 健&lt;!-- raw HTML omitted --&gt;返回：JSON值（可能无效）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JsonValue&lt;/td&gt;
&lt;td&gt;operator const char*();&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;operator char*();&lt;!-- raw HTML omitted --&gt;operator int();&lt;!-- raw HTML omitted --&gt;operator long long();&lt;!-- raw HTML omitted --&gt;operator float();&lt;!-- raw HTML omitted --&gt;operator double();&lt;!-- raw HTML omitted --&gt;operator Json();&lt;!-- raw HTML omitted --&gt;operator JsonArray();&lt;/td&gt;
&lt;td&gt;各种转换操作符。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;JsonValue&amp;amp; operator = (bool bVal);&lt;!-- raw HTML omitted --&gt;JsonValue&amp;amp; operator = (const char* szVal);&lt;!-- raw HTML omitted --&gt;JsonValue&amp;amp; operator = (int nVal);&lt;!-- raw HTML omitted --&gt;JsonValue&amp;amp; operator = (long long llVal);&lt;!-- raw HTML omitted --&gt;JsonValue&amp;amp; operator = (float fVal);&lt;!-- raw HTML omitted --&gt;JsonValue&amp;amp; operator = (double fVal);&lt;!-- raw HTML omitted --&gt;JsonValue&amp;amp; operator = (const Json&amp;amp; sVal);&lt;!-- raw HTML omitted --&gt;JsonValue&amp;amp; operator = (const JsonArray&amp;amp; sArr);&lt;/td&gt;
&lt;td&gt;各种转换赋值符。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;JsonValue&amp;amp; operator [] (const char* szKey);&lt;!-- raw HTML omitted --&gt;const JsonValue&amp;amp; operator [] (const char* szKey) const;&lt;/td&gt;
&lt;td&gt;当值是JSON对象是，此操作符有效。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JsonArray&lt;/td&gt;
&lt;td&gt;JsonValue&amp;amp; Get(int nIndex) const;&lt;/td&gt;
&lt;td&gt;获取某下标的JSON值。&lt;!-- raw HTML omitted --&gt;参数：下标&lt;!-- raw HTML omitted --&gt;返回：JSON值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;JsonValue&amp;amp; operator[](int nIndex);/const JsonValue&amp;amp; operator[](int nIndex) const;&lt;/td&gt;
&lt;td&gt;同上&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;int Add(JsonValue&amp;amp; sVal);&lt;/td&gt;
&lt;td&gt;增加一JSON值到数组里。&lt;!-- raw HTML omitted --&gt;参数：sVal&lt;!-- raw HTML omitted --&gt;返回：0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;int GetSize() const;&lt;/td&gt;
&lt;td&gt;返回数值的长度。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;示例&#34;&gt;示例 &lt;a href=&#34;#%e7%a4%ba%e4%be%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;简单的演示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    Json json;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    JsonValue jv = true;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    json[&amp;#34;a&amp;#34;] = jv;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    jv = json;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    json.Set(&amp;#34;c&amp;#34;, jv);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    jv = (char*)0;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    json.Set(&amp;#34;d&amp;#34;, jv);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    JsonArray sArr;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    sArr[0] = 100;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    sArr[1] = &amp;#34;abcdefg&amp;#34;;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    sArr[2] = false;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    jv = sArr;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    json.Set(&amp;#34;e&amp;#34;, jv);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; // 上述代码产生以下JSON数据
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;a&amp;#34;:true,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;c&amp;#34;:{
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &amp;#34;a&amp;#34;:true
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   },
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &amp;#34;d&amp;#34;:null,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &amp;#34;e&amp;#34;:[
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     100,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &amp;#34;abcdefg&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     false
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;其它&#34;&gt;其它 &lt;a href=&#34;#%e5%85%b6%e5%ae%83&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;一时兴趣的东西，没有经过大脑的设计，如果用于实时系统还要应该考虑一下其性能，NEW太多了。但是用于实时系统的初始化和清理保存信息还是不错的。注意，这里说的是实时系统。&lt;/p&gt;
&lt;p&gt;不过还是很快的啦！两个测试用例在我非常烂的是电脑上还有下面的结果（实际上统计的时间不准确的，是相对大很多的）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[==========] Running 2 tests from 1 test cases
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[----------] 2 tests from Json
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[ RUN      ] Json.ConstructJson
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[       OK ] Json.ConstructJson (1 ms)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[ RUN      ] Json.ParseJson
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[       OK ] Json.ParseJson (7 ms)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[----------] 2 tests from Json (17 ms total)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[==========] 2 tests from 1 test case ran (26 ms total)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[  PASSED  ] 2 tests
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>gtest 小结</title>
      <link>https://luoguochun.cn/post/2011-12-05-gtest-summary/</link>
      <pubDate>Mon, 05 Dec 2011 12:00:00 +0000</pubDate>
      
      <guid>https://luoguochun.cn/post/2011-12-05-gtest-summary/</guid>
      <description>&lt;p&gt;GTEST 是简单而且又非常实用的测试框架。下面关于GTEST的一些简单总结。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;编译&lt;br&gt;
在GNU系统下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; g++ -I${GTEST_DIR}/include -I${GTEST_DIR} -c ${GTEST_DIR}/src/gtest-all.cc        

 ar -rv libgtest.a gtest-all.o    
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在WINDOWS下：&lt;br&gt;
GTEST在MSVC下面提供了相应的工程文件，直接用VS编译即可。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;简单用法&lt;br&gt;
在GNU系统下，直接包含GTEST的头文件，连接到GTEST库。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; g++ -I${GTEST_DIR}/include path/to/your_test.cc libgtest.a –lpthread -o your_test        
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在WINDOWS下直接连接到静态库。&lt;br&gt;
3. SetUp &amp;amp; TearDown
GTEST提供了以下级别的SETUP和TEARDOW。&lt;br&gt;
3.1 程序级别&lt;br&gt;
程序级别的是指程序在启动的时候和结束的时候分别SETUP和TEARDOWN一次。其作用与全局变量类似。&lt;br&gt;
第一步，继承类：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    class Environment {

    public:

    // The d&#39;tor is virtual as we need to subclass Environment.

    virtual ~Environment() {}

    // Override this to define how to set up the environment.

    virtual void SetUp() {}

    // Override this to define how to tear down the environment.

    virtual void TearDown() {}

    private:

    // If you see an error about overriding the following function or

    // about it being private, you have mis-spelled SetUp() as Setup().

    struct Setup_should_be_spelled_SetUp {};

    virtual Setup_should_be_spelled_SetUp* Setup() { return NULL; }

    };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;重写里面的SETUP和TEARDOWN方法。&lt;br&gt;
第二步，调用Environment* AddGlobalTestEnvironment(Environment* env)，注意这个要在RUN_ALL_TESTS前调用。如&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    int main(int argc, char* argv[])
    {
        testing::AddGlobalTestEnvironment(new XXX Environment);
        testing::InitGoogleTest(&amp;amp;argc, argv);
        return RUN_ALL_TESTS();
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3.2 Fixture 级别&lt;br&gt;
Fixture 级别是指，对于在这FIXTURE里的所有TESTCASE，只调用一次SETUP和TEARDOWN。&lt;br&gt;
在你的FIXTURE里，添加两个静态的函数SetUpTestCase和TearDownTestCase&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    class XXXTest : public ::testing::Test {
     protected:
      static void SetUpTestCase() {
      }
      static void TearDownTestCase() {
      }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3.3 TestCase 级别&lt;br&gt;
TestCase 级别是指TESTCASE调用之前和调用后分别调用的。&lt;br&gt;
在你的TESTCASE里，重写虚函数SetUp和TearDown即可。如。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    class XXXTest : public ::testing::Test {
     protected:
      virtual void SetUp() { ... }
      virtual void TearDown() { ... }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Assertion&lt;br&gt;
GTEST提供两种，一种是ASSERT_XXX和EXPECT_XXX。前者表示不继续执行TESTCASE，后者表示继续执行。&lt;br&gt;
比如ASSERT_EQ, ASSERT_STREQ,EXPECT_EQ,EXPECT_TRUE等。&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>
